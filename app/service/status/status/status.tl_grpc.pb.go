//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: status.tl.proto

package status

import (
	context "context"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPCStatus_StatusSetSessionOnline_FullMethodName           = "/status.RPCStatus/status_setSessionOnline"
	RPCStatus_StatusSetSessionOffline_FullMethodName          = "/status.RPCStatus/status_setSessionOffline"
	RPCStatus_StatusGetUserOnlineSessions_FullMethodName      = "/status.RPCStatus/status_getUserOnlineSessions"
	RPCStatus_StatusGetUsersOnlineSessionsList_FullMethodName = "/status.RPCStatus/status_getUsersOnlineSessionsList"
	RPCStatus_StatusGetChannelOnlineUsers_FullMethodName      = "/status.RPCStatus/status_getChannelOnlineUsers"
	RPCStatus_StatusSetUserChannelsOnline_FullMethodName      = "/status.RPCStatus/status_setUserChannelsOnline"
	RPCStatus_StatusSetUserChannelsOffline_FullMethodName     = "/status.RPCStatus/status_setUserChannelsOffline"
	RPCStatus_StatusSetChannelUserOffline_FullMethodName      = "/status.RPCStatus/status_setChannelUserOffline"
	RPCStatus_StatusSetChannelUsersOnline_FullMethodName      = "/status.RPCStatus/status_setChannelUsersOnline"
	RPCStatus_StatusSetChannelOffline_FullMethodName          = "/status.RPCStatus/status_setChannelOffline"
)

// RPCStatusClient is the client API for RPCStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCStatusClient interface {
	StatusSetSessionOnline(ctx context.Context, in *TLStatusSetSessionOnline, opts ...grpc.CallOption) (*mtproto.Bool, error)
	StatusSetSessionOffline(ctx context.Context, in *TLStatusSetSessionOffline, opts ...grpc.CallOption) (*mtproto.Bool, error)
	StatusGetUserOnlineSessions(ctx context.Context, in *TLStatusGetUserOnlineSessions, opts ...grpc.CallOption) (*UserSessionEntryList, error)
	StatusGetUsersOnlineSessionsList(ctx context.Context, in *TLStatusGetUsersOnlineSessionsList, opts ...grpc.CallOption) (*Vector_UserSessionEntryList, error)
	StatusGetChannelOnlineUsers(ctx context.Context, in *TLStatusGetChannelOnlineUsers, opts ...grpc.CallOption) (*Vector_Long, error)
	StatusSetUserChannelsOnline(ctx context.Context, in *TLStatusSetUserChannelsOnline, opts ...grpc.CallOption) (*mtproto.Bool, error)
	StatusSetUserChannelsOffline(ctx context.Context, in *TLStatusSetUserChannelsOffline, opts ...grpc.CallOption) (*mtproto.Bool, error)
	StatusSetChannelUserOffline(ctx context.Context, in *TLStatusSetChannelUserOffline, opts ...grpc.CallOption) (*mtproto.Bool, error)
	StatusSetChannelUsersOnline(ctx context.Context, in *TLStatusSetChannelUsersOnline, opts ...grpc.CallOption) (*mtproto.Bool, error)
	StatusSetChannelOffline(ctx context.Context, in *TLStatusSetChannelOffline, opts ...grpc.CallOption) (*mtproto.Bool, error)
}

type rPCStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCStatusClient(cc grpc.ClientConnInterface) RPCStatusClient {
	return &rPCStatusClient{cc}
}

func (c *rPCStatusClient) StatusSetSessionOnline(ctx context.Context, in *TLStatusSetSessionOnline, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCStatus_StatusSetSessionOnline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusSetSessionOffline(ctx context.Context, in *TLStatusSetSessionOffline, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCStatus_StatusSetSessionOffline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusGetUserOnlineSessions(ctx context.Context, in *TLStatusGetUserOnlineSessions, opts ...grpc.CallOption) (*UserSessionEntryList, error) {
	out := new(UserSessionEntryList)
	err := c.cc.Invoke(ctx, RPCStatus_StatusGetUserOnlineSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusGetUsersOnlineSessionsList(ctx context.Context, in *TLStatusGetUsersOnlineSessionsList, opts ...grpc.CallOption) (*Vector_UserSessionEntryList, error) {
	out := new(Vector_UserSessionEntryList)
	err := c.cc.Invoke(ctx, RPCStatus_StatusGetUsersOnlineSessionsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusGetChannelOnlineUsers(ctx context.Context, in *TLStatusGetChannelOnlineUsers, opts ...grpc.CallOption) (*Vector_Long, error) {
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, RPCStatus_StatusGetChannelOnlineUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusSetUserChannelsOnline(ctx context.Context, in *TLStatusSetUserChannelsOnline, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCStatus_StatusSetUserChannelsOnline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusSetUserChannelsOffline(ctx context.Context, in *TLStatusSetUserChannelsOffline, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCStatus_StatusSetUserChannelsOffline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusSetChannelUserOffline(ctx context.Context, in *TLStatusSetChannelUserOffline, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCStatus_StatusSetChannelUserOffline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusSetChannelUsersOnline(ctx context.Context, in *TLStatusSetChannelUsersOnline, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCStatus_StatusSetChannelUsersOnline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCStatusClient) StatusSetChannelOffline(ctx context.Context, in *TLStatusSetChannelOffline, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCStatus_StatusSetChannelOffline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCStatusServer is the server API for RPCStatus service.
// All implementations should embed UnimplementedRPCStatusServer
// for forward compatibility
type RPCStatusServer interface {
	StatusSetSessionOnline(context.Context, *TLStatusSetSessionOnline) (*mtproto.Bool, error)
	StatusSetSessionOffline(context.Context, *TLStatusSetSessionOffline) (*mtproto.Bool, error)
	StatusGetUserOnlineSessions(context.Context, *TLStatusGetUserOnlineSessions) (*UserSessionEntryList, error)
	StatusGetUsersOnlineSessionsList(context.Context, *TLStatusGetUsersOnlineSessionsList) (*Vector_UserSessionEntryList, error)
	StatusGetChannelOnlineUsers(context.Context, *TLStatusGetChannelOnlineUsers) (*Vector_Long, error)
	StatusSetUserChannelsOnline(context.Context, *TLStatusSetUserChannelsOnline) (*mtproto.Bool, error)
	StatusSetUserChannelsOffline(context.Context, *TLStatusSetUserChannelsOffline) (*mtproto.Bool, error)
	StatusSetChannelUserOffline(context.Context, *TLStatusSetChannelUserOffline) (*mtproto.Bool, error)
	StatusSetChannelUsersOnline(context.Context, *TLStatusSetChannelUsersOnline) (*mtproto.Bool, error)
	StatusSetChannelOffline(context.Context, *TLStatusSetChannelOffline) (*mtproto.Bool, error)
}

// UnimplementedRPCStatusServer should be embedded to have forward compatible implementations.
type UnimplementedRPCStatusServer struct {
}

func (UnimplementedRPCStatusServer) StatusSetSessionOnline(context.Context, *TLStatusSetSessionOnline) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSetSessionOnline not implemented")
}
func (UnimplementedRPCStatusServer) StatusSetSessionOffline(context.Context, *TLStatusSetSessionOffline) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSetSessionOffline not implemented")
}
func (UnimplementedRPCStatusServer) StatusGetUserOnlineSessions(context.Context, *TLStatusGetUserOnlineSessions) (*UserSessionEntryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusGetUserOnlineSessions not implemented")
}
func (UnimplementedRPCStatusServer) StatusGetUsersOnlineSessionsList(context.Context, *TLStatusGetUsersOnlineSessionsList) (*Vector_UserSessionEntryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusGetUsersOnlineSessionsList not implemented")
}
func (UnimplementedRPCStatusServer) StatusGetChannelOnlineUsers(context.Context, *TLStatusGetChannelOnlineUsers) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusGetChannelOnlineUsers not implemented")
}
func (UnimplementedRPCStatusServer) StatusSetUserChannelsOnline(context.Context, *TLStatusSetUserChannelsOnline) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSetUserChannelsOnline not implemented")
}
func (UnimplementedRPCStatusServer) StatusSetUserChannelsOffline(context.Context, *TLStatusSetUserChannelsOffline) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSetUserChannelsOffline not implemented")
}
func (UnimplementedRPCStatusServer) StatusSetChannelUserOffline(context.Context, *TLStatusSetChannelUserOffline) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSetChannelUserOffline not implemented")
}
func (UnimplementedRPCStatusServer) StatusSetChannelUsersOnline(context.Context, *TLStatusSetChannelUsersOnline) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSetChannelUsersOnline not implemented")
}
func (UnimplementedRPCStatusServer) StatusSetChannelOffline(context.Context, *TLStatusSetChannelOffline) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StatusSetChannelOffline not implemented")
}

// UnsafeRPCStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCStatusServer will
// result in compilation errors.
type UnsafeRPCStatusServer interface {
	mustEmbedUnimplementedRPCStatusServer()
}

func RegisterRPCStatusServer(s grpc.ServiceRegistrar, srv RPCStatusServer) {
	s.RegisterService(&RPCStatus_ServiceDesc, srv)
}

func _RPCStatus_StatusSetSessionOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusSetSessionOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusSetSessionOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatus_StatusSetSessionOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusSetSessionOnline(ctx, req.(*TLStatusSetSessionOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusSetSessionOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusSetSessionOffline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusSetSessionOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatus_StatusSetSessionOffline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusSetSessionOffline(ctx, req.(*TLStatusSetSessionOffline))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusGetUserOnlineSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusGetUserOnlineSessions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusGetUserOnlineSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatus_StatusGetUserOnlineSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusGetUserOnlineSessions(ctx, req.(*TLStatusGetUserOnlineSessions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusGetUsersOnlineSessionsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusGetUsersOnlineSessionsList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusGetUsersOnlineSessionsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatus_StatusGetUsersOnlineSessionsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusGetUsersOnlineSessionsList(ctx, req.(*TLStatusGetUsersOnlineSessionsList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusGetChannelOnlineUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusGetChannelOnlineUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusGetChannelOnlineUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatus_StatusGetChannelOnlineUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusGetChannelOnlineUsers(ctx, req.(*TLStatusGetChannelOnlineUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusSetUserChannelsOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusSetUserChannelsOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusSetUserChannelsOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatus_StatusSetUserChannelsOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusSetUserChannelsOnline(ctx, req.(*TLStatusSetUserChannelsOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusSetUserChannelsOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusSetUserChannelsOffline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusSetUserChannelsOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatus_StatusSetUserChannelsOffline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusSetUserChannelsOffline(ctx, req.(*TLStatusSetUserChannelsOffline))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusSetChannelUserOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusSetChannelUserOffline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusSetChannelUserOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatus_StatusSetChannelUserOffline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusSetChannelUserOffline(ctx, req.(*TLStatusSetChannelUserOffline))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusSetChannelUsersOnline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusSetChannelUsersOnline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusSetChannelUsersOnline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatus_StatusSetChannelUsersOnline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusSetChannelUsersOnline(ctx, req.(*TLStatusSetChannelUsersOnline))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCStatus_StatusSetChannelOffline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLStatusSetChannelOffline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCStatusServer).StatusSetChannelOffline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCStatus_StatusSetChannelOffline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCStatusServer).StatusSetChannelOffline(ctx, req.(*TLStatusSetChannelOffline))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCStatus_ServiceDesc is the grpc.ServiceDesc for RPCStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "status.RPCStatus",
	HandlerType: (*RPCStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "status_setSessionOnline",
			Handler:    _RPCStatus_StatusSetSessionOnline_Handler,
		},
		{
			MethodName: "status_setSessionOffline",
			Handler:    _RPCStatus_StatusSetSessionOffline_Handler,
		},
		{
			MethodName: "status_getUserOnlineSessions",
			Handler:    _RPCStatus_StatusGetUserOnlineSessions_Handler,
		},
		{
			MethodName: "status_getUsersOnlineSessionsList",
			Handler:    _RPCStatus_StatusGetUsersOnlineSessionsList_Handler,
		},
		{
			MethodName: "status_getChannelOnlineUsers",
			Handler:    _RPCStatus_StatusGetChannelOnlineUsers_Handler,
		},
		{
			MethodName: "status_setUserChannelsOnline",
			Handler:    _RPCStatus_StatusSetUserChannelsOnline_Handler,
		},
		{
			MethodName: "status_setUserChannelsOffline",
			Handler:    _RPCStatus_StatusSetUserChannelsOffline_Handler,
		},
		{
			MethodName: "status_setChannelUserOffline",
			Handler:    _RPCStatus_StatusSetChannelUserOffline_Handler,
		},
		{
			MethodName: "status_setChannelUsersOnline",
			Handler:    _RPCStatus_StatusSetChannelUsersOnline_Handler,
		},
		{
			MethodName: "status_setChannelOffline",
			Handler:    _RPCStatus_StatusSetChannelOffline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "status.tl.proto",
}
