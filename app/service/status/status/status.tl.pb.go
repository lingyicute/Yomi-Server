//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: status.tl.proto

package status

import (
	mtproto "github.com/teamgram/proto/mtproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLConstructor int32

const (
	TLConstructor_CRC32_UNKNOWN                           TLConstructor = 0
	TLConstructor_CRC32_sessionEntry                      TLConstructor = 392473649
	TLConstructor_CRC32_userSessionEntryList              TLConstructor = -269700200
	TLConstructor_CRC32_status_setSessionOnline           TLConstructor = 1381075919
	TLConstructor_CRC32_status_setSessionOffline          TLConstructor = 631663196
	TLConstructor_CRC32_status_getUserOnlineSessions      TLConstructor = -406788659
	TLConstructor_CRC32_status_getUsersOnlineSessionsList TLConstructor = -2009385532
	TLConstructor_CRC32_status_getChannelOnlineUsers      TLConstructor = 1166257237
	TLConstructor_CRC32_status_setUserChannelsOnline      TLConstructor = -851901363
	TLConstructor_CRC32_status_setUserChannelsOffline     TLConstructor = 1822646698
	TLConstructor_CRC32_status_setChannelUserOffline      TLConstructor = -997471364
	TLConstructor_CRC32_status_setChannelUsersOnline      TLConstructor = -1499734793
	TLConstructor_CRC32_status_setChannelOffline          TLConstructor = 1266112245
)

// Enum value maps for TLConstructor.
var (
	TLConstructor_name = map[int32]string{
		0:           "CRC32_UNKNOWN",
		392473649:   "CRC32_sessionEntry",
		-269700200:  "CRC32_userSessionEntryList",
		1381075919:  "CRC32_status_setSessionOnline",
		631663196:   "CRC32_status_setSessionOffline",
		-406788659:  "CRC32_status_getUserOnlineSessions",
		-2009385532: "CRC32_status_getUsersOnlineSessionsList",
		1166257237:  "CRC32_status_getChannelOnlineUsers",
		-851901363:  "CRC32_status_setUserChannelsOnline",
		1822646698:  "CRC32_status_setUserChannelsOffline",
		-997471364:  "CRC32_status_setChannelUserOffline",
		-1499734793: "CRC32_status_setChannelUsersOnline",
		1266112245:  "CRC32_status_setChannelOffline",
	}
	TLConstructor_value = map[string]int32{
		"CRC32_UNKNOWN":                           0,
		"CRC32_sessionEntry":                      392473649,
		"CRC32_userSessionEntryList":              -269700200,
		"CRC32_status_setSessionOnline":           1381075919,
		"CRC32_status_setSessionOffline":          631663196,
		"CRC32_status_getUserOnlineSessions":      -406788659,
		"CRC32_status_getUsersOnlineSessionsList": -2009385532,
		"CRC32_status_getChannelOnlineUsers":      1166257237,
		"CRC32_status_setUserChannelsOnline":      -851901363,
		"CRC32_status_setUserChannelsOffline":     1822646698,
		"CRC32_status_setChannelUserOffline":      -997471364,
		"CRC32_status_setChannelUsersOnline":      -1499734793,
		"CRC32_status_setChannelOffline":          1266112245,
	}
)

func (x TLConstructor) Enum() *TLConstructor {
	p := new(TLConstructor)
	*p = x
	return p
}

func (x TLConstructor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLConstructor) Descriptor() protoreflect.EnumDescriptor {
	return file_status_tl_proto_enumTypes[0].Descriptor()
}

func (TLConstructor) Type() protoreflect.EnumType {
	return &file_status_tl_proto_enumTypes[0]
}

func (x TLConstructor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLConstructor.Descriptor instead.
func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{0}
}

// SessionEntry <--
//   - TL_sessionEntry
type SessionEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	UserId        int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId     int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	Gateway       string        `protobuf:"bytes,5,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Expired       int64         `protobuf:"varint,6,opt,name=expired,proto3" json:"expired,omitempty"`
	Layer         int32         `protobuf:"varint,7,opt,name=layer,proto3" json:"layer,omitempty"`
	PermAuthKeyId int64         `protobuf:"varint,8,opt,name=perm_auth_key_id,json=permAuthKeyId,proto3" json:"perm_auth_key_id,omitempty"`
	Client        string        `protobuf:"bytes,9,opt,name=client,proto3" json:"client,omitempty"`
}

func (x *SessionEntry) Reset() {
	*x = SessionEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionEntry) ProtoMessage() {}

func (x *SessionEntry) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionEntry.ProtoReflect.Descriptor instead.
func (*SessionEntry) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{0}
}

func (x *SessionEntry) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *SessionEntry) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *SessionEntry) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SessionEntry) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *SessionEntry) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *SessionEntry) GetExpired() int64 {
	if x != nil {
		return x.Expired
	}
	return 0
}

func (x *SessionEntry) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *SessionEntry) GetPermAuthKeyId() int64 {
	if x != nil {
		return x.PermAuthKeyId
	}
	return 0
}

func (x *SessionEntry) GetClient() string {
	if x != nil {
		return x.Client
	}
	return ""
}

type TLSessionEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *SessionEntry `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLSessionEntry) Reset() {
	*x = TLSessionEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSessionEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSessionEntry) ProtoMessage() {}

func (x *TLSessionEntry) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSessionEntry.ProtoReflect.Descriptor instead.
func (*TLSessionEntry) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{1}
}

func (x *TLSessionEntry) GetData2() *SessionEntry {
	if x != nil {
		return x.Data2
	}
	return nil
}

// UserSessionEntryList <--
//   - TL_userSessionEntryList
type UserSessionEntryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string          `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor   `protobuf:"varint,2,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	UserId        int64           `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserSessions  []*SessionEntry `protobuf:"bytes,4,rep,name=user_sessions,json=userSessions,proto3" json:"user_sessions,omitempty"`
}

func (x *UserSessionEntryList) Reset() {
	*x = UserSessionEntryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSessionEntryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSessionEntryList) ProtoMessage() {}

func (x *UserSessionEntryList) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSessionEntryList.ProtoReflect.Descriptor instead.
func (*UserSessionEntryList) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{2}
}

func (x *UserSessionEntryList) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *UserSessionEntryList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *UserSessionEntryList) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserSessionEntryList) GetUserSessions() []*SessionEntry {
	if x != nil {
		return x.UserSessions
	}
	return nil
}

type TLUserSessionEntryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *UserSessionEntryList `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLUserSessionEntryList) Reset() {
	*x = TLUserSessionEntryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserSessionEntryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserSessionEntryList) ProtoMessage() {}

func (x *TLUserSessionEntryList) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserSessionEntryList.ProtoReflect.Descriptor instead.
func (*TLUserSessionEntryList) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{3}
}

func (x *TLUserSessionEntryList) GetData2() *UserSessionEntryList {
	if x != nil {
		return x.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLStatusSetSessionOnline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Session     *SessionEntry `protobuf:"bytes,4,opt,name=session,proto3" json:"session,omitempty"`
}

func (x *TLStatusSetSessionOnline) Reset() {
	*x = TLStatusSetSessionOnline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLStatusSetSessionOnline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatusSetSessionOnline) ProtoMessage() {}

func (x *TLStatusSetSessionOnline) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatusSetSessionOnline.ProtoReflect.Descriptor instead.
func (*TLStatusSetSessionOnline) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{4}
}

func (x *TLStatusSetSessionOnline) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatusSetSessionOnline) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLStatusSetSessionOnline) GetSession() *SessionEntry {
	if x != nil {
		return x.Session
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLStatusSetSessionOffline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (x *TLStatusSetSessionOffline) Reset() {
	*x = TLStatusSetSessionOffline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLStatusSetSessionOffline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatusSetSessionOffline) ProtoMessage() {}

func (x *TLStatusSetSessionOffline) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatusSetSessionOffline.ProtoReflect.Descriptor instead.
func (*TLStatusSetSessionOffline) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{5}
}

func (x *TLStatusSetSessionOffline) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatusSetSessionOffline) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLStatusSetSessionOffline) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLStatusGetUserOnlineSessions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLStatusGetUserOnlineSessions) Reset() {
	*x = TLStatusGetUserOnlineSessions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLStatusGetUserOnlineSessions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatusGetUserOnlineSessions) ProtoMessage() {}

func (x *TLStatusGetUserOnlineSessions) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatusGetUserOnlineSessions.ProtoReflect.Descriptor instead.
func (*TLStatusGetUserOnlineSessions) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{6}
}

func (x *TLStatusGetUserOnlineSessions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatusGetUserOnlineSessions) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLStatusGetUsersOnlineSessionsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	Users       []int64       `protobuf:"varint,3,rep,packed,name=users,proto3" json:"users,omitempty"`
}

func (x *TLStatusGetUsersOnlineSessionsList) Reset() {
	*x = TLStatusGetUsersOnlineSessionsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLStatusGetUsersOnlineSessionsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatusGetUsersOnlineSessionsList) ProtoMessage() {}

func (x *TLStatusGetUsersOnlineSessionsList) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatusGetUsersOnlineSessionsList.ProtoReflect.Descriptor instead.
func (*TLStatusGetUsersOnlineSessionsList) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{7}
}

func (x *TLStatusGetUsersOnlineSessionsList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatusGetUsersOnlineSessionsList) GetUsers() []int64 {
	if x != nil {
		return x.Users
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLStatusGetChannelOnlineUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	ChannelId   int64         `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *TLStatusGetChannelOnlineUsers) Reset() {
	*x = TLStatusGetChannelOnlineUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLStatusGetChannelOnlineUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatusGetChannelOnlineUsers) ProtoMessage() {}

func (x *TLStatusGetChannelOnlineUsers) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatusGetChannelOnlineUsers.ProtoReflect.Descriptor instead.
func (*TLStatusGetChannelOnlineUsers) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{8}
}

func (x *TLStatusGetChannelOnlineUsers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatusGetChannelOnlineUsers) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLStatusSetUserChannelsOnline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Channels    []int64       `protobuf:"varint,4,rep,packed,name=channels,proto3" json:"channels,omitempty"`
}

func (x *TLStatusSetUserChannelsOnline) Reset() {
	*x = TLStatusSetUserChannelsOnline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLStatusSetUserChannelsOnline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatusSetUserChannelsOnline) ProtoMessage() {}

func (x *TLStatusSetUserChannelsOnline) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatusSetUserChannelsOnline.ProtoReflect.Descriptor instead.
func (*TLStatusSetUserChannelsOnline) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{9}
}

func (x *TLStatusSetUserChannelsOnline) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatusSetUserChannelsOnline) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLStatusSetUserChannelsOnline) GetChannels() []int64 {
	if x != nil {
		return x.Channels
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLStatusSetUserChannelsOffline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Channels    []int64       `protobuf:"varint,4,rep,packed,name=channels,proto3" json:"channels,omitempty"`
}

func (x *TLStatusSetUserChannelsOffline) Reset() {
	*x = TLStatusSetUserChannelsOffline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLStatusSetUserChannelsOffline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatusSetUserChannelsOffline) ProtoMessage() {}

func (x *TLStatusSetUserChannelsOffline) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatusSetUserChannelsOffline.ProtoReflect.Descriptor instead.
func (*TLStatusSetUserChannelsOffline) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{10}
}

func (x *TLStatusSetUserChannelsOffline) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatusSetUserChannelsOffline) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLStatusSetUserChannelsOffline) GetChannels() []int64 {
	if x != nil {
		return x.Channels
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLStatusSetChannelUserOffline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	ChannelId   int64         `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	UserId      int64         `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLStatusSetChannelUserOffline) Reset() {
	*x = TLStatusSetChannelUserOffline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLStatusSetChannelUserOffline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatusSetChannelUserOffline) ProtoMessage() {}

func (x *TLStatusSetChannelUserOffline) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatusSetChannelUserOffline.ProtoReflect.Descriptor instead.
func (*TLStatusSetChannelUserOffline) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{11}
}

func (x *TLStatusSetChannelUserOffline) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatusSetChannelUserOffline) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *TLStatusSetChannelUserOffline) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLStatusSetChannelUsersOnline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	ChannelId   int64         `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Id          []int64       `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *TLStatusSetChannelUsersOnline) Reset() {
	*x = TLStatusSetChannelUsersOnline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLStatusSetChannelUsersOnline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatusSetChannelUsersOnline) ProtoMessage() {}

func (x *TLStatusSetChannelUsersOnline) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatusSetChannelUsersOnline.ProtoReflect.Descriptor instead.
func (*TLStatusSetChannelUsersOnline) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{12}
}

func (x *TLStatusSetChannelUsersOnline) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatusSetChannelUsersOnline) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *TLStatusSetChannelUsersOnline) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLStatusSetChannelOffline struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=status.TLConstructor" json:"constructor,omitempty"`
	ChannelId   int64         `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *TLStatusSetChannelOffline) Reset() {
	*x = TLStatusSetChannelOffline{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLStatusSetChannelOffline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLStatusSetChannelOffline) ProtoMessage() {}

func (x *TLStatusSetChannelOffline) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLStatusSetChannelOffline.ProtoReflect.Descriptor instead.
func (*TLStatusSetChannelOffline) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{13}
}

func (x *TLStatusSetChannelOffline) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLStatusSetChannelOffline) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
// Vector api result type
type Vector_UserSessionEntryList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*UserSessionEntryList `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_UserSessionEntryList) Reset() {
	*x = Vector_UserSessionEntryList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_UserSessionEntryList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_UserSessionEntryList) ProtoMessage() {}

func (x *Vector_UserSessionEntryList) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_UserSessionEntryList.ProtoReflect.Descriptor instead.
func (*Vector_UserSessionEntryList) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{14}
}

func (x *Vector_UserSessionEntryList) GetDatas() []*UserSessionEntryList {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_Long struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []int64 `protobuf:"varint,1,rep,packed,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_Long) Reset() {
	*x = Vector_Long{}
	if protoimpl.UnsafeEnabled {
		mi := &file_status_tl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_Long) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_Long) ProtoMessage() {}

func (x *Vector_Long) ProtoReflect() protoreflect.Message {
	mi := &file_status_tl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_Long.ProtoReflect.Descriptor instead.
func (*Vector_Long) Descriptor() ([]byte, []int) {
	return file_status_tl_proto_rawDescGZIP(), []int{15}
}

func (x *Vector_Long) GetDatas() []int64 {
	if x != nil {
		return x.Datas
	}
	return nil
}

var File_status_tl_proto protoreflect.FileDescriptor

var file_status_tl_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x74, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x02, 0x0a, 0x0c, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x10, 0x70, 0x65,
	0x72, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x3d, 0x0a, 0x0f, 0x54,
	0x4c, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0xca, 0x01, 0x0a, 0x14, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0d,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x4d, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0x9e, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74,
	0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x1f, 0x54, 0x4c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x37, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x75,
	0x0a, 0x24, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x79, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x22, 0x8f, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x22, 0x90, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x1f, 0x54,
	0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x37,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x75, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x51, 0x0a,
	0x1b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x22, 0x23, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x2a, 0xb1, 0x04, 0x0a, 0x0d, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x12, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x10, 0xb1, 0xd8, 0x92, 0xbb, 0x01, 0x12, 0x27, 0x0a, 0x1a, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x10, 0x98, 0xe7, 0xb2, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x25, 0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x10, 0xcf, 0x97, 0xc6, 0x92, 0x05, 0x12, 0x26, 0x0a, 0x1e, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0xdc, 0xd4, 0x99, 0xad, 0x02, 0x12, 0x2f,
	0x0a, 0x22, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x10, 0xcd, 0xcb, 0x83, 0xbe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x34, 0x0a, 0x27, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xc4, 0xeb, 0xec, 0xc1, 0xf8,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2a, 0x0a, 0x22, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x10, 0xd5, 0xd8, 0x8e, 0xac,
	0x04, 0x12, 0x2f, 0x0a, 0x22, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0xcd, 0x88, 0xe4, 0xe9, 0xfc, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x2b, 0x0a, 0x23, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0xaa, 0xc3, 0x8d, 0xe5, 0x06, 0x12,
	0x2f, 0x0a, 0x22, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66,
	0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0xfc, 0x96, 0xaf, 0xa4, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x2f, 0x0a, 0x22, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0xf7, 0xb9, 0xef, 0xb4, 0xfa, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x26, 0x0a, 0x1e, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x10, 0xf5, 0xad, 0xdd, 0xdb, 0x04, 0x32, 0xac, 0x07, 0x0a, 0x09, 0x52, 0x50,
	0x43, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4e, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x1c, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x00, 0x12, 0x78, 0x0a, 0x21, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1c,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x13, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x1c,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x1d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e,
	0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x58, 0x0a, 0x1c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x27, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x1c,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x27, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x4c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2f,
	0x74, 0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x61, 0x70, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_status_tl_proto_rawDescOnce sync.Once
	file_status_tl_proto_rawDescData = file_status_tl_proto_rawDesc
)

func file_status_tl_proto_rawDescGZIP() []byte {
	file_status_tl_proto_rawDescOnce.Do(func() {
		file_status_tl_proto_rawDescData = protoimpl.X.CompressGZIP(file_status_tl_proto_rawDescData)
	})
	return file_status_tl_proto_rawDescData
}

var file_status_tl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_status_tl_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_status_tl_proto_goTypes = []interface{}{
	(TLConstructor)(0),                         // 0: status.TLConstructor
	(*SessionEntry)(nil),                       // 1: status.SessionEntry
	(*TLSessionEntry)(nil),                     // 2: status.TL_sessionEntry
	(*UserSessionEntryList)(nil),               // 3: status.UserSessionEntryList
	(*TLUserSessionEntryList)(nil),             // 4: status.TL_userSessionEntryList
	(*TLStatusSetSessionOnline)(nil),           // 5: status.TL_status_setSessionOnline
	(*TLStatusSetSessionOffline)(nil),          // 6: status.TL_status_setSessionOffline
	(*TLStatusGetUserOnlineSessions)(nil),      // 7: status.TL_status_getUserOnlineSessions
	(*TLStatusGetUsersOnlineSessionsList)(nil), // 8: status.TL_status_getUsersOnlineSessionsList
	(*TLStatusGetChannelOnlineUsers)(nil),      // 9: status.TL_status_getChannelOnlineUsers
	(*TLStatusSetUserChannelsOnline)(nil),      // 10: status.TL_status_setUserChannelsOnline
	(*TLStatusSetUserChannelsOffline)(nil),     // 11: status.TL_status_setUserChannelsOffline
	(*TLStatusSetChannelUserOffline)(nil),      // 12: status.TL_status_setChannelUserOffline
	(*TLStatusSetChannelUsersOnline)(nil),      // 13: status.TL_status_setChannelUsersOnline
	(*TLStatusSetChannelOffline)(nil),          // 14: status.TL_status_setChannelOffline
	(*Vector_UserSessionEntryList)(nil),        // 15: status.Vector_UserSessionEntryList
	(*Vector_Long)(nil),                        // 16: status.Vector_Long
	(*mtproto.Bool)(nil),                       // 17: mtproto.Bool
}
var file_status_tl_proto_depIdxs = []int32{
	0,  // 0: status.SessionEntry.constructor:type_name -> status.TLConstructor
	1,  // 1: status.TL_sessionEntry.data2:type_name -> status.SessionEntry
	0,  // 2: status.UserSessionEntryList.constructor:type_name -> status.TLConstructor
	1,  // 3: status.UserSessionEntryList.user_sessions:type_name -> status.SessionEntry
	3,  // 4: status.TL_userSessionEntryList.data2:type_name -> status.UserSessionEntryList
	0,  // 5: status.TL_status_setSessionOnline.constructor:type_name -> status.TLConstructor
	1,  // 6: status.TL_status_setSessionOnline.session:type_name -> status.SessionEntry
	0,  // 7: status.TL_status_setSessionOffline.constructor:type_name -> status.TLConstructor
	0,  // 8: status.TL_status_getUserOnlineSessions.constructor:type_name -> status.TLConstructor
	0,  // 9: status.TL_status_getUsersOnlineSessionsList.constructor:type_name -> status.TLConstructor
	0,  // 10: status.TL_status_getChannelOnlineUsers.constructor:type_name -> status.TLConstructor
	0,  // 11: status.TL_status_setUserChannelsOnline.constructor:type_name -> status.TLConstructor
	0,  // 12: status.TL_status_setUserChannelsOffline.constructor:type_name -> status.TLConstructor
	0,  // 13: status.TL_status_setChannelUserOffline.constructor:type_name -> status.TLConstructor
	0,  // 14: status.TL_status_setChannelUsersOnline.constructor:type_name -> status.TLConstructor
	0,  // 15: status.TL_status_setChannelOffline.constructor:type_name -> status.TLConstructor
	3,  // 16: status.Vector_UserSessionEntryList.datas:type_name -> status.UserSessionEntryList
	5,  // 17: status.RPCStatus.status_setSessionOnline:input_type -> status.TL_status_setSessionOnline
	6,  // 18: status.RPCStatus.status_setSessionOffline:input_type -> status.TL_status_setSessionOffline
	7,  // 19: status.RPCStatus.status_getUserOnlineSessions:input_type -> status.TL_status_getUserOnlineSessions
	8,  // 20: status.RPCStatus.status_getUsersOnlineSessionsList:input_type -> status.TL_status_getUsersOnlineSessionsList
	9,  // 21: status.RPCStatus.status_getChannelOnlineUsers:input_type -> status.TL_status_getChannelOnlineUsers
	10, // 22: status.RPCStatus.status_setUserChannelsOnline:input_type -> status.TL_status_setUserChannelsOnline
	11, // 23: status.RPCStatus.status_setUserChannelsOffline:input_type -> status.TL_status_setUserChannelsOffline
	12, // 24: status.RPCStatus.status_setChannelUserOffline:input_type -> status.TL_status_setChannelUserOffline
	13, // 25: status.RPCStatus.status_setChannelUsersOnline:input_type -> status.TL_status_setChannelUsersOnline
	14, // 26: status.RPCStatus.status_setChannelOffline:input_type -> status.TL_status_setChannelOffline
	17, // 27: status.RPCStatus.status_setSessionOnline:output_type -> mtproto.Bool
	17, // 28: status.RPCStatus.status_setSessionOffline:output_type -> mtproto.Bool
	3,  // 29: status.RPCStatus.status_getUserOnlineSessions:output_type -> status.UserSessionEntryList
	15, // 30: status.RPCStatus.status_getUsersOnlineSessionsList:output_type -> status.Vector_UserSessionEntryList
	16, // 31: status.RPCStatus.status_getChannelOnlineUsers:output_type -> status.Vector_Long
	17, // 32: status.RPCStatus.status_setUserChannelsOnline:output_type -> mtproto.Bool
	17, // 33: status.RPCStatus.status_setUserChannelsOffline:output_type -> mtproto.Bool
	17, // 34: status.RPCStatus.status_setChannelUserOffline:output_type -> mtproto.Bool
	17, // 35: status.RPCStatus.status_setChannelUsersOnline:output_type -> mtproto.Bool
	17, // 36: status.RPCStatus.status_setChannelOffline:output_type -> mtproto.Bool
	27, // [27:37] is the sub-list for method output_type
	17, // [17:27] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_status_tl_proto_init() }
func file_status_tl_proto_init() {
	if File_status_tl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_status_tl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_tl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSessionEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_tl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSessionEntryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_tl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUserSessionEntryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_tl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLStatusSetSessionOnline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_tl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLStatusSetSessionOffline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_tl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLStatusGetUserOnlineSessions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_tl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLStatusGetUsersOnlineSessionsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_tl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLStatusGetChannelOnlineUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_tl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLStatusSetUserChannelsOnline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_tl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLStatusSetUserChannelsOffline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_tl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLStatusSetChannelUserOffline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_tl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLStatusSetChannelUsersOnline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_tl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLStatusSetChannelOffline); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_tl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_UserSessionEntryList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_status_tl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_Long); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_status_tl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_status_tl_proto_goTypes,
		DependencyIndexes: file_status_tl_proto_depIdxs,
		EnumInfos:         file_status_tl_proto_enumTypes,
		MessageInfos:      file_status_tl_proto_msgTypes,
	}.Build()
	File_status_tl_proto = out.File
	file_status_tl_proto_rawDesc = nil
	file_status_tl_proto_goTypes = nil
	file_status_tl_proto_depIdxs = nil
}
