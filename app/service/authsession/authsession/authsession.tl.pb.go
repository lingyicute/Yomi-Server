//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: authsession.tl.proto

package authsession

import (
	mtproto "github.com/teamgram/proto/mtproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLConstructor int32

const (
	TLConstructor_CRC32_UNKNOWN                          TLConstructor = 0
	TLConstructor_CRC32_clientSession                    TLConstructor = -1701940816
	TLConstructor_CRC32_authKeyStateData                 TLConstructor = -532639977
	TLConstructor_CRC32_authsession_getAuthorizations    TLConstructor = 820122180
	TLConstructor_CRC32_authsession_resetAuthorization   TLConstructor = -1923126106
	TLConstructor_CRC32_authsession_getLayer             TLConstructor = -1473309015
	TLConstructor_CRC32_authsession_getLangPack          TLConstructor = 700170598
	TLConstructor_CRC32_authsession_getClient            TLConstructor = 1616401854
	TLConstructor_CRC32_authsession_getLangCode          TLConstructor = 1486468441
	TLConstructor_CRC32_authsession_getUserId            TLConstructor = 1464409260
	TLConstructor_CRC32_authsession_getPushSessionId     TLConstructor = -1279119039
	TLConstructor_CRC32_authsession_getFutureSalts       TLConstructor = -1194371051
	TLConstructor_CRC32_authsession_queryAuthKey         TLConstructor = 1421293608
	TLConstructor_CRC32_authsession_setAuthKey           TLConstructor = 1049889937
	TLConstructor_CRC32_authsession_bindAuthKeyUser      TLConstructor = 198050851
	TLConstructor_CRC32_authsession_unbindAuthKeyUser    TLConstructor = 123258440
	TLConstructor_CRC32_authsession_getPermAuthKeyId     TLConstructor = -1871420202
	TLConstructor_CRC32_authsession_bindTempAuthKey      TLConstructor = 1620004742
	TLConstructor_CRC32_authsession_setClientSessionInfo TLConstructor = 47841172
	TLConstructor_CRC32_authsession_getAuthorization     TLConstructor = 1851660579
	TLConstructor_CRC32_authsession_getAuthStateData     TLConstructor = 1331573041
	TLConstructor_CRC32_authsession_setLayer             TLConstructor = 1147475077
	TLConstructor_CRC32_authsession_setInitConnection    TLConstructor = 2095024780
)

// Enum value maps for TLConstructor.
var (
	TLConstructor_name = map[int32]string{
		0:           "CRC32_UNKNOWN",
		-1701940816: "CRC32_clientSession",
		-532639977:  "CRC32_authKeyStateData",
		820122180:   "CRC32_authsession_getAuthorizations",
		-1923126106: "CRC32_authsession_resetAuthorization",
		-1473309015: "CRC32_authsession_getLayer",
		700170598:   "CRC32_authsession_getLangPack",
		1616401854:  "CRC32_authsession_getClient",
		1486468441:  "CRC32_authsession_getLangCode",
		1464409260:  "CRC32_authsession_getUserId",
		-1279119039: "CRC32_authsession_getPushSessionId",
		-1194371051: "CRC32_authsession_getFutureSalts",
		1421293608:  "CRC32_authsession_queryAuthKey",
		1049889937:  "CRC32_authsession_setAuthKey",
		198050851:   "CRC32_authsession_bindAuthKeyUser",
		123258440:   "CRC32_authsession_unbindAuthKeyUser",
		-1871420202: "CRC32_authsession_getPermAuthKeyId",
		1620004742:  "CRC32_authsession_bindTempAuthKey",
		47841172:    "CRC32_authsession_setClientSessionInfo",
		1851660579:  "CRC32_authsession_getAuthorization",
		1331573041:  "CRC32_authsession_getAuthStateData",
		1147475077:  "CRC32_authsession_setLayer",
		2095024780:  "CRC32_authsession_setInitConnection",
	}
	TLConstructor_value = map[string]int32{
		"CRC32_UNKNOWN":                          0,
		"CRC32_clientSession":                    -1701940816,
		"CRC32_authKeyStateData":                 -532639977,
		"CRC32_authsession_getAuthorizations":    820122180,
		"CRC32_authsession_resetAuthorization":   -1923126106,
		"CRC32_authsession_getLayer":             -1473309015,
		"CRC32_authsession_getLangPack":          700170598,
		"CRC32_authsession_getClient":            1616401854,
		"CRC32_authsession_getLangCode":          1486468441,
		"CRC32_authsession_getUserId":            1464409260,
		"CRC32_authsession_getPushSessionId":     -1279119039,
		"CRC32_authsession_getFutureSalts":       -1194371051,
		"CRC32_authsession_queryAuthKey":         1421293608,
		"CRC32_authsession_setAuthKey":           1049889937,
		"CRC32_authsession_bindAuthKeyUser":      198050851,
		"CRC32_authsession_unbindAuthKeyUser":    123258440,
		"CRC32_authsession_getPermAuthKeyId":     -1871420202,
		"CRC32_authsession_bindTempAuthKey":      1620004742,
		"CRC32_authsession_setClientSessionInfo": 47841172,
		"CRC32_authsession_getAuthorization":     1851660579,
		"CRC32_authsession_getAuthStateData":     1331573041,
		"CRC32_authsession_setLayer":             1147475077,
		"CRC32_authsession_setInitConnection":    2095024780,
	}
)

func (x TLConstructor) Enum() *TLConstructor {
	p := new(TLConstructor)
	*p = x
	return p
}

func (x TLConstructor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLConstructor) Descriptor() protoreflect.EnumDescriptor {
	return file_authsession_tl_proto_enumTypes[0].Descriptor()
}

func (TLConstructor) Type() protoreflect.EnumType {
	return &file_authsession_tl_proto_enumTypes[0]
}

func (x TLConstructor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLConstructor.Descriptor instead.
func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{0}
}

// AuthKeyStateData <--
//   - TL_authKeyStateData
type AuthKeyStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName        string                 `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor          TLConstructor          `protobuf:"varint,2,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId            int64                  `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	KeyState             int32                  `protobuf:"varint,4,opt,name=key_state,json=keyState,proto3" json:"key_state,omitempty"`
	UserId               int64                  `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AccessHash           int64                  `protobuf:"varint,6,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
	Client               *ClientSession         `protobuf:"bytes,7,opt,name=client,proto3" json:"client,omitempty"`
	AndroidPushSessionId *wrapperspb.Int64Value `protobuf:"bytes,8,opt,name=android_push_session_id,json=androidPushSessionId,proto3" json:"android_push_session_id,omitempty"`
}

func (x *AuthKeyStateData) Reset() {
	*x = AuthKeyStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthKeyStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthKeyStateData) ProtoMessage() {}

func (x *AuthKeyStateData) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthKeyStateData.ProtoReflect.Descriptor instead.
func (*AuthKeyStateData) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{0}
}

func (x *AuthKeyStateData) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *AuthKeyStateData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *AuthKeyStateData) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *AuthKeyStateData) GetKeyState() int32 {
	if x != nil {
		return x.KeyState
	}
	return 0
}

func (x *AuthKeyStateData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *AuthKeyStateData) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

func (x *AuthKeyStateData) GetClient() *ClientSession {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *AuthKeyStateData) GetAndroidPushSessionId() *wrapperspb.Int64Value {
	if x != nil {
		return x.AndroidPushSessionId
	}
	return nil
}

type TLAuthKeyStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *AuthKeyStateData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLAuthKeyStateData) Reset() {
	*x = TLAuthKeyStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthKeyStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthKeyStateData) ProtoMessage() {}

func (x *TLAuthKeyStateData) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthKeyStateData.ProtoReflect.Descriptor instead.
func (*TLAuthKeyStateData) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{1}
}

func (x *TLAuthKeyStateData) GetData2() *AuthKeyStateData {
	if x != nil {
		return x.Data2
	}
	return nil
}

// ClientSession <--
//   - TL_clientSession
type ClientSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName  string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor    TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId      int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	Ip             string        `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Layer          int32         `protobuf:"varint,5,opt,name=layer,proto3" json:"layer,omitempty"`
	ApiId          int32         `protobuf:"varint,6,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	DeviceModel    string        `protobuf:"bytes,7,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	SystemVersion  string        `protobuf:"bytes,8,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	AppVersion     string        `protobuf:"bytes,9,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	SystemLangCode string        `protobuf:"bytes,10,opt,name=system_lang_code,json=systemLangCode,proto3" json:"system_lang_code,omitempty"`
	LangPack       string        `protobuf:"bytes,11,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	LangCode       string        `protobuf:"bytes,12,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Proxy          string        `protobuf:"bytes,13,opt,name=proxy,proto3" json:"proxy,omitempty"`
	Params         string        `protobuf:"bytes,14,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *ClientSession) Reset() {
	*x = ClientSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientSession) ProtoMessage() {}

func (x *ClientSession) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientSession.ProtoReflect.Descriptor instead.
func (*ClientSession) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{2}
}

func (x *ClientSession) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *ClientSession) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *ClientSession) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *ClientSession) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *ClientSession) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *ClientSession) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *ClientSession) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *ClientSession) GetSystemVersion() string {
	if x != nil {
		return x.SystemVersion
	}
	return ""
}

func (x *ClientSession) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *ClientSession) GetSystemLangCode() string {
	if x != nil {
		return x.SystemLangCode
	}
	return ""
}

func (x *ClientSession) GetLangPack() string {
	if x != nil {
		return x.LangPack
	}
	return ""
}

func (x *ClientSession) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *ClientSession) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *ClientSession) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

type TLClientSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *ClientSession `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLClientSession) Reset() {
	*x = TLClientSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLClientSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLClientSession) ProtoMessage() {}

func (x *TLClientSession) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLClientSession.ProtoReflect.Descriptor instead.
func (*TLClientSession) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{3}
}

func (x *TLClientSession) GetData2() *ClientSession {
	if x != nil {
		return x.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionGetAuthorizations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor      TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	UserId           int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExcludeAuthKeyId int64         `protobuf:"varint,4,opt,name=exclude_auth_keyId,json=excludeAuthKeyId,proto3" json:"exclude_auth_keyId,omitempty"`
}

func (x *TLAuthsessionGetAuthorizations) Reset() {
	*x = TLAuthsessionGetAuthorizations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionGetAuthorizations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionGetAuthorizations) ProtoMessage() {}

func (x *TLAuthsessionGetAuthorizations) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionGetAuthorizations.ProtoReflect.Descriptor instead.
func (*TLAuthsessionGetAuthorizations) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{4}
}

func (x *TLAuthsessionGetAuthorizations) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionGetAuthorizations) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLAuthsessionGetAuthorizations) GetExcludeAuthKeyId() int64 {
	if x != nil {
		return x.ExcludeAuthKeyId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionResetAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	Hash        int64         `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *TLAuthsessionResetAuthorization) Reset() {
	*x = TLAuthsessionResetAuthorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionResetAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionResetAuthorization) ProtoMessage() {}

func (x *TLAuthsessionResetAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionResetAuthorization.ProtoReflect.Descriptor instead.
func (*TLAuthsessionResetAuthorization) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{5}
}

func (x *TLAuthsessionResetAuthorization) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionResetAuthorization) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLAuthsessionResetAuthorization) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLAuthsessionResetAuthorization) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionGetLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (x *TLAuthsessionGetLayer) Reset() {
	*x = TLAuthsessionGetLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionGetLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionGetLayer) ProtoMessage() {}

func (x *TLAuthsessionGetLayer) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionGetLayer.ProtoReflect.Descriptor instead.
func (*TLAuthsessionGetLayer) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{6}
}

func (x *TLAuthsessionGetLayer) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionGetLayer) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionGetLangPack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (x *TLAuthsessionGetLangPack) Reset() {
	*x = TLAuthsessionGetLangPack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionGetLangPack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionGetLangPack) ProtoMessage() {}

func (x *TLAuthsessionGetLangPack) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionGetLangPack.ProtoReflect.Descriptor instead.
func (*TLAuthsessionGetLangPack) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{7}
}

func (x *TLAuthsessionGetLangPack) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionGetLangPack) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionGetClient struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (x *TLAuthsessionGetClient) Reset() {
	*x = TLAuthsessionGetClient{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionGetClient) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionGetClient) ProtoMessage() {}

func (x *TLAuthsessionGetClient) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionGetClient.ProtoReflect.Descriptor instead.
func (*TLAuthsessionGetClient) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{8}
}

func (x *TLAuthsessionGetClient) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionGetClient) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionGetLangCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (x *TLAuthsessionGetLangCode) Reset() {
	*x = TLAuthsessionGetLangCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionGetLangCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionGetLangCode) ProtoMessage() {}

func (x *TLAuthsessionGetLangCode) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionGetLangCode.ProtoReflect.Descriptor instead.
func (*TLAuthsessionGetLangCode) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{9}
}

func (x *TLAuthsessionGetLangCode) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionGetLangCode) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionGetUserId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (x *TLAuthsessionGetUserId) Reset() {
	*x = TLAuthsessionGetUserId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionGetUserId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionGetUserId) ProtoMessage() {}

func (x *TLAuthsessionGetUserId) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionGetUserId.ProtoReflect.Descriptor instead.
func (*TLAuthsessionGetUserId) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{10}
}

func (x *TLAuthsessionGetUserId) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionGetUserId) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionGetPushSessionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	TokenType   int32         `protobuf:"varint,5,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`
}

func (x *TLAuthsessionGetPushSessionId) Reset() {
	*x = TLAuthsessionGetPushSessionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionGetPushSessionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionGetPushSessionId) ProtoMessage() {}

func (x *TLAuthsessionGetPushSessionId) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionGetPushSessionId.ProtoReflect.Descriptor instead.
func (*TLAuthsessionGetPushSessionId) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{11}
}

func (x *TLAuthsessionGetPushSessionId) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionGetPushSessionId) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLAuthsessionGetPushSessionId) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLAuthsessionGetPushSessionId) GetTokenType() int32 {
	if x != nil {
		return x.TokenType
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionGetFutureSalts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	Num         int32         `protobuf:"varint,4,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *TLAuthsessionGetFutureSalts) Reset() {
	*x = TLAuthsessionGetFutureSalts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionGetFutureSalts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionGetFutureSalts) ProtoMessage() {}

func (x *TLAuthsessionGetFutureSalts) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionGetFutureSalts.ProtoReflect.Descriptor instead.
func (*TLAuthsessionGetFutureSalts) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{12}
}

func (x *TLAuthsessionGetFutureSalts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionGetFutureSalts) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLAuthsessionGetFutureSalts) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionQueryAuthKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (x *TLAuthsessionQueryAuthKey) Reset() {
	*x = TLAuthsessionQueryAuthKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionQueryAuthKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionQueryAuthKey) ProtoMessage() {}

func (x *TLAuthsessionQueryAuthKey) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionQueryAuthKey.ProtoReflect.Descriptor instead.
func (*TLAuthsessionQueryAuthKey) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{13}
}

func (x *TLAuthsessionQueryAuthKey) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionQueryAuthKey) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionSetAuthKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor        `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKey     *mtproto.AuthKeyInfo `protobuf:"bytes,3,opt,name=auth_key,json=authKey,proto3" json:"auth_key,omitempty"`
	FutureSalt  *mtproto.FutureSalt  `protobuf:"bytes,4,opt,name=future_salt,json=futureSalt,proto3" json:"future_salt,omitempty"`
	ExpiresIn   int32                `protobuf:"varint,5,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`
}

func (x *TLAuthsessionSetAuthKey) Reset() {
	*x = TLAuthsessionSetAuthKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionSetAuthKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionSetAuthKey) ProtoMessage() {}

func (x *TLAuthsessionSetAuthKey) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionSetAuthKey.ProtoReflect.Descriptor instead.
func (*TLAuthsessionSetAuthKey) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{14}
}

func (x *TLAuthsessionSetAuthKey) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionSetAuthKey) GetAuthKey() *mtproto.AuthKeyInfo {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *TLAuthsessionSetAuthKey) GetFutureSalt() *mtproto.FutureSalt {
	if x != nil {
		return x.FutureSalt
	}
	return nil
}

func (x *TLAuthsessionSetAuthKey) GetExpiresIn() int32 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionBindAuthKeyUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	UserId      int64         `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLAuthsessionBindAuthKeyUser) Reset() {
	*x = TLAuthsessionBindAuthKeyUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionBindAuthKeyUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionBindAuthKeyUser) ProtoMessage() {}

func (x *TLAuthsessionBindAuthKeyUser) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionBindAuthKeyUser.ProtoReflect.Descriptor instead.
func (*TLAuthsessionBindAuthKeyUser) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{15}
}

func (x *TLAuthsessionBindAuthKeyUser) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionBindAuthKeyUser) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLAuthsessionBindAuthKeyUser) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionUnbindAuthKeyUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	UserId      int64         `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLAuthsessionUnbindAuthKeyUser) Reset() {
	*x = TLAuthsessionUnbindAuthKeyUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionUnbindAuthKeyUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionUnbindAuthKeyUser) ProtoMessage() {}

func (x *TLAuthsessionUnbindAuthKeyUser) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionUnbindAuthKeyUser.ProtoReflect.Descriptor instead.
func (*TLAuthsessionUnbindAuthKeyUser) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{16}
}

func (x *TLAuthsessionUnbindAuthKeyUser) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionUnbindAuthKeyUser) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLAuthsessionUnbindAuthKeyUser) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionGetPermAuthKeyId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (x *TLAuthsessionGetPermAuthKeyId) Reset() {
	*x = TLAuthsessionGetPermAuthKeyId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionGetPermAuthKeyId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionGetPermAuthKeyId) ProtoMessage() {}

func (x *TLAuthsessionGetPermAuthKeyId) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionGetPermAuthKeyId.ProtoReflect.Descriptor instead.
func (*TLAuthsessionGetPermAuthKeyId) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{17}
}

func (x *TLAuthsessionGetPermAuthKeyId) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionGetPermAuthKeyId) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionBindTempAuthKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor      TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	PermAuthKeyId    int64         `protobuf:"varint,3,opt,name=perm_auth_key_id,json=permAuthKeyId,proto3" json:"perm_auth_key_id,omitempty"`
	Nonce            int64         `protobuf:"varint,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ExpiresAt        int32         `protobuf:"varint,5,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	EncryptedMessage []byte        `protobuf:"bytes,6,opt,name=encrypted_message,json=encryptedMessage,proto3" json:"encrypted_message,omitempty"`
}

func (x *TLAuthsessionBindTempAuthKey) Reset() {
	*x = TLAuthsessionBindTempAuthKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionBindTempAuthKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionBindTempAuthKey) ProtoMessage() {}

func (x *TLAuthsessionBindTempAuthKey) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionBindTempAuthKey.ProtoReflect.Descriptor instead.
func (*TLAuthsessionBindTempAuthKey) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{18}
}

func (x *TLAuthsessionBindTempAuthKey) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionBindTempAuthKey) GetPermAuthKeyId() int64 {
	if x != nil {
		return x.PermAuthKeyId
	}
	return 0
}

func (x *TLAuthsessionBindTempAuthKey) GetNonce() int64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *TLAuthsessionBindTempAuthKey) GetExpiresAt() int32 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *TLAuthsessionBindTempAuthKey) GetEncryptedMessage() []byte {
	if x != nil {
		return x.EncryptedMessage
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionSetClientSessionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor  `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	Data        *ClientSession `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *TLAuthsessionSetClientSessionInfo) Reset() {
	*x = TLAuthsessionSetClientSessionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionSetClientSessionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionSetClientSessionInfo) ProtoMessage() {}

func (x *TLAuthsessionSetClientSessionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionSetClientSessionInfo.ProtoReflect.Descriptor instead.
func (*TLAuthsessionSetClientSessionInfo) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{19}
}

func (x *TLAuthsessionSetClientSessionInfo) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionSetClientSessionInfo) GetData() *ClientSession {
	if x != nil {
		return x.Data
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionGetAuthorization struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (x *TLAuthsessionGetAuthorization) Reset() {
	*x = TLAuthsessionGetAuthorization{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionGetAuthorization) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionGetAuthorization) ProtoMessage() {}

func (x *TLAuthsessionGetAuthorization) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionGetAuthorization.ProtoReflect.Descriptor instead.
func (*TLAuthsessionGetAuthorization) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{20}
}

func (x *TLAuthsessionGetAuthorization) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionGetAuthorization) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionGetAuthStateData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (x *TLAuthsessionGetAuthStateData) Reset() {
	*x = TLAuthsessionGetAuthStateData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionGetAuthStateData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionGetAuthStateData) ProtoMessage() {}

func (x *TLAuthsessionGetAuthStateData) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionGetAuthStateData.ProtoReflect.Descriptor instead.
func (*TLAuthsessionGetAuthStateData) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{21}
}

func (x *TLAuthsessionGetAuthStateData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionGetAuthStateData) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionSetLayer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	Ip          string        `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Layer       int32         `protobuf:"varint,5,opt,name=layer,proto3" json:"layer,omitempty"`
}

func (x *TLAuthsessionSetLayer) Reset() {
	*x = TLAuthsessionSetLayer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionSetLayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionSetLayer) ProtoMessage() {}

func (x *TLAuthsessionSetLayer) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionSetLayer.ProtoReflect.Descriptor instead.
func (*TLAuthsessionSetLayer) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{22}
}

func (x *TLAuthsessionSetLayer) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionSetLayer) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLAuthsessionSetLayer) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *TLAuthsessionSetLayer) GetLayer() int32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLAuthsessionSetInitConnection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor    TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=authsession.TLConstructor" json:"constructor,omitempty"`
	AuthKeyId      int64         `protobuf:"varint,3,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	Ip             string        `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	ApiId          int32         `protobuf:"varint,5,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	DeviceModel    string        `protobuf:"bytes,6,opt,name=device_model,json=deviceModel,proto3" json:"device_model,omitempty"`
	SystemVersion  string        `protobuf:"bytes,7,opt,name=system_version,json=systemVersion,proto3" json:"system_version,omitempty"`
	AppVersion     string        `protobuf:"bytes,8,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	SystemLangCode string        `protobuf:"bytes,9,opt,name=system_lang_code,json=systemLangCode,proto3" json:"system_lang_code,omitempty"`
	LangPack       string        `protobuf:"bytes,10,opt,name=lang_pack,json=langPack,proto3" json:"lang_pack,omitempty"`
	LangCode       string        `protobuf:"bytes,11,opt,name=lang_code,json=langCode,proto3" json:"lang_code,omitempty"`
	Proxy          string        `protobuf:"bytes,12,opt,name=proxy,proto3" json:"proxy,omitempty"`
	Params         string        `protobuf:"bytes,13,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *TLAuthsessionSetInitConnection) Reset() {
	*x = TLAuthsessionSetInitConnection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLAuthsessionSetInitConnection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLAuthsessionSetInitConnection) ProtoMessage() {}

func (x *TLAuthsessionSetInitConnection) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLAuthsessionSetInitConnection.ProtoReflect.Descriptor instead.
func (*TLAuthsessionSetInitConnection) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{23}
}

func (x *TLAuthsessionSetInitConnection) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLAuthsessionSetInitConnection) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLAuthsessionSetInitConnection) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *TLAuthsessionSetInitConnection) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *TLAuthsessionSetInitConnection) GetDeviceModel() string {
	if x != nil {
		return x.DeviceModel
	}
	return ""
}

func (x *TLAuthsessionSetInitConnection) GetSystemVersion() string {
	if x != nil {
		return x.SystemVersion
	}
	return ""
}

func (x *TLAuthsessionSetInitConnection) GetAppVersion() string {
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *TLAuthsessionSetInitConnection) GetSystemLangCode() string {
	if x != nil {
		return x.SystemLangCode
	}
	return ""
}

func (x *TLAuthsessionSetInitConnection) GetLangPack() string {
	if x != nil {
		return x.LangPack
	}
	return ""
}

func (x *TLAuthsessionSetInitConnection) GetLangCode() string {
	if x != nil {
		return x.LangCode
	}
	return ""
}

func (x *TLAuthsessionSetInitConnection) GetProxy() string {
	if x != nil {
		return x.Proxy
	}
	return ""
}

func (x *TLAuthsessionSetInitConnection) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

// --------------------------------------------------------------------------------------------
// Vector api result type
type Vector_Long struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []int64 `protobuf:"varint,1,rep,packed,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_Long) Reset() {
	*x = Vector_Long{}
	if protoimpl.UnsafeEnabled {
		mi := &file_authsession_tl_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_Long) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_Long) ProtoMessage() {}

func (x *Vector_Long) ProtoReflect() protoreflect.Message {
	mi := &file_authsession_tl_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_Long.ProtoReflect.Descriptor instead.
func (*Vector_Long) Descriptor() ([]byte, []int) {
	return file_authsession_tl_proto_rawDescGZIP(), []int{24}
}

func (x *Vector_Long) GetDatas() []int64 {
	if x != nil {
		return x.Datas
	}
	return nil
}

var File_authsession_tl_proto protoreflect.FileDescriptor

var file_authsession_tl_proto_rawDesc = []byte{
	0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf6, 0x02, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6b,
	0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x17, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64,
	0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x14, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x75, 0x73, 0x68,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x13, 0x54, 0x4c, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x33, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0xce, 0x03, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c,
	0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x44, 0x0a, 0x10, 0x54, 0x4c, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0xa7, 0x01, 0x0a,
	0x20, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x77, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x79,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x22, 0x7a, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x3c,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x78, 0x0a, 0x18,
	0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x22, 0x78, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a,
	0x1f, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x7b, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x2f, 0x0a, 0x08, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b,
	0x65, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x74, 0x52, 0x0a, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x22, 0x97, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x99, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x4b,
	0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7f, 0x0a,
	0x1f, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e,
	0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xe9,
	0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65,
	0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x27, 0x0a, 0x10, 0x70, 0x65, 0x72, 0x6d, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x6d, 0x41,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x23, 0x54,
	0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x2e, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x7f, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x22, 0x7f, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3c,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x22, 0xa4, 0x03, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x78, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x23, 0x0a, 0x0b, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x2a, 0xc2,
	0x07, 0x0a, 0x0d, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x13, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0xb0, 0xe3, 0xb9, 0xd4, 0xf9,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x10,
	0x97, 0x9e, 0x82, 0x82, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2b, 0x0a, 0x23, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x10, 0xc4, 0xa4, 0x88, 0x87, 0x03, 0x12, 0x31, 0x0a, 0x24, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0xa6, 0xd9, 0xfd, 0xea, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x65, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x10, 0xa9, 0xad, 0xbc, 0xc1, 0xfa, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x50, 0x61, 0x63, 0x6b, 0x10, 0xe6, 0x82, 0xef, 0xcd, 0x02, 0x12, 0x23, 0x0a, 0x1b, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x10, 0xbe, 0xab, 0xe1, 0x82, 0x06, 0x12,
	0x25, 0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65,
	0x10, 0xd9, 0xea, 0xe6, 0xc4, 0x05, 0x12, 0x23, 0x0a, 0x1b, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x10, 0xac, 0xb9, 0xa4, 0xba, 0x05, 0x12, 0x2f, 0x0a, 0x22, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x10, 0xc1, 0xe2, 0x88, 0x9e, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2d, 0x0a, 0x20,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x74, 0x73,
	0x10, 0x95, 0xb0, 0xbd, 0xc6, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x1e, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x10, 0xa8, 0xf0,
	0xdc, 0xa5, 0x05, 0x12, 0x24, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x4b, 0x65, 0x79, 0x10, 0x91, 0x99, 0xd0, 0xf4, 0x03, 0x12, 0x28, 0x0a, 0x21, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62,
	0x69, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x10, 0xa3,
	0x88, 0xb8, 0x5e, 0x12, 0x2a, 0x0a, 0x23, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x62, 0x69, 0x6e, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x10, 0xc8, 0x8c, 0xe3, 0x3a, 0x12,
	0x2f, 0x0a, 0x22, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x10, 0xd6, 0xc9, 0xd1, 0x83, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x29, 0x0a, 0x21, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x41, 0x75,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x10, 0x86, 0x9f, 0xbd, 0x84, 0x06, 0x12, 0x2d, 0x0a, 0x26, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x94, 0xff, 0xe7, 0x16, 0x12, 0x2a, 0x0a, 0x22, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0xa3, 0xb2, 0xf8, 0xf2, 0x06, 0x12, 0x2a, 0x0a, 0x22, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x10, 0xb1, 0xe2, 0xf8,
	0xfa, 0x04, 0x12, 0x22, 0x0a, 0x1a, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72,
	0x10, 0x85, 0xa9, 0x94, 0xa3, 0x04, 0x12, 0x2b, 0x0a, 0x23, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x49,
	0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x8c, 0x95,
	0xfe, 0xe6, 0x07, 0x32, 0xf1, 0x0e, 0x0a, 0x0e, 0x52, 0x50, 0x43, 0x41, 0x75, 0x74, 0x68, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x1d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x1e, 0x61, 0x75, 0x74,
	0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x18, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x24, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61,
	0x63, 0x6b, 0x12, 0x27, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x50, 0x61, 0x63, 0x6b, 0x1a, 0x0f, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x15, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65,
	0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x1a, 0x0f,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22,
	0x00, 0x12, 0x55, 0x0a, 0x17, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x6e,
	0x67, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x0f, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x68,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x25, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1c, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x75, 0x73,
	0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x75, 0x73, 0x68, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1a, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x74, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x53,
	0x61, 0x6c, 0x74, 0x73, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x75, 0x74, 0x75, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x74, 0x73, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x18,
	0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x41, 0x75, 0x74, 0x68, 0x4b,
	0x65, 0x79, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x16, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x1b, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e,
	0x64, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x41, 0x75,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x1d, 0x61,
	0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x62, 0x69, 0x6e,
	0x64, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x6e, 0x62, 0x69, 0x6e, 0x64,
	0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1c,
	0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2c, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72,
	0x6d, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1b,
	0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x64,
	0x54, 0x65, 0x6d, 0x70, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x2b, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x54, 0x65, 0x6d,
	0x70, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x20, 0x61, 0x75, 0x74,
	0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x61,
	0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x66, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54,
	0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x1c, 0x61, 0x75, 0x74, 0x68,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x14, 0x61, 0x75, 0x74, 0x68, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x12,
	0x24, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c,
	0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74,
	0x4c, 0x61, 0x79, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x1d, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x4c, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2f, 0x74,
	0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_authsession_tl_proto_rawDescOnce sync.Once
	file_authsession_tl_proto_rawDescData = file_authsession_tl_proto_rawDesc
)

func file_authsession_tl_proto_rawDescGZIP() []byte {
	file_authsession_tl_proto_rawDescOnce.Do(func() {
		file_authsession_tl_proto_rawDescData = protoimpl.X.CompressGZIP(file_authsession_tl_proto_rawDescData)
	})
	return file_authsession_tl_proto_rawDescData
}

var file_authsession_tl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_authsession_tl_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_authsession_tl_proto_goTypes = []interface{}{
	(TLConstructor)(0),                        // 0: authsession.TLConstructor
	(*AuthKeyStateData)(nil),                  // 1: authsession.AuthKeyStateData
	(*TLAuthKeyStateData)(nil),                // 2: authsession.TL_authKeyStateData
	(*ClientSession)(nil),                     // 3: authsession.ClientSession
	(*TLClientSession)(nil),                   // 4: authsession.TL_clientSession
	(*TLAuthsessionGetAuthorizations)(nil),    // 5: authsession.TL_authsession_getAuthorizations
	(*TLAuthsessionResetAuthorization)(nil),   // 6: authsession.TL_authsession_resetAuthorization
	(*TLAuthsessionGetLayer)(nil),             // 7: authsession.TL_authsession_getLayer
	(*TLAuthsessionGetLangPack)(nil),          // 8: authsession.TL_authsession_getLangPack
	(*TLAuthsessionGetClient)(nil),            // 9: authsession.TL_authsession_getClient
	(*TLAuthsessionGetLangCode)(nil),          // 10: authsession.TL_authsession_getLangCode
	(*TLAuthsessionGetUserId)(nil),            // 11: authsession.TL_authsession_getUserId
	(*TLAuthsessionGetPushSessionId)(nil),     // 12: authsession.TL_authsession_getPushSessionId
	(*TLAuthsessionGetFutureSalts)(nil),       // 13: authsession.TL_authsession_getFutureSalts
	(*TLAuthsessionQueryAuthKey)(nil),         // 14: authsession.TL_authsession_queryAuthKey
	(*TLAuthsessionSetAuthKey)(nil),           // 15: authsession.TL_authsession_setAuthKey
	(*TLAuthsessionBindAuthKeyUser)(nil),      // 16: authsession.TL_authsession_bindAuthKeyUser
	(*TLAuthsessionUnbindAuthKeyUser)(nil),    // 17: authsession.TL_authsession_unbindAuthKeyUser
	(*TLAuthsessionGetPermAuthKeyId)(nil),     // 18: authsession.TL_authsession_getPermAuthKeyId
	(*TLAuthsessionBindTempAuthKey)(nil),      // 19: authsession.TL_authsession_bindTempAuthKey
	(*TLAuthsessionSetClientSessionInfo)(nil), // 20: authsession.TL_authsession_setClientSessionInfo
	(*TLAuthsessionGetAuthorization)(nil),     // 21: authsession.TL_authsession_getAuthorization
	(*TLAuthsessionGetAuthStateData)(nil),     // 22: authsession.TL_authsession_getAuthStateData
	(*TLAuthsessionSetLayer)(nil),             // 23: authsession.TL_authsession_setLayer
	(*TLAuthsessionSetInitConnection)(nil),    // 24: authsession.TL_authsession_setInitConnection
	(*Vector_Long)(nil),                       // 25: authsession.Vector_Long
	(*wrapperspb.Int64Value)(nil),             // 26: google.protobuf.Int64Value
	(*mtproto.AuthKeyInfo)(nil),               // 27: mtproto.AuthKeyInfo
	(*mtproto.FutureSalt)(nil),                // 28: mtproto.FutureSalt
	(*mtproto.Account_Authorizations)(nil),    // 29: mtproto.account_Authorizations
	(*mtproto.Int32)(nil),                     // 30: mtproto.Int32
	(*mtproto.String)(nil),                    // 31: mtproto.String
	(*mtproto.Int64)(nil),                     // 32: mtproto.Int64
	(*mtproto.FutureSalts)(nil),               // 33: mtproto.FutureSalts
	(*mtproto.Bool)(nil),                      // 34: mtproto.Bool
	(*mtproto.Authorization)(nil),             // 35: mtproto.Authorization
}
var file_authsession_tl_proto_depIdxs = []int32{
	0,  // 0: authsession.AuthKeyStateData.constructor:type_name -> authsession.TLConstructor
	3,  // 1: authsession.AuthKeyStateData.client:type_name -> authsession.ClientSession
	26, // 2: authsession.AuthKeyStateData.android_push_session_id:type_name -> google.protobuf.Int64Value
	1,  // 3: authsession.TL_authKeyStateData.data2:type_name -> authsession.AuthKeyStateData
	0,  // 4: authsession.ClientSession.constructor:type_name -> authsession.TLConstructor
	3,  // 5: authsession.TL_clientSession.data2:type_name -> authsession.ClientSession
	0,  // 6: authsession.TL_authsession_getAuthorizations.constructor:type_name -> authsession.TLConstructor
	0,  // 7: authsession.TL_authsession_resetAuthorization.constructor:type_name -> authsession.TLConstructor
	0,  // 8: authsession.TL_authsession_getLayer.constructor:type_name -> authsession.TLConstructor
	0,  // 9: authsession.TL_authsession_getLangPack.constructor:type_name -> authsession.TLConstructor
	0,  // 10: authsession.TL_authsession_getClient.constructor:type_name -> authsession.TLConstructor
	0,  // 11: authsession.TL_authsession_getLangCode.constructor:type_name -> authsession.TLConstructor
	0,  // 12: authsession.TL_authsession_getUserId.constructor:type_name -> authsession.TLConstructor
	0,  // 13: authsession.TL_authsession_getPushSessionId.constructor:type_name -> authsession.TLConstructor
	0,  // 14: authsession.TL_authsession_getFutureSalts.constructor:type_name -> authsession.TLConstructor
	0,  // 15: authsession.TL_authsession_queryAuthKey.constructor:type_name -> authsession.TLConstructor
	0,  // 16: authsession.TL_authsession_setAuthKey.constructor:type_name -> authsession.TLConstructor
	27, // 17: authsession.TL_authsession_setAuthKey.auth_key:type_name -> mtproto.AuthKeyInfo
	28, // 18: authsession.TL_authsession_setAuthKey.future_salt:type_name -> mtproto.FutureSalt
	0,  // 19: authsession.TL_authsession_bindAuthKeyUser.constructor:type_name -> authsession.TLConstructor
	0,  // 20: authsession.TL_authsession_unbindAuthKeyUser.constructor:type_name -> authsession.TLConstructor
	0,  // 21: authsession.TL_authsession_getPermAuthKeyId.constructor:type_name -> authsession.TLConstructor
	0,  // 22: authsession.TL_authsession_bindTempAuthKey.constructor:type_name -> authsession.TLConstructor
	0,  // 23: authsession.TL_authsession_setClientSessionInfo.constructor:type_name -> authsession.TLConstructor
	3,  // 24: authsession.TL_authsession_setClientSessionInfo.data:type_name -> authsession.ClientSession
	0,  // 25: authsession.TL_authsession_getAuthorization.constructor:type_name -> authsession.TLConstructor
	0,  // 26: authsession.TL_authsession_getAuthStateData.constructor:type_name -> authsession.TLConstructor
	0,  // 27: authsession.TL_authsession_setLayer.constructor:type_name -> authsession.TLConstructor
	0,  // 28: authsession.TL_authsession_setInitConnection.constructor:type_name -> authsession.TLConstructor
	5,  // 29: authsession.RPCAuthsession.authsession_getAuthorizations:input_type -> authsession.TL_authsession_getAuthorizations
	6,  // 30: authsession.RPCAuthsession.authsession_resetAuthorization:input_type -> authsession.TL_authsession_resetAuthorization
	7,  // 31: authsession.RPCAuthsession.authsession_getLayer:input_type -> authsession.TL_authsession_getLayer
	8,  // 32: authsession.RPCAuthsession.authsession_getLangPack:input_type -> authsession.TL_authsession_getLangPack
	9,  // 33: authsession.RPCAuthsession.authsession_getClient:input_type -> authsession.TL_authsession_getClient
	10, // 34: authsession.RPCAuthsession.authsession_getLangCode:input_type -> authsession.TL_authsession_getLangCode
	11, // 35: authsession.RPCAuthsession.authsession_getUserId:input_type -> authsession.TL_authsession_getUserId
	12, // 36: authsession.RPCAuthsession.authsession_getPushSessionId:input_type -> authsession.TL_authsession_getPushSessionId
	13, // 37: authsession.RPCAuthsession.authsession_getFutureSalts:input_type -> authsession.TL_authsession_getFutureSalts
	14, // 38: authsession.RPCAuthsession.authsession_queryAuthKey:input_type -> authsession.TL_authsession_queryAuthKey
	15, // 39: authsession.RPCAuthsession.authsession_setAuthKey:input_type -> authsession.TL_authsession_setAuthKey
	16, // 40: authsession.RPCAuthsession.authsession_bindAuthKeyUser:input_type -> authsession.TL_authsession_bindAuthKeyUser
	17, // 41: authsession.RPCAuthsession.authsession_unbindAuthKeyUser:input_type -> authsession.TL_authsession_unbindAuthKeyUser
	18, // 42: authsession.RPCAuthsession.authsession_getPermAuthKeyId:input_type -> authsession.TL_authsession_getPermAuthKeyId
	19, // 43: authsession.RPCAuthsession.authsession_bindTempAuthKey:input_type -> authsession.TL_authsession_bindTempAuthKey
	20, // 44: authsession.RPCAuthsession.authsession_setClientSessionInfo:input_type -> authsession.TL_authsession_setClientSessionInfo
	21, // 45: authsession.RPCAuthsession.authsession_getAuthorization:input_type -> authsession.TL_authsession_getAuthorization
	22, // 46: authsession.RPCAuthsession.authsession_getAuthStateData:input_type -> authsession.TL_authsession_getAuthStateData
	23, // 47: authsession.RPCAuthsession.authsession_setLayer:input_type -> authsession.TL_authsession_setLayer
	24, // 48: authsession.RPCAuthsession.authsession_setInitConnection:input_type -> authsession.TL_authsession_setInitConnection
	29, // 49: authsession.RPCAuthsession.authsession_getAuthorizations:output_type -> mtproto.account_Authorizations
	25, // 50: authsession.RPCAuthsession.authsession_resetAuthorization:output_type -> authsession.Vector_Long
	30, // 51: authsession.RPCAuthsession.authsession_getLayer:output_type -> mtproto.Int32
	31, // 52: authsession.RPCAuthsession.authsession_getLangPack:output_type -> mtproto.String
	31, // 53: authsession.RPCAuthsession.authsession_getClient:output_type -> mtproto.String
	31, // 54: authsession.RPCAuthsession.authsession_getLangCode:output_type -> mtproto.String
	32, // 55: authsession.RPCAuthsession.authsession_getUserId:output_type -> mtproto.Int64
	32, // 56: authsession.RPCAuthsession.authsession_getPushSessionId:output_type -> mtproto.Int64
	33, // 57: authsession.RPCAuthsession.authsession_getFutureSalts:output_type -> mtproto.FutureSalts
	27, // 58: authsession.RPCAuthsession.authsession_queryAuthKey:output_type -> mtproto.AuthKeyInfo
	34, // 59: authsession.RPCAuthsession.authsession_setAuthKey:output_type -> mtproto.Bool
	32, // 60: authsession.RPCAuthsession.authsession_bindAuthKeyUser:output_type -> mtproto.Int64
	34, // 61: authsession.RPCAuthsession.authsession_unbindAuthKeyUser:output_type -> mtproto.Bool
	32, // 62: authsession.RPCAuthsession.authsession_getPermAuthKeyId:output_type -> mtproto.Int64
	34, // 63: authsession.RPCAuthsession.authsession_bindTempAuthKey:output_type -> mtproto.Bool
	34, // 64: authsession.RPCAuthsession.authsession_setClientSessionInfo:output_type -> mtproto.Bool
	35, // 65: authsession.RPCAuthsession.authsession_getAuthorization:output_type -> mtproto.Authorization
	1,  // 66: authsession.RPCAuthsession.authsession_getAuthStateData:output_type -> authsession.AuthKeyStateData
	34, // 67: authsession.RPCAuthsession.authsession_setLayer:output_type -> mtproto.Bool
	34, // 68: authsession.RPCAuthsession.authsession_setInitConnection:output_type -> mtproto.Bool
	49, // [49:69] is the sub-list for method output_type
	29, // [29:49] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_authsession_tl_proto_init() }
func file_authsession_tl_proto_init() {
	if File_authsession_tl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_authsession_tl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthKeyStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthKeyStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLClientSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionGetAuthorizations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionResetAuthorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionGetLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionGetLangPack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionGetClient); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionGetLangCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionGetUserId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionGetPushSessionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionGetFutureSalts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionQueryAuthKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionSetAuthKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionBindAuthKeyUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionUnbindAuthKeyUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionGetPermAuthKeyId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionBindTempAuthKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionSetClientSessionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionGetAuthorization); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionGetAuthStateData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionSetLayer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLAuthsessionSetInitConnection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_authsession_tl_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_Long); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_authsession_tl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_authsession_tl_proto_goTypes,
		DependencyIndexes: file_authsession_tl_proto_depIdxs,
		EnumInfos:         file_authsession_tl_proto_enumTypes,
		MessageInfos:      file_authsession_tl_proto_msgTypes,
	}.Build()
	File_authsession_tl_proto = out.File
	file_authsession_tl_proto_rawDesc = nil
	file_authsession_tl_proto_goTypes = nil
	file_authsession_tl_proto_depIdxs = nil
}
