//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: media.tl.proto

package media

import (
	mtproto "github.com/teamgram/proto/mtproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLConstructor int32

const (
	TLConstructor_CRC32_UNKNOWN                      TLConstructor = 0
	TLConstructor_CRC32_photoSizeList                TLConstructor = 108083635
	TLConstructor_CRC32_videoSizeList                TLConstructor = 953261042
	TLConstructor_CRC32_media_uploadPhotoFile        TLConstructor = 1009453847
	TLConstructor_CRC32_media_uploadProfilePhotoFile TLConstructor = -1757466844
	TLConstructor_CRC32_media_getPhoto               TLConstructor = 1702803563
	TLConstructor_CRC32_media_getPhotoSizeList       TLConstructor = -1578401979
	TLConstructor_CRC32_media_getPhotoSizeListList   TLConstructor = -77823776
	TLConstructor_CRC32_media_getVideoSizeList       TLConstructor = -998862102
	TLConstructor_CRC32_media_uploadedDocumentMedia  TLConstructor = 1331671148
	TLConstructor_CRC32_media_getDocument            TLConstructor = 1072011085
	TLConstructor_CRC32_media_getDocumentList        TLConstructor = -986721681
	TLConstructor_CRC32_media_uploadEncryptedFile    TLConstructor = -1426012517
	TLConstructor_CRC32_media_getEncryptedFile       TLConstructor = -60784431
	TLConstructor_CRC32_media_uploadWallPaperFile    TLConstructor = -1661293058
	TLConstructor_CRC32_media_uploadThemeFile        TLConstructor = 1122416736
	TLConstructor_CRC32_media_uploadStickerFile      TLConstructor = -1397349139
	TLConstructor_CRC32_media_uploadRingtoneFile     TLConstructor = 1035645449
)

// Enum value maps for TLConstructor.
var (
	TLConstructor_name = map[int32]string{
		0:           "CRC32_UNKNOWN",
		108083635:   "CRC32_photoSizeList",
		953261042:   "CRC32_videoSizeList",
		1009453847:  "CRC32_media_uploadPhotoFile",
		-1757466844: "CRC32_media_uploadProfilePhotoFile",
		1702803563:  "CRC32_media_getPhoto",
		-1578401979: "CRC32_media_getPhotoSizeList",
		-77823776:   "CRC32_media_getPhotoSizeListList",
		-998862102:  "CRC32_media_getVideoSizeList",
		1331671148:  "CRC32_media_uploadedDocumentMedia",
		1072011085:  "CRC32_media_getDocument",
		-986721681:  "CRC32_media_getDocumentList",
		-1426012517: "CRC32_media_uploadEncryptedFile",
		-60784431:   "CRC32_media_getEncryptedFile",
		-1661293058: "CRC32_media_uploadWallPaperFile",
		1122416736:  "CRC32_media_uploadThemeFile",
		-1397349139: "CRC32_media_uploadStickerFile",
		1035645449:  "CRC32_media_uploadRingtoneFile",
	}
	TLConstructor_value = map[string]int32{
		"CRC32_UNKNOWN":                      0,
		"CRC32_photoSizeList":                108083635,
		"CRC32_videoSizeList":                953261042,
		"CRC32_media_uploadPhotoFile":        1009453847,
		"CRC32_media_uploadProfilePhotoFile": -1757466844,
		"CRC32_media_getPhoto":               1702803563,
		"CRC32_media_getPhotoSizeList":       -1578401979,
		"CRC32_media_getPhotoSizeListList":   -77823776,
		"CRC32_media_getVideoSizeList":       -998862102,
		"CRC32_media_uploadedDocumentMedia":  1331671148,
		"CRC32_media_getDocument":            1072011085,
		"CRC32_media_getDocumentList":        -986721681,
		"CRC32_media_uploadEncryptedFile":    -1426012517,
		"CRC32_media_getEncryptedFile":       -60784431,
		"CRC32_media_uploadWallPaperFile":    -1661293058,
		"CRC32_media_uploadThemeFile":        1122416736,
		"CRC32_media_uploadStickerFile":      -1397349139,
		"CRC32_media_uploadRingtoneFile":     1035645449,
	}
)

func (x TLConstructor) Enum() *TLConstructor {
	p := new(TLConstructor)
	*p = x
	return p
}

func (x TLConstructor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLConstructor) Descriptor() protoreflect.EnumDescriptor {
	return file_media_tl_proto_enumTypes[0].Descriptor()
}

func (TLConstructor) Type() protoreflect.EnumType {
	return &file_media_tl_proto_enumTypes[0]
}

func (x TLConstructor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLConstructor.Descriptor instead.
func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{0}
}

// PhotoSizeList <--
//   - TL_photoSizeList
type PhotoSizeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string               `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor        `protobuf:"varint,2,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	SizeId        int64                `protobuf:"varint,3,opt,name=size_id,json=sizeId,proto3" json:"size_id,omitempty"`
	Sizes         []*mtproto.PhotoSize `protobuf:"bytes,4,rep,name=sizes,proto3" json:"sizes,omitempty"`
	DcId          int32                `protobuf:"varint,5,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
}

func (x *PhotoSizeList) Reset() {
	*x = PhotoSizeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PhotoSizeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PhotoSizeList) ProtoMessage() {}

func (x *PhotoSizeList) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PhotoSizeList.ProtoReflect.Descriptor instead.
func (*PhotoSizeList) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{0}
}

func (x *PhotoSizeList) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *PhotoSizeList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *PhotoSizeList) GetSizeId() int64 {
	if x != nil {
		return x.SizeId
	}
	return 0
}

func (x *PhotoSizeList) GetSizes() []*mtproto.PhotoSize {
	if x != nil {
		return x.Sizes
	}
	return nil
}

func (x *PhotoSizeList) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

type TLPhotoSizeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *PhotoSizeList `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLPhotoSizeList) Reset() {
	*x = TLPhotoSizeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLPhotoSizeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPhotoSizeList) ProtoMessage() {}

func (x *TLPhotoSizeList) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPhotoSizeList.ProtoReflect.Descriptor instead.
func (*TLPhotoSizeList) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{1}
}

func (x *TLPhotoSizeList) GetData2() *PhotoSizeList {
	if x != nil {
		return x.Data2
	}
	return nil
}

// VideoSizeList <--
//   - TL_videoSizeList
type VideoSizeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string               `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor        `protobuf:"varint,2,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	SizeId        int64                `protobuf:"varint,3,opt,name=size_id,json=sizeId,proto3" json:"size_id,omitempty"`
	Sizes         []*mtproto.VideoSize `protobuf:"bytes,4,rep,name=sizes,proto3" json:"sizes,omitempty"`
	DcId          int32                `protobuf:"varint,5,opt,name=dc_id,json=dcId,proto3" json:"dc_id,omitempty"`
}

func (x *VideoSizeList) Reset() {
	*x = VideoSizeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoSizeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSizeList) ProtoMessage() {}

func (x *VideoSizeList) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSizeList.ProtoReflect.Descriptor instead.
func (*VideoSizeList) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{2}
}

func (x *VideoSizeList) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *VideoSizeList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *VideoSizeList) GetSizeId() int64 {
	if x != nil {
		return x.SizeId
	}
	return 0
}

func (x *VideoSizeList) GetSizes() []*mtproto.VideoSize {
	if x != nil {
		return x.Sizes
	}
	return nil
}

func (x *VideoSizeList) GetDcId() int32 {
	if x != nil {
		return x.DcId
	}
	return 0
}

type TLVideoSizeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *VideoSizeList `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLVideoSizeList) Reset() {
	*x = TLVideoSizeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLVideoSizeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLVideoSizeList) ProtoMessage() {}

func (x *TLVideoSizeList) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLVideoSizeList.ProtoReflect.Descriptor instead.
func (*TLVideoSizeList) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{3}
}

func (x *TLVideoSizeList) GetData2() *VideoSizeList {
	if x != nil {
		return x.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMediaUploadPhotoFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor            `protobuf:"varint,1,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	OwnerId     int64                    `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	File        *mtproto.InputFile       `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	Stickers    []*mtproto.InputDocument `protobuf:"bytes,5,rep,name=stickers,proto3" json:"stickers,omitempty"`
	TtlSeconds  *wrapperspb.Int32Value   `protobuf:"bytes,6,opt,name=ttl_seconds,json=ttlSeconds,proto3" json:"ttl_seconds,omitempty"`
}

func (x *TLMediaUploadPhotoFile) Reset() {
	*x = TLMediaUploadPhotoFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMediaUploadPhotoFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMediaUploadPhotoFile) ProtoMessage() {}

func (x *TLMediaUploadPhotoFile) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMediaUploadPhotoFile.ProtoReflect.Descriptor instead.
func (*TLMediaUploadPhotoFile) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{4}
}

func (x *TLMediaUploadPhotoFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMediaUploadPhotoFile) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *TLMediaUploadPhotoFile) GetFile() *mtproto.InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLMediaUploadPhotoFile) GetStickers() []*mtproto.InputDocument {
	if x != nil {
		return x.Stickers
	}
	return nil
}

func (x *TLMediaUploadPhotoFile) GetTtlSeconds() *wrapperspb.Int32Value {
	if x != nil {
		return x.TtlSeconds
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMediaUploadProfilePhotoFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor  TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	OwnerId      int64                   `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	File         *mtproto.InputFile      `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	Video        *mtproto.InputFile      `protobuf:"bytes,5,opt,name=video,proto3" json:"video,omitempty"`
	VideoStartTs *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=video_start_ts,json=videoStartTs,proto3" json:"video_start_ts,omitempty"`
}

func (x *TLMediaUploadProfilePhotoFile) Reset() {
	*x = TLMediaUploadProfilePhotoFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMediaUploadProfilePhotoFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMediaUploadProfilePhotoFile) ProtoMessage() {}

func (x *TLMediaUploadProfilePhotoFile) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMediaUploadProfilePhotoFile.ProtoReflect.Descriptor instead.
func (*TLMediaUploadProfilePhotoFile) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{5}
}

func (x *TLMediaUploadProfilePhotoFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMediaUploadProfilePhotoFile) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *TLMediaUploadProfilePhotoFile) GetFile() *mtproto.InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLMediaUploadProfilePhotoFile) GetVideo() *mtproto.InputFile {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *TLMediaUploadProfilePhotoFile) GetVideoStartTs() *wrapperspb.DoubleValue {
	if x != nil {
		return x.VideoStartTs
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMediaGetPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	PhotoId     int64         `protobuf:"varint,3,opt,name=photo_id,json=photoId,proto3" json:"photo_id,omitempty"`
}

func (x *TLMediaGetPhoto) Reset() {
	*x = TLMediaGetPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMediaGetPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMediaGetPhoto) ProtoMessage() {}

func (x *TLMediaGetPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMediaGetPhoto.ProtoReflect.Descriptor instead.
func (*TLMediaGetPhoto) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{6}
}

func (x *TLMediaGetPhoto) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMediaGetPhoto) GetPhotoId() int64 {
	if x != nil {
		return x.PhotoId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMediaGetPhotoSizeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	SizeId      int64         `protobuf:"varint,3,opt,name=size_id,json=sizeId,proto3" json:"size_id,omitempty"`
}

func (x *TLMediaGetPhotoSizeList) Reset() {
	*x = TLMediaGetPhotoSizeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMediaGetPhotoSizeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMediaGetPhotoSizeList) ProtoMessage() {}

func (x *TLMediaGetPhotoSizeList) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMediaGetPhotoSizeList.ProtoReflect.Descriptor instead.
func (*TLMediaGetPhotoSizeList) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{7}
}

func (x *TLMediaGetPhotoSizeList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMediaGetPhotoSizeList) GetSizeId() int64 {
	if x != nil {
		return x.SizeId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMediaGetPhotoSizeListList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	IdList      []int64       `protobuf:"varint,3,rep,packed,name=id_list,json=idList,proto3" json:"id_list,omitempty"`
}

func (x *TLMediaGetPhotoSizeListList) Reset() {
	*x = TLMediaGetPhotoSizeListList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMediaGetPhotoSizeListList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMediaGetPhotoSizeListList) ProtoMessage() {}

func (x *TLMediaGetPhotoSizeListList) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMediaGetPhotoSizeListList.ProtoReflect.Descriptor instead.
func (*TLMediaGetPhotoSizeListList) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{8}
}

func (x *TLMediaGetPhotoSizeListList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMediaGetPhotoSizeListList) GetIdList() []int64 {
	if x != nil {
		return x.IdList
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMediaGetVideoSizeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	SizeId      int64         `protobuf:"varint,3,opt,name=size_id,json=sizeId,proto3" json:"size_id,omitempty"`
}

func (x *TLMediaGetVideoSizeList) Reset() {
	*x = TLMediaGetVideoSizeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMediaGetVideoSizeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMediaGetVideoSizeList) ProtoMessage() {}

func (x *TLMediaGetVideoSizeList) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMediaGetVideoSizeList.ProtoReflect.Descriptor instead.
func (*TLMediaGetVideoSizeList) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{9}
}

func (x *TLMediaGetVideoSizeList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMediaGetVideoSizeList) GetSizeId() int64 {
	if x != nil {
		return x.SizeId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMediaUploadedDocumentMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	OwnerId     int64               `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Media       *mtproto.InputMedia `protobuf:"bytes,4,opt,name=media,proto3" json:"media,omitempty"`
}

func (x *TLMediaUploadedDocumentMedia) Reset() {
	*x = TLMediaUploadedDocumentMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMediaUploadedDocumentMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMediaUploadedDocumentMedia) ProtoMessage() {}

func (x *TLMediaUploadedDocumentMedia) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMediaUploadedDocumentMedia.ProtoReflect.Descriptor instead.
func (*TLMediaUploadedDocumentMedia) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{10}
}

func (x *TLMediaUploadedDocumentMedia) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMediaUploadedDocumentMedia) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *TLMediaUploadedDocumentMedia) GetMedia() *mtproto.InputMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMediaGetDocument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	Id          int64         `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TLMediaGetDocument) Reset() {
	*x = TLMediaGetDocument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMediaGetDocument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMediaGetDocument) ProtoMessage() {}

func (x *TLMediaGetDocument) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMediaGetDocument.ProtoReflect.Descriptor instead.
func (*TLMediaGetDocument) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{11}
}

func (x *TLMediaGetDocument) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMediaGetDocument) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMediaGetDocumentList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	IdList      []int64       `protobuf:"varint,3,rep,packed,name=id_list,json=idList,proto3" json:"id_list,omitempty"`
}

func (x *TLMediaGetDocumentList) Reset() {
	*x = TLMediaGetDocumentList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMediaGetDocumentList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMediaGetDocumentList) ProtoMessage() {}

func (x *TLMediaGetDocumentList) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMediaGetDocumentList.ProtoReflect.Descriptor instead.
func (*TLMediaGetDocumentList) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{12}
}

func (x *TLMediaGetDocumentList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMediaGetDocumentList) GetIdList() []int64 {
	if x != nil {
		return x.IdList
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMediaUploadEncryptedFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor               `protobuf:"varint,1,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	OwnerId     int64                       `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	File        *mtproto.InputEncryptedFile `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *TLMediaUploadEncryptedFile) Reset() {
	*x = TLMediaUploadEncryptedFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMediaUploadEncryptedFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMediaUploadEncryptedFile) ProtoMessage() {}

func (x *TLMediaUploadEncryptedFile) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMediaUploadEncryptedFile.ProtoReflect.Descriptor instead.
func (*TLMediaUploadEncryptedFile) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{13}
}

func (x *TLMediaUploadEncryptedFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMediaUploadEncryptedFile) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *TLMediaUploadEncryptedFile) GetFile() *mtproto.InputEncryptedFile {
	if x != nil {
		return x.File
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMediaGetEncryptedFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	Id          int64         `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash  int64         `protobuf:"varint,4,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (x *TLMediaGetEncryptedFile) Reset() {
	*x = TLMediaGetEncryptedFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMediaGetEncryptedFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMediaGetEncryptedFile) ProtoMessage() {}

func (x *TLMediaGetEncryptedFile) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMediaGetEncryptedFile.ProtoReflect.Descriptor instead.
func (*TLMediaGetEncryptedFile) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{14}
}

func (x *TLMediaGetEncryptedFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMediaGetEncryptedFile) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLMediaGetEncryptedFile) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMediaUploadWallPaperFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	OwnerId     int64              `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	File        *mtproto.InputFile `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	MimeType    string             `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Admin       *mtproto.Bool      `protobuf:"bytes,6,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (x *TLMediaUploadWallPaperFile) Reset() {
	*x = TLMediaUploadWallPaperFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMediaUploadWallPaperFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMediaUploadWallPaperFile) ProtoMessage() {}

func (x *TLMediaUploadWallPaperFile) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMediaUploadWallPaperFile.ProtoReflect.Descriptor instead.
func (*TLMediaUploadWallPaperFile) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{15}
}

func (x *TLMediaUploadWallPaperFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMediaUploadWallPaperFile) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *TLMediaUploadWallPaperFile) GetFile() *mtproto.InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLMediaUploadWallPaperFile) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *TLMediaUploadWallPaperFile) GetAdmin() *mtproto.Bool {
	if x != nil {
		return x.Admin
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMediaUploadThemeFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	OwnerId     int64              `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	File        *mtproto.InputFile `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	Thumb       *mtproto.InputFile `protobuf:"bytes,5,opt,name=thumb,proto3" json:"thumb,omitempty"`
	MimeType    string             `protobuf:"bytes,6,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	FileName    string             `protobuf:"bytes,7,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *TLMediaUploadThemeFile) Reset() {
	*x = TLMediaUploadThemeFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMediaUploadThemeFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMediaUploadThemeFile) ProtoMessage() {}

func (x *TLMediaUploadThemeFile) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMediaUploadThemeFile.ProtoReflect.Descriptor instead.
func (*TLMediaUploadThemeFile) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{16}
}

func (x *TLMediaUploadThemeFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMediaUploadThemeFile) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *TLMediaUploadThemeFile) GetFile() *mtproto.InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLMediaUploadThemeFile) GetThumb() *mtproto.InputFile {
	if x != nil {
		return x.Thumb
	}
	return nil
}

func (x *TLMediaUploadThemeFile) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *TLMediaUploadThemeFile) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLMediaUploadStickerFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor              TLConstructor              `protobuf:"varint,1,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	OwnerId                  int64                      `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	File                     *mtproto.InputFile         `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	Thumb                    *mtproto.InputFile         `protobuf:"bytes,5,opt,name=thumb,proto3" json:"thumb,omitempty"`
	MimeType                 string                     `protobuf:"bytes,6,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	FileName                 string                     `protobuf:"bytes,7,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	DocumentAttributeSticker *mtproto.DocumentAttribute `protobuf:"bytes,8,opt,name=document_attribute_sticker,json=documentAttributeSticker,proto3" json:"document_attribute_sticker,omitempty"`
}

func (x *TLMediaUploadStickerFile) Reset() {
	*x = TLMediaUploadStickerFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMediaUploadStickerFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMediaUploadStickerFile) ProtoMessage() {}

func (x *TLMediaUploadStickerFile) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMediaUploadStickerFile.ProtoReflect.Descriptor instead.
func (*TLMediaUploadStickerFile) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{17}
}

func (x *TLMediaUploadStickerFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMediaUploadStickerFile) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *TLMediaUploadStickerFile) GetFile() *mtproto.InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLMediaUploadStickerFile) GetThumb() *mtproto.InputFile {
	if x != nil {
		return x.Thumb
	}
	return nil
}

func (x *TLMediaUploadStickerFile) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *TLMediaUploadStickerFile) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *TLMediaUploadStickerFile) GetDocumentAttributeSticker() *mtproto.DocumentAttribute {
	if x != nil {
		return x.DocumentAttributeSticker
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMediaUploadRingtoneFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=media.TLConstructor" json:"constructor,omitempty"`
	OwnerId     int64              `protobuf:"varint,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	File        *mtproto.InputFile `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	MimeType    string             `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	FileName    string             `protobuf:"bytes,6,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *TLMediaUploadRingtoneFile) Reset() {
	*x = TLMediaUploadRingtoneFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMediaUploadRingtoneFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMediaUploadRingtoneFile) ProtoMessage() {}

func (x *TLMediaUploadRingtoneFile) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMediaUploadRingtoneFile.ProtoReflect.Descriptor instead.
func (*TLMediaUploadRingtoneFile) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{18}
}

func (x *TLMediaUploadRingtoneFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMediaUploadRingtoneFile) GetOwnerId() int64 {
	if x != nil {
		return x.OwnerId
	}
	return 0
}

func (x *TLMediaUploadRingtoneFile) GetFile() *mtproto.InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLMediaUploadRingtoneFile) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *TLMediaUploadRingtoneFile) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// --------------------------------------------------------------------------------------------
// Vector api result type
type Vector_PhotoSizeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*PhotoSizeList `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_PhotoSizeList) Reset() {
	*x = Vector_PhotoSizeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_PhotoSizeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_PhotoSizeList) ProtoMessage() {}

func (x *Vector_PhotoSizeList) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_PhotoSizeList.ProtoReflect.Descriptor instead.
func (*Vector_PhotoSizeList) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{19}
}

func (x *Vector_PhotoSizeList) GetDatas() []*PhotoSizeList {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_Document struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*mtproto.Document `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_Document) Reset() {
	*x = Vector_Document{}
	if protoimpl.UnsafeEnabled {
		mi := &file_media_tl_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_Document) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_Document) ProtoMessage() {}

func (x *Vector_Document) ProtoReflect() protoreflect.Message {
	mi := &file_media_tl_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_Document.ProtoReflect.Descriptor instead.
func (*Vector_Document) Descriptor() ([]byte, []int) {
	return file_media_tl_proto_rawDescGZIP(), []int{20}
}

func (x *Vector_Document) GetDatas() []*mtproto.Document {
	if x != nil {
		return x.Datas
	}
	return nil
}

var File_media_tl_proto protoreflect.FileDescriptor

var file_media_tl_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x74, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc6, 0x01, 0x0a, 0x0d, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69,
	0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x7a,
	0x65, 0x52, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x63, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x63, 0x49, 0x64, 0x22, 0x3e, 0x0a,
	0x10, 0x54, 0x4c, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69,
	0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0xc6, 0x01,
	0x0a, 0x0d, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x69, 0x7a, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x05, 0x73, 0x69, 0x7a, 0x65,
	0x73, 0x12, 0x13, 0x0a, 0x05, 0x64, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x64, 0x63, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x10, 0x54, 0x4c, 0x5f, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0x87, 0x02, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x32,
	0x0a, 0x08, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x74, 0x6c, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x74, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x22, 0x8a, 0x02, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x28, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x42, 0x0a, 0x0e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x73, 0x22, 0x66, 0x0a,
	0x11, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x7a,
	0x65, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x69,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x67, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x69, 0x7a,
	0x65, 0x49, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x22, 0x5e, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x6b, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xa2, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x61, 0x73, 0x68, 0x22, 0xdb, 0x01,
	0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69,
	0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0xf9, 0x01, 0x0a, 0x18,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54,
	0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd5, 0x02, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x58, 0x0a, 0x1a, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x69, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x18, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x22,
	0xd2, 0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x36, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x14, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x3a, 0x0a, 0x0f, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x2a, 0xca, 0x05, 0x0a, 0x0d, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x13, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x10, 0xb3, 0xf3, 0xc4, 0x33, 0x12, 0x1b, 0x0a, 0x13, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xf2, 0xb7, 0xc6,
	0xc6, 0x03, 0x12, 0x23, 0x0a, 0x1b, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c,
	0x65, 0x10, 0x97, 0x96, 0xac, 0xe1, 0x03, 0x12, 0x2f, 0x0a, 0x22, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x10, 0xa4, 0xde,
	0xfc, 0xb9, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1c, 0x0a, 0x14, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x10, 0xeb, 0xf0, 0xfa, 0xab, 0x06, 0x12, 0x29, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69,
	0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xc5, 0xfe, 0xad, 0x8f, 0xfa, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x2d, 0x0a, 0x20, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x67, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xe0, 0x81, 0xf2, 0xda, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x29, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x67, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x10, 0xea, 0xa5, 0xda, 0xa3, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x29, 0x0a, 0x21, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x10, 0xec, 0xe0, 0xfe, 0xfa, 0x04, 0x12, 0x1f, 0x0a, 0x17, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0xcd, 0xae, 0x96, 0xff, 0x03, 0x12, 0x28, 0x0a, 0x1b, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xef, 0xa4, 0xbf, 0xa9, 0xfc, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x10, 0x9b, 0x8d, 0x83, 0xd8, 0xfa, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x29, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67,
	0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x10,
	0xd1, 0x81, 0x82, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x10, 0xfe, 0xdb,
	0xea, 0xe7, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x1b, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x68,
	0x65, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x10, 0xe0, 0xf0, 0x9a, 0x97, 0x04, 0x12, 0x2a, 0x0a,
	0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x10, 0xed,
	0xc9, 0xd8, 0xe5, 0xfa, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x1e, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52,
	0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x89, 0xe4, 0xea, 0xed,
	0x03, 0x32, 0xf3, 0x09, 0x0a, 0x08, 0x52, 0x50, 0x43, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x4a,
	0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x1c, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x69,
	0x6c, 0x65, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67, 0x65,
	0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x16, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67, 0x65,
	0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x7a, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x1a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53, 0x69,
	0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x53,
	0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x16, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x56, 0x69,
	0x64, 0x65, 0x6f, 0x53, 0x69, 0x7a, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a,
	0x1b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x25, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x1a, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x11,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1b, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x11,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67, 0x65, 0x74,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67, 0x65,
	0x74, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x19, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x46, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x16, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67, 0x65, 0x74,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x67,
	0x65, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x1a,
	0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x19, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x23, 0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x61,
	0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x11, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x11, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12,
	0x51, 0x0a, 0x17, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x53,
	0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x11, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x18, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x22,
	0x2e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x1a, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2f, 0x74,
	0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_media_tl_proto_rawDescOnce sync.Once
	file_media_tl_proto_rawDescData = file_media_tl_proto_rawDesc
)

func file_media_tl_proto_rawDescGZIP() []byte {
	file_media_tl_proto_rawDescOnce.Do(func() {
		file_media_tl_proto_rawDescData = protoimpl.X.CompressGZIP(file_media_tl_proto_rawDescData)
	})
	return file_media_tl_proto_rawDescData
}

var file_media_tl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_media_tl_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_media_tl_proto_goTypes = []interface{}{
	(TLConstructor)(0),                    // 0: media.TLConstructor
	(*PhotoSizeList)(nil),                 // 1: media.PhotoSizeList
	(*TLPhotoSizeList)(nil),               // 2: media.TL_photoSizeList
	(*VideoSizeList)(nil),                 // 3: media.VideoSizeList
	(*TLVideoSizeList)(nil),               // 4: media.TL_videoSizeList
	(*TLMediaUploadPhotoFile)(nil),        // 5: media.TL_media_uploadPhotoFile
	(*TLMediaUploadProfilePhotoFile)(nil), // 6: media.TL_media_uploadProfilePhotoFile
	(*TLMediaGetPhoto)(nil),               // 7: media.TL_media_getPhoto
	(*TLMediaGetPhotoSizeList)(nil),       // 8: media.TL_media_getPhotoSizeList
	(*TLMediaGetPhotoSizeListList)(nil),   // 9: media.TL_media_getPhotoSizeListList
	(*TLMediaGetVideoSizeList)(nil),       // 10: media.TL_media_getVideoSizeList
	(*TLMediaUploadedDocumentMedia)(nil),  // 11: media.TL_media_uploadedDocumentMedia
	(*TLMediaGetDocument)(nil),            // 12: media.TL_media_getDocument
	(*TLMediaGetDocumentList)(nil),        // 13: media.TL_media_getDocumentList
	(*TLMediaUploadEncryptedFile)(nil),    // 14: media.TL_media_uploadEncryptedFile
	(*TLMediaGetEncryptedFile)(nil),       // 15: media.TL_media_getEncryptedFile
	(*TLMediaUploadWallPaperFile)(nil),    // 16: media.TL_media_uploadWallPaperFile
	(*TLMediaUploadThemeFile)(nil),        // 17: media.TL_media_uploadThemeFile
	(*TLMediaUploadStickerFile)(nil),      // 18: media.TL_media_uploadStickerFile
	(*TLMediaUploadRingtoneFile)(nil),     // 19: media.TL_media_uploadRingtoneFile
	(*Vector_PhotoSizeList)(nil),          // 20: media.Vector_PhotoSizeList
	(*Vector_Document)(nil),               // 21: media.Vector_Document
	(*mtproto.PhotoSize)(nil),             // 22: mtproto.PhotoSize
	(*mtproto.VideoSize)(nil),             // 23: mtproto.VideoSize
	(*mtproto.InputFile)(nil),             // 24: mtproto.InputFile
	(*mtproto.InputDocument)(nil),         // 25: mtproto.InputDocument
	(*wrapperspb.Int32Value)(nil),         // 26: google.protobuf.Int32Value
	(*wrapperspb.DoubleValue)(nil),        // 27: google.protobuf.DoubleValue
	(*mtproto.InputMedia)(nil),            // 28: mtproto.InputMedia
	(*mtproto.InputEncryptedFile)(nil),    // 29: mtproto.InputEncryptedFile
	(*mtproto.Bool)(nil),                  // 30: mtproto.Bool
	(*mtproto.DocumentAttribute)(nil),     // 31: mtproto.DocumentAttribute
	(*mtproto.Document)(nil),              // 32: mtproto.Document
	(*mtproto.Photo)(nil),                 // 33: mtproto.Photo
	(*mtproto.MessageMedia)(nil),          // 34: mtproto.MessageMedia
	(*mtproto.EncryptedFile)(nil),         // 35: mtproto.EncryptedFile
}
var file_media_tl_proto_depIdxs = []int32{
	0,  // 0: media.PhotoSizeList.constructor:type_name -> media.TLConstructor
	22, // 1: media.PhotoSizeList.sizes:type_name -> mtproto.PhotoSize
	1,  // 2: media.TL_photoSizeList.data2:type_name -> media.PhotoSizeList
	0,  // 3: media.VideoSizeList.constructor:type_name -> media.TLConstructor
	23, // 4: media.VideoSizeList.sizes:type_name -> mtproto.VideoSize
	3,  // 5: media.TL_videoSizeList.data2:type_name -> media.VideoSizeList
	0,  // 6: media.TL_media_uploadPhotoFile.constructor:type_name -> media.TLConstructor
	24, // 7: media.TL_media_uploadPhotoFile.file:type_name -> mtproto.InputFile
	25, // 8: media.TL_media_uploadPhotoFile.stickers:type_name -> mtproto.InputDocument
	26, // 9: media.TL_media_uploadPhotoFile.ttl_seconds:type_name -> google.protobuf.Int32Value
	0,  // 10: media.TL_media_uploadProfilePhotoFile.constructor:type_name -> media.TLConstructor
	24, // 11: media.TL_media_uploadProfilePhotoFile.file:type_name -> mtproto.InputFile
	24, // 12: media.TL_media_uploadProfilePhotoFile.video:type_name -> mtproto.InputFile
	27, // 13: media.TL_media_uploadProfilePhotoFile.video_start_ts:type_name -> google.protobuf.DoubleValue
	0,  // 14: media.TL_media_getPhoto.constructor:type_name -> media.TLConstructor
	0,  // 15: media.TL_media_getPhotoSizeList.constructor:type_name -> media.TLConstructor
	0,  // 16: media.TL_media_getPhotoSizeListList.constructor:type_name -> media.TLConstructor
	0,  // 17: media.TL_media_getVideoSizeList.constructor:type_name -> media.TLConstructor
	0,  // 18: media.TL_media_uploadedDocumentMedia.constructor:type_name -> media.TLConstructor
	28, // 19: media.TL_media_uploadedDocumentMedia.media:type_name -> mtproto.InputMedia
	0,  // 20: media.TL_media_getDocument.constructor:type_name -> media.TLConstructor
	0,  // 21: media.TL_media_getDocumentList.constructor:type_name -> media.TLConstructor
	0,  // 22: media.TL_media_uploadEncryptedFile.constructor:type_name -> media.TLConstructor
	29, // 23: media.TL_media_uploadEncryptedFile.file:type_name -> mtproto.InputEncryptedFile
	0,  // 24: media.TL_media_getEncryptedFile.constructor:type_name -> media.TLConstructor
	0,  // 25: media.TL_media_uploadWallPaperFile.constructor:type_name -> media.TLConstructor
	24, // 26: media.TL_media_uploadWallPaperFile.file:type_name -> mtproto.InputFile
	30, // 27: media.TL_media_uploadWallPaperFile.admin:type_name -> mtproto.Bool
	0,  // 28: media.TL_media_uploadThemeFile.constructor:type_name -> media.TLConstructor
	24, // 29: media.TL_media_uploadThemeFile.file:type_name -> mtproto.InputFile
	24, // 30: media.TL_media_uploadThemeFile.thumb:type_name -> mtproto.InputFile
	0,  // 31: media.TL_media_uploadStickerFile.constructor:type_name -> media.TLConstructor
	24, // 32: media.TL_media_uploadStickerFile.file:type_name -> mtproto.InputFile
	24, // 33: media.TL_media_uploadStickerFile.thumb:type_name -> mtproto.InputFile
	31, // 34: media.TL_media_uploadStickerFile.document_attribute_sticker:type_name -> mtproto.DocumentAttribute
	0,  // 35: media.TL_media_uploadRingtoneFile.constructor:type_name -> media.TLConstructor
	24, // 36: media.TL_media_uploadRingtoneFile.file:type_name -> mtproto.InputFile
	1,  // 37: media.Vector_PhotoSizeList.datas:type_name -> media.PhotoSizeList
	32, // 38: media.Vector_Document.datas:type_name -> mtproto.Document
	5,  // 39: media.RPCMedia.media_uploadPhotoFile:input_type -> media.TL_media_uploadPhotoFile
	6,  // 40: media.RPCMedia.media_uploadProfilePhotoFile:input_type -> media.TL_media_uploadProfilePhotoFile
	7,  // 41: media.RPCMedia.media_getPhoto:input_type -> media.TL_media_getPhoto
	8,  // 42: media.RPCMedia.media_getPhotoSizeList:input_type -> media.TL_media_getPhotoSizeList
	9,  // 43: media.RPCMedia.media_getPhotoSizeListList:input_type -> media.TL_media_getPhotoSizeListList
	10, // 44: media.RPCMedia.media_getVideoSizeList:input_type -> media.TL_media_getVideoSizeList
	11, // 45: media.RPCMedia.media_uploadedDocumentMedia:input_type -> media.TL_media_uploadedDocumentMedia
	12, // 46: media.RPCMedia.media_getDocument:input_type -> media.TL_media_getDocument
	13, // 47: media.RPCMedia.media_getDocumentList:input_type -> media.TL_media_getDocumentList
	14, // 48: media.RPCMedia.media_uploadEncryptedFile:input_type -> media.TL_media_uploadEncryptedFile
	15, // 49: media.RPCMedia.media_getEncryptedFile:input_type -> media.TL_media_getEncryptedFile
	16, // 50: media.RPCMedia.media_uploadWallPaperFile:input_type -> media.TL_media_uploadWallPaperFile
	17, // 51: media.RPCMedia.media_uploadThemeFile:input_type -> media.TL_media_uploadThemeFile
	18, // 52: media.RPCMedia.media_uploadStickerFile:input_type -> media.TL_media_uploadStickerFile
	19, // 53: media.RPCMedia.media_uploadRingtoneFile:input_type -> media.TL_media_uploadRingtoneFile
	33, // 54: media.RPCMedia.media_uploadPhotoFile:output_type -> mtproto.Photo
	33, // 55: media.RPCMedia.media_uploadProfilePhotoFile:output_type -> mtproto.Photo
	33, // 56: media.RPCMedia.media_getPhoto:output_type -> mtproto.Photo
	1,  // 57: media.RPCMedia.media_getPhotoSizeList:output_type -> media.PhotoSizeList
	20, // 58: media.RPCMedia.media_getPhotoSizeListList:output_type -> media.Vector_PhotoSizeList
	3,  // 59: media.RPCMedia.media_getVideoSizeList:output_type -> media.VideoSizeList
	34, // 60: media.RPCMedia.media_uploadedDocumentMedia:output_type -> mtproto.MessageMedia
	32, // 61: media.RPCMedia.media_getDocument:output_type -> mtproto.Document
	21, // 62: media.RPCMedia.media_getDocumentList:output_type -> media.Vector_Document
	35, // 63: media.RPCMedia.media_uploadEncryptedFile:output_type -> mtproto.EncryptedFile
	35, // 64: media.RPCMedia.media_getEncryptedFile:output_type -> mtproto.EncryptedFile
	32, // 65: media.RPCMedia.media_uploadWallPaperFile:output_type -> mtproto.Document
	32, // 66: media.RPCMedia.media_uploadThemeFile:output_type -> mtproto.Document
	32, // 67: media.RPCMedia.media_uploadStickerFile:output_type -> mtproto.Document
	32, // 68: media.RPCMedia.media_uploadRingtoneFile:output_type -> mtproto.Document
	54, // [54:69] is the sub-list for method output_type
	39, // [39:54] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_media_tl_proto_init() }
func file_media_tl_proto_init() {
	if File_media_tl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_media_tl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PhotoSizeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLPhotoSizeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoSizeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLVideoSizeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMediaUploadPhotoFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMediaUploadProfilePhotoFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMediaGetPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMediaGetPhotoSizeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMediaGetPhotoSizeListList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMediaGetVideoSizeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMediaUploadedDocumentMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMediaGetDocument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMediaGetDocumentList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMediaUploadEncryptedFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMediaGetEncryptedFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMediaUploadWallPaperFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMediaUploadThemeFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMediaUploadStickerFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMediaUploadRingtoneFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_PhotoSizeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_media_tl_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_Document); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_media_tl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_media_tl_proto_goTypes,
		DependencyIndexes: file_media_tl_proto_depIdxs,
		EnumInfos:         file_media_tl_proto_enumTypes,
		MessageInfos:      file_media_tl_proto_msgTypes,
	}.Build()
	File_media_tl_proto = out.File
	file_media_tl_proto_rawDesc = nil
	file_media_tl_proto_goTypes = nil
	file_media_tl_proto_depIdxs = nil
}
