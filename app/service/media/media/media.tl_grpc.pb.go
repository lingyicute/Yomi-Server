//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: media.tl.proto

package media

import (
	context "context"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPCMedia_MediaUploadPhotoFile_FullMethodName        = "/media.RPCMedia/media_uploadPhotoFile"
	RPCMedia_MediaUploadProfilePhotoFile_FullMethodName = "/media.RPCMedia/media_uploadProfilePhotoFile"
	RPCMedia_MediaGetPhoto_FullMethodName               = "/media.RPCMedia/media_getPhoto"
	RPCMedia_MediaGetPhotoSizeList_FullMethodName       = "/media.RPCMedia/media_getPhotoSizeList"
	RPCMedia_MediaGetPhotoSizeListList_FullMethodName   = "/media.RPCMedia/media_getPhotoSizeListList"
	RPCMedia_MediaGetVideoSizeList_FullMethodName       = "/media.RPCMedia/media_getVideoSizeList"
	RPCMedia_MediaUploadedDocumentMedia_FullMethodName  = "/media.RPCMedia/media_uploadedDocumentMedia"
	RPCMedia_MediaGetDocument_FullMethodName            = "/media.RPCMedia/media_getDocument"
	RPCMedia_MediaGetDocumentList_FullMethodName        = "/media.RPCMedia/media_getDocumentList"
	RPCMedia_MediaUploadEncryptedFile_FullMethodName    = "/media.RPCMedia/media_uploadEncryptedFile"
	RPCMedia_MediaGetEncryptedFile_FullMethodName       = "/media.RPCMedia/media_getEncryptedFile"
	RPCMedia_MediaUploadWallPaperFile_FullMethodName    = "/media.RPCMedia/media_uploadWallPaperFile"
	RPCMedia_MediaUploadThemeFile_FullMethodName        = "/media.RPCMedia/media_uploadThemeFile"
	RPCMedia_MediaUploadStickerFile_FullMethodName      = "/media.RPCMedia/media_uploadStickerFile"
	RPCMedia_MediaUploadRingtoneFile_FullMethodName     = "/media.RPCMedia/media_uploadRingtoneFile"
)

// RPCMediaClient is the client API for RPCMedia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCMediaClient interface {
	MediaUploadPhotoFile(ctx context.Context, in *TLMediaUploadPhotoFile, opts ...grpc.CallOption) (*mtproto.Photo, error)
	MediaUploadProfilePhotoFile(ctx context.Context, in *TLMediaUploadProfilePhotoFile, opts ...grpc.CallOption) (*mtproto.Photo, error)
	MediaGetPhoto(ctx context.Context, in *TLMediaGetPhoto, opts ...grpc.CallOption) (*mtproto.Photo, error)
	MediaGetPhotoSizeList(ctx context.Context, in *TLMediaGetPhotoSizeList, opts ...grpc.CallOption) (*PhotoSizeList, error)
	MediaGetPhotoSizeListList(ctx context.Context, in *TLMediaGetPhotoSizeListList, opts ...grpc.CallOption) (*Vector_PhotoSizeList, error)
	MediaGetVideoSizeList(ctx context.Context, in *TLMediaGetVideoSizeList, opts ...grpc.CallOption) (*VideoSizeList, error)
	MediaUploadedDocumentMedia(ctx context.Context, in *TLMediaUploadedDocumentMedia, opts ...grpc.CallOption) (*mtproto.MessageMedia, error)
	MediaGetDocument(ctx context.Context, in *TLMediaGetDocument, opts ...grpc.CallOption) (*mtproto.Document, error)
	MediaGetDocumentList(ctx context.Context, in *TLMediaGetDocumentList, opts ...grpc.CallOption) (*Vector_Document, error)
	MediaUploadEncryptedFile(ctx context.Context, in *TLMediaUploadEncryptedFile, opts ...grpc.CallOption) (*mtproto.EncryptedFile, error)
	MediaGetEncryptedFile(ctx context.Context, in *TLMediaGetEncryptedFile, opts ...grpc.CallOption) (*mtproto.EncryptedFile, error)
	MediaUploadWallPaperFile(ctx context.Context, in *TLMediaUploadWallPaperFile, opts ...grpc.CallOption) (*mtproto.Document, error)
	MediaUploadThemeFile(ctx context.Context, in *TLMediaUploadThemeFile, opts ...grpc.CallOption) (*mtproto.Document, error)
	MediaUploadStickerFile(ctx context.Context, in *TLMediaUploadStickerFile, opts ...grpc.CallOption) (*mtproto.Document, error)
	MediaUploadRingtoneFile(ctx context.Context, in *TLMediaUploadRingtoneFile, opts ...grpc.CallOption) (*mtproto.Document, error)
}

type rPCMediaClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCMediaClient(cc grpc.ClientConnInterface) RPCMediaClient {
	return &rPCMediaClient{cc}
}

func (c *rPCMediaClient) MediaUploadPhotoFile(ctx context.Context, in *TLMediaUploadPhotoFile, opts ...grpc.CallOption) (*mtproto.Photo, error) {
	out := new(mtproto.Photo)
	err := c.cc.Invoke(ctx, RPCMedia_MediaUploadPhotoFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMediaClient) MediaUploadProfilePhotoFile(ctx context.Context, in *TLMediaUploadProfilePhotoFile, opts ...grpc.CallOption) (*mtproto.Photo, error) {
	out := new(mtproto.Photo)
	err := c.cc.Invoke(ctx, RPCMedia_MediaUploadProfilePhotoFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMediaClient) MediaGetPhoto(ctx context.Context, in *TLMediaGetPhoto, opts ...grpc.CallOption) (*mtproto.Photo, error) {
	out := new(mtproto.Photo)
	err := c.cc.Invoke(ctx, RPCMedia_MediaGetPhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMediaClient) MediaGetPhotoSizeList(ctx context.Context, in *TLMediaGetPhotoSizeList, opts ...grpc.CallOption) (*PhotoSizeList, error) {
	out := new(PhotoSizeList)
	err := c.cc.Invoke(ctx, RPCMedia_MediaGetPhotoSizeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMediaClient) MediaGetPhotoSizeListList(ctx context.Context, in *TLMediaGetPhotoSizeListList, opts ...grpc.CallOption) (*Vector_PhotoSizeList, error) {
	out := new(Vector_PhotoSizeList)
	err := c.cc.Invoke(ctx, RPCMedia_MediaGetPhotoSizeListList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMediaClient) MediaGetVideoSizeList(ctx context.Context, in *TLMediaGetVideoSizeList, opts ...grpc.CallOption) (*VideoSizeList, error) {
	out := new(VideoSizeList)
	err := c.cc.Invoke(ctx, RPCMedia_MediaGetVideoSizeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMediaClient) MediaUploadedDocumentMedia(ctx context.Context, in *TLMediaUploadedDocumentMedia, opts ...grpc.CallOption) (*mtproto.MessageMedia, error) {
	out := new(mtproto.MessageMedia)
	err := c.cc.Invoke(ctx, RPCMedia_MediaUploadedDocumentMedia_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMediaClient) MediaGetDocument(ctx context.Context, in *TLMediaGetDocument, opts ...grpc.CallOption) (*mtproto.Document, error) {
	out := new(mtproto.Document)
	err := c.cc.Invoke(ctx, RPCMedia_MediaGetDocument_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMediaClient) MediaGetDocumentList(ctx context.Context, in *TLMediaGetDocumentList, opts ...grpc.CallOption) (*Vector_Document, error) {
	out := new(Vector_Document)
	err := c.cc.Invoke(ctx, RPCMedia_MediaGetDocumentList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMediaClient) MediaUploadEncryptedFile(ctx context.Context, in *TLMediaUploadEncryptedFile, opts ...grpc.CallOption) (*mtproto.EncryptedFile, error) {
	out := new(mtproto.EncryptedFile)
	err := c.cc.Invoke(ctx, RPCMedia_MediaUploadEncryptedFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMediaClient) MediaGetEncryptedFile(ctx context.Context, in *TLMediaGetEncryptedFile, opts ...grpc.CallOption) (*mtproto.EncryptedFile, error) {
	out := new(mtproto.EncryptedFile)
	err := c.cc.Invoke(ctx, RPCMedia_MediaGetEncryptedFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMediaClient) MediaUploadWallPaperFile(ctx context.Context, in *TLMediaUploadWallPaperFile, opts ...grpc.CallOption) (*mtproto.Document, error) {
	out := new(mtproto.Document)
	err := c.cc.Invoke(ctx, RPCMedia_MediaUploadWallPaperFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMediaClient) MediaUploadThemeFile(ctx context.Context, in *TLMediaUploadThemeFile, opts ...grpc.CallOption) (*mtproto.Document, error) {
	out := new(mtproto.Document)
	err := c.cc.Invoke(ctx, RPCMedia_MediaUploadThemeFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMediaClient) MediaUploadStickerFile(ctx context.Context, in *TLMediaUploadStickerFile, opts ...grpc.CallOption) (*mtproto.Document, error) {
	out := new(mtproto.Document)
	err := c.cc.Invoke(ctx, RPCMedia_MediaUploadStickerFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMediaClient) MediaUploadRingtoneFile(ctx context.Context, in *TLMediaUploadRingtoneFile, opts ...grpc.CallOption) (*mtproto.Document, error) {
	out := new(mtproto.Document)
	err := c.cc.Invoke(ctx, RPCMedia_MediaUploadRingtoneFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCMediaServer is the server API for RPCMedia service.
// All implementations should embed UnimplementedRPCMediaServer
// for forward compatibility
type RPCMediaServer interface {
	MediaUploadPhotoFile(context.Context, *TLMediaUploadPhotoFile) (*mtproto.Photo, error)
	MediaUploadProfilePhotoFile(context.Context, *TLMediaUploadProfilePhotoFile) (*mtproto.Photo, error)
	MediaGetPhoto(context.Context, *TLMediaGetPhoto) (*mtproto.Photo, error)
	MediaGetPhotoSizeList(context.Context, *TLMediaGetPhotoSizeList) (*PhotoSizeList, error)
	MediaGetPhotoSizeListList(context.Context, *TLMediaGetPhotoSizeListList) (*Vector_PhotoSizeList, error)
	MediaGetVideoSizeList(context.Context, *TLMediaGetVideoSizeList) (*VideoSizeList, error)
	MediaUploadedDocumentMedia(context.Context, *TLMediaUploadedDocumentMedia) (*mtproto.MessageMedia, error)
	MediaGetDocument(context.Context, *TLMediaGetDocument) (*mtproto.Document, error)
	MediaGetDocumentList(context.Context, *TLMediaGetDocumentList) (*Vector_Document, error)
	MediaUploadEncryptedFile(context.Context, *TLMediaUploadEncryptedFile) (*mtproto.EncryptedFile, error)
	MediaGetEncryptedFile(context.Context, *TLMediaGetEncryptedFile) (*mtproto.EncryptedFile, error)
	MediaUploadWallPaperFile(context.Context, *TLMediaUploadWallPaperFile) (*mtproto.Document, error)
	MediaUploadThemeFile(context.Context, *TLMediaUploadThemeFile) (*mtproto.Document, error)
	MediaUploadStickerFile(context.Context, *TLMediaUploadStickerFile) (*mtproto.Document, error)
	MediaUploadRingtoneFile(context.Context, *TLMediaUploadRingtoneFile) (*mtproto.Document, error)
}

// UnimplementedRPCMediaServer should be embedded to have forward compatible implementations.
type UnimplementedRPCMediaServer struct {
}

func (UnimplementedRPCMediaServer) MediaUploadPhotoFile(context.Context, *TLMediaUploadPhotoFile) (*mtproto.Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaUploadPhotoFile not implemented")
}
func (UnimplementedRPCMediaServer) MediaUploadProfilePhotoFile(context.Context, *TLMediaUploadProfilePhotoFile) (*mtproto.Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaUploadProfilePhotoFile not implemented")
}
func (UnimplementedRPCMediaServer) MediaGetPhoto(context.Context, *TLMediaGetPhoto) (*mtproto.Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaGetPhoto not implemented")
}
func (UnimplementedRPCMediaServer) MediaGetPhotoSizeList(context.Context, *TLMediaGetPhotoSizeList) (*PhotoSizeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaGetPhotoSizeList not implemented")
}
func (UnimplementedRPCMediaServer) MediaGetPhotoSizeListList(context.Context, *TLMediaGetPhotoSizeListList) (*Vector_PhotoSizeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaGetPhotoSizeListList not implemented")
}
func (UnimplementedRPCMediaServer) MediaGetVideoSizeList(context.Context, *TLMediaGetVideoSizeList) (*VideoSizeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaGetVideoSizeList not implemented")
}
func (UnimplementedRPCMediaServer) MediaUploadedDocumentMedia(context.Context, *TLMediaUploadedDocumentMedia) (*mtproto.MessageMedia, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaUploadedDocumentMedia not implemented")
}
func (UnimplementedRPCMediaServer) MediaGetDocument(context.Context, *TLMediaGetDocument) (*mtproto.Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaGetDocument not implemented")
}
func (UnimplementedRPCMediaServer) MediaGetDocumentList(context.Context, *TLMediaGetDocumentList) (*Vector_Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaGetDocumentList not implemented")
}
func (UnimplementedRPCMediaServer) MediaUploadEncryptedFile(context.Context, *TLMediaUploadEncryptedFile) (*mtproto.EncryptedFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaUploadEncryptedFile not implemented")
}
func (UnimplementedRPCMediaServer) MediaGetEncryptedFile(context.Context, *TLMediaGetEncryptedFile) (*mtproto.EncryptedFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaGetEncryptedFile not implemented")
}
func (UnimplementedRPCMediaServer) MediaUploadWallPaperFile(context.Context, *TLMediaUploadWallPaperFile) (*mtproto.Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaUploadWallPaperFile not implemented")
}
func (UnimplementedRPCMediaServer) MediaUploadThemeFile(context.Context, *TLMediaUploadThemeFile) (*mtproto.Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaUploadThemeFile not implemented")
}
func (UnimplementedRPCMediaServer) MediaUploadStickerFile(context.Context, *TLMediaUploadStickerFile) (*mtproto.Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaUploadStickerFile not implemented")
}
func (UnimplementedRPCMediaServer) MediaUploadRingtoneFile(context.Context, *TLMediaUploadRingtoneFile) (*mtproto.Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaUploadRingtoneFile not implemented")
}

// UnsafeRPCMediaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCMediaServer will
// result in compilation errors.
type UnsafeRPCMediaServer interface {
	mustEmbedUnimplementedRPCMediaServer()
}

func RegisterRPCMediaServer(s grpc.ServiceRegistrar, srv RPCMediaServer) {
	s.RegisterService(&RPCMedia_ServiceDesc, srv)
}

func _RPCMedia_MediaUploadPhotoFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMediaUploadPhotoFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMediaServer).MediaUploadPhotoFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMedia_MediaUploadPhotoFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMediaServer).MediaUploadPhotoFile(ctx, req.(*TLMediaUploadPhotoFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMedia_MediaUploadProfilePhotoFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMediaUploadProfilePhotoFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMediaServer).MediaUploadProfilePhotoFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMedia_MediaUploadProfilePhotoFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMediaServer).MediaUploadProfilePhotoFile(ctx, req.(*TLMediaUploadProfilePhotoFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMedia_MediaGetPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMediaGetPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMediaServer).MediaGetPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMedia_MediaGetPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMediaServer).MediaGetPhoto(ctx, req.(*TLMediaGetPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMedia_MediaGetPhotoSizeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMediaGetPhotoSizeList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMediaServer).MediaGetPhotoSizeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMedia_MediaGetPhotoSizeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMediaServer).MediaGetPhotoSizeList(ctx, req.(*TLMediaGetPhotoSizeList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMedia_MediaGetPhotoSizeListList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMediaGetPhotoSizeListList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMediaServer).MediaGetPhotoSizeListList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMedia_MediaGetPhotoSizeListList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMediaServer).MediaGetPhotoSizeListList(ctx, req.(*TLMediaGetPhotoSizeListList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMedia_MediaGetVideoSizeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMediaGetVideoSizeList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMediaServer).MediaGetVideoSizeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMedia_MediaGetVideoSizeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMediaServer).MediaGetVideoSizeList(ctx, req.(*TLMediaGetVideoSizeList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMedia_MediaUploadedDocumentMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMediaUploadedDocumentMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMediaServer).MediaUploadedDocumentMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMedia_MediaUploadedDocumentMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMediaServer).MediaUploadedDocumentMedia(ctx, req.(*TLMediaUploadedDocumentMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMedia_MediaGetDocument_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMediaGetDocument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMediaServer).MediaGetDocument(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMedia_MediaGetDocument_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMediaServer).MediaGetDocument(ctx, req.(*TLMediaGetDocument))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMedia_MediaGetDocumentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMediaGetDocumentList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMediaServer).MediaGetDocumentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMedia_MediaGetDocumentList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMediaServer).MediaGetDocumentList(ctx, req.(*TLMediaGetDocumentList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMedia_MediaUploadEncryptedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMediaUploadEncryptedFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMediaServer).MediaUploadEncryptedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMedia_MediaUploadEncryptedFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMediaServer).MediaUploadEncryptedFile(ctx, req.(*TLMediaUploadEncryptedFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMedia_MediaGetEncryptedFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMediaGetEncryptedFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMediaServer).MediaGetEncryptedFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMedia_MediaGetEncryptedFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMediaServer).MediaGetEncryptedFile(ctx, req.(*TLMediaGetEncryptedFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMedia_MediaUploadWallPaperFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMediaUploadWallPaperFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMediaServer).MediaUploadWallPaperFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMedia_MediaUploadWallPaperFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMediaServer).MediaUploadWallPaperFile(ctx, req.(*TLMediaUploadWallPaperFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMedia_MediaUploadThemeFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMediaUploadThemeFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMediaServer).MediaUploadThemeFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMedia_MediaUploadThemeFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMediaServer).MediaUploadThemeFile(ctx, req.(*TLMediaUploadThemeFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMedia_MediaUploadStickerFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMediaUploadStickerFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMediaServer).MediaUploadStickerFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMedia_MediaUploadStickerFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMediaServer).MediaUploadStickerFile(ctx, req.(*TLMediaUploadStickerFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMedia_MediaUploadRingtoneFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMediaUploadRingtoneFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMediaServer).MediaUploadRingtoneFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMedia_MediaUploadRingtoneFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMediaServer).MediaUploadRingtoneFile(ctx, req.(*TLMediaUploadRingtoneFile))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCMedia_ServiceDesc is the grpc.ServiceDesc for RPCMedia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCMedia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media.RPCMedia",
	HandlerType: (*RPCMediaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "media_uploadPhotoFile",
			Handler:    _RPCMedia_MediaUploadPhotoFile_Handler,
		},
		{
			MethodName: "media_uploadProfilePhotoFile",
			Handler:    _RPCMedia_MediaUploadProfilePhotoFile_Handler,
		},
		{
			MethodName: "media_getPhoto",
			Handler:    _RPCMedia_MediaGetPhoto_Handler,
		},
		{
			MethodName: "media_getPhotoSizeList",
			Handler:    _RPCMedia_MediaGetPhotoSizeList_Handler,
		},
		{
			MethodName: "media_getPhotoSizeListList",
			Handler:    _RPCMedia_MediaGetPhotoSizeListList_Handler,
		},
		{
			MethodName: "media_getVideoSizeList",
			Handler:    _RPCMedia_MediaGetVideoSizeList_Handler,
		},
		{
			MethodName: "media_uploadedDocumentMedia",
			Handler:    _RPCMedia_MediaUploadedDocumentMedia_Handler,
		},
		{
			MethodName: "media_getDocument",
			Handler:    _RPCMedia_MediaGetDocument_Handler,
		},
		{
			MethodName: "media_getDocumentList",
			Handler:    _RPCMedia_MediaGetDocumentList_Handler,
		},
		{
			MethodName: "media_uploadEncryptedFile",
			Handler:    _RPCMedia_MediaUploadEncryptedFile_Handler,
		},
		{
			MethodName: "media_getEncryptedFile",
			Handler:    _RPCMedia_MediaGetEncryptedFile_Handler,
		},
		{
			MethodName: "media_uploadWallPaperFile",
			Handler:    _RPCMedia_MediaUploadWallPaperFile_Handler,
		},
		{
			MethodName: "media_uploadThemeFile",
			Handler:    _RPCMedia_MediaUploadThemeFile_Handler,
		},
		{
			MethodName: "media_uploadStickerFile",
			Handler:    _RPCMedia_MediaUploadStickerFile_Handler,
		},
		{
			MethodName: "media_uploadRingtoneFile",
			Handler:    _RPCMedia_MediaUploadRingtoneFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media.tl.proto",
}
