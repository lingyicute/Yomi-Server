//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: dialog.tl.proto

package dialog

import (
	context "context"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPCDialog_DialogSaveDraftMessage_FullMethodName                  = "/dialog.RPCDialog/dialog_saveDraftMessage"
	RPCDialog_DialogClearDraftMessage_FullMethodName                 = "/dialog.RPCDialog/dialog_clearDraftMessage"
	RPCDialog_DialogGetAllDrafts_FullMethodName                      = "/dialog.RPCDialog/dialog_getAllDrafts"
	RPCDialog_DialogClearAllDrafts_FullMethodName                    = "/dialog.RPCDialog/dialog_clearAllDrafts"
	RPCDialog_DialogMarkDialogUnread_FullMethodName                  = "/dialog.RPCDialog/dialog_markDialogUnread"
	RPCDialog_DialogToggleDialogPin_FullMethodName                   = "/dialog.RPCDialog/dialog_toggleDialogPin"
	RPCDialog_DialogGetDialogUnreadMarkList_FullMethodName           = "/dialog.RPCDialog/dialog_getDialogUnreadMarkList"
	RPCDialog_DialogGetDialogsByOffsetDate_FullMethodName            = "/dialog.RPCDialog/dialog_getDialogsByOffsetDate"
	RPCDialog_DialogGetDialogs_FullMethodName                        = "/dialog.RPCDialog/dialog_getDialogs"
	RPCDialog_DialogGetDialogsByIdList_FullMethodName                = "/dialog.RPCDialog/dialog_getDialogsByIdList"
	RPCDialog_DialogGetDialogsCount_FullMethodName                   = "/dialog.RPCDialog/dialog_getDialogsCount"
	RPCDialog_DialogGetPinnedDialogs_FullMethodName                  = "/dialog.RPCDialog/dialog_getPinnedDialogs"
	RPCDialog_DialogReorderPinnedDialogs_FullMethodName              = "/dialog.RPCDialog/dialog_reorderPinnedDialogs"
	RPCDialog_DialogGetDialogById_FullMethodName                     = "/dialog.RPCDialog/dialog_getDialogById"
	RPCDialog_DialogGetTopMessage_FullMethodName                     = "/dialog.RPCDialog/dialog_getTopMessage"
	RPCDialog_DialogUpdateReadInbox_FullMethodName                   = "/dialog.RPCDialog/dialog_updateReadInbox"
	RPCDialog_DialogUpdateReadOutbox_FullMethodName                  = "/dialog.RPCDialog/dialog_updateReadOutbox"
	RPCDialog_DialogInsertOrUpdateDialog_FullMethodName              = "/dialog.RPCDialog/dialog_insertOrUpdateDialog"
	RPCDialog_DialogDeleteDialog_FullMethodName                      = "/dialog.RPCDialog/dialog_deleteDialog"
	RPCDialog_DialogGetUserPinnedMessage_FullMethodName              = "/dialog.RPCDialog/dialog_getUserPinnedMessage"
	RPCDialog_DialogUpdateUserPinnedMessage_FullMethodName           = "/dialog.RPCDialog/dialog_updateUserPinnedMessage"
	RPCDialog_DialogInsertOrUpdateDialogFilter_FullMethodName        = "/dialog.RPCDialog/dialog_insertOrUpdateDialogFilter"
	RPCDialog_DialogDeleteDialogFilter_FullMethodName                = "/dialog.RPCDialog/dialog_deleteDialogFilter"
	RPCDialog_DialogUpdateDialogFiltersOrder_FullMethodName          = "/dialog.RPCDialog/dialog_updateDialogFiltersOrder"
	RPCDialog_DialogGetDialogFilters_FullMethodName                  = "/dialog.RPCDialog/dialog_getDialogFilters"
	RPCDialog_DialogGetDialogFolder_FullMethodName                   = "/dialog.RPCDialog/dialog_getDialogFolder"
	RPCDialog_DialogEditPeerFolders_FullMethodName                   = "/dialog.RPCDialog/dialog_editPeerFolders"
	RPCDialog_DialogGetChannelMessageReadParticipants_FullMethodName = "/dialog.RPCDialog/dialog_getChannelMessageReadParticipants"
	RPCDialog_DialogSetChatTheme_FullMethodName                      = "/dialog.RPCDialog/dialog_setChatTheme"
	RPCDialog_DialogSetHistoryTTL_FullMethodName                     = "/dialog.RPCDialog/dialog_setHistoryTTL"
	RPCDialog_DialogGetMyDialogsData_FullMethodName                  = "/dialog.RPCDialog/dialog_getMyDialogsData"
	RPCDialog_DialogGetSavedDialogs_FullMethodName                   = "/dialog.RPCDialog/dialog_getSavedDialogs"
	RPCDialog_DialogGetPinnedSavedDialogs_FullMethodName             = "/dialog.RPCDialog/dialog_getPinnedSavedDialogs"
	RPCDialog_DialogToggleSavedDialogPin_FullMethodName              = "/dialog.RPCDialog/dialog_toggleSavedDialogPin"
	RPCDialog_DialogReorderPinnedSavedDialogs_FullMethodName         = "/dialog.RPCDialog/dialog_reorderPinnedSavedDialogs"
	RPCDialog_DialogGetDialogFilter_FullMethodName                   = "/dialog.RPCDialog/dialog_getDialogFilter"
	RPCDialog_DialogGetDialogFilterBySlug_FullMethodName             = "/dialog.RPCDialog/dialog_getDialogFilterBySlug"
	RPCDialog_DialogCreateDialogFilter_FullMethodName                = "/dialog.RPCDialog/dialog_createDialogFilter"
	RPCDialog_DialogUpdateUnreadCount_FullMethodName                 = "/dialog.RPCDialog/dialog_updateUnreadCount"
)

// RPCDialogClient is the client API for RPCDialog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCDialogClient interface {
	DialogSaveDraftMessage(ctx context.Context, in *TLDialogSaveDraftMessage, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogClearDraftMessage(ctx context.Context, in *TLDialogClearDraftMessage, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogGetAllDrafts(ctx context.Context, in *TLDialogGetAllDrafts, opts ...grpc.CallOption) (*Vector_PeerWithDraftMessage, error)
	DialogClearAllDrafts(ctx context.Context, in *TLDialogClearAllDrafts, opts ...grpc.CallOption) (*Vector_PeerWithDraftMessage, error)
	DialogMarkDialogUnread(ctx context.Context, in *TLDialogMarkDialogUnread, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogToggleDialogPin(ctx context.Context, in *TLDialogToggleDialogPin, opts ...grpc.CallOption) (*mtproto.Int32, error)
	DialogGetDialogUnreadMarkList(ctx context.Context, in *TLDialogGetDialogUnreadMarkList, opts ...grpc.CallOption) (*Vector_DialogPeer, error)
	DialogGetDialogsByOffsetDate(ctx context.Context, in *TLDialogGetDialogsByOffsetDate, opts ...grpc.CallOption) (*Vector_DialogExt, error)
	DialogGetDialogs(ctx context.Context, in *TLDialogGetDialogs, opts ...grpc.CallOption) (*Vector_DialogExt, error)
	DialogGetDialogsByIdList(ctx context.Context, in *TLDialogGetDialogsByIdList, opts ...grpc.CallOption) (*Vector_DialogExt, error)
	DialogGetDialogsCount(ctx context.Context, in *TLDialogGetDialogsCount, opts ...grpc.CallOption) (*mtproto.Int32, error)
	DialogGetPinnedDialogs(ctx context.Context, in *TLDialogGetPinnedDialogs, opts ...grpc.CallOption) (*Vector_DialogExt, error)
	DialogReorderPinnedDialogs(ctx context.Context, in *TLDialogReorderPinnedDialogs, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogGetDialogById(ctx context.Context, in *TLDialogGetDialogById, opts ...grpc.CallOption) (*DialogExt, error)
	DialogGetTopMessage(ctx context.Context, in *TLDialogGetTopMessage, opts ...grpc.CallOption) (*mtproto.Int32, error)
	DialogUpdateReadInbox(ctx context.Context, in *TLDialogUpdateReadInbox, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogUpdateReadOutbox(ctx context.Context, in *TLDialogUpdateReadOutbox, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogInsertOrUpdateDialog(ctx context.Context, in *TLDialogInsertOrUpdateDialog, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogDeleteDialog(ctx context.Context, in *TLDialogDeleteDialog, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogGetUserPinnedMessage(ctx context.Context, in *TLDialogGetUserPinnedMessage, opts ...grpc.CallOption) (*mtproto.Int32, error)
	DialogUpdateUserPinnedMessage(ctx context.Context, in *TLDialogUpdateUserPinnedMessage, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogInsertOrUpdateDialogFilter(ctx context.Context, in *TLDialogInsertOrUpdateDialogFilter, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogDeleteDialogFilter(ctx context.Context, in *TLDialogDeleteDialogFilter, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogUpdateDialogFiltersOrder(ctx context.Context, in *TLDialogUpdateDialogFiltersOrder, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogGetDialogFilters(ctx context.Context, in *TLDialogGetDialogFilters, opts ...grpc.CallOption) (*Vector_DialogFilterExt, error)
	DialogGetDialogFolder(ctx context.Context, in *TLDialogGetDialogFolder, opts ...grpc.CallOption) (*Vector_DialogExt, error)
	DialogEditPeerFolders(ctx context.Context, in *TLDialogEditPeerFolders, opts ...grpc.CallOption) (*Vector_DialogPinnedExt, error)
	DialogGetChannelMessageReadParticipants(ctx context.Context, in *TLDialogGetChannelMessageReadParticipants, opts ...grpc.CallOption) (*Vector_Long, error)
	DialogSetChatTheme(ctx context.Context, in *TLDialogSetChatTheme, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogSetHistoryTTL(ctx context.Context, in *TLDialogSetHistoryTTL, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogGetMyDialogsData(ctx context.Context, in *TLDialogGetMyDialogsData, opts ...grpc.CallOption) (*DialogsData, error)
	DialogGetSavedDialogs(ctx context.Context, in *TLDialogGetSavedDialogs, opts ...grpc.CallOption) (*SavedDialogList, error)
	DialogGetPinnedSavedDialogs(ctx context.Context, in *TLDialogGetPinnedSavedDialogs, opts ...grpc.CallOption) (*SavedDialogList, error)
	DialogToggleSavedDialogPin(ctx context.Context, in *TLDialogToggleSavedDialogPin, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogReorderPinnedSavedDialogs(ctx context.Context, in *TLDialogReorderPinnedSavedDialogs, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DialogGetDialogFilter(ctx context.Context, in *TLDialogGetDialogFilter, opts ...grpc.CallOption) (*DialogFilterExt, error)
	DialogGetDialogFilterBySlug(ctx context.Context, in *TLDialogGetDialogFilterBySlug, opts ...grpc.CallOption) (*DialogFilterExt, error)
	DialogCreateDialogFilter(ctx context.Context, in *TLDialogCreateDialogFilter, opts ...grpc.CallOption) (*DialogFilterExt, error)
	DialogUpdateUnreadCount(ctx context.Context, in *TLDialogUpdateUnreadCount, opts ...grpc.CallOption) (*mtproto.Bool, error)
}

type rPCDialogClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCDialogClient(cc grpc.ClientConnInterface) RPCDialogClient {
	return &rPCDialogClient{cc}
}

func (c *rPCDialogClient) DialogSaveDraftMessage(ctx context.Context, in *TLDialogSaveDraftMessage, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogSaveDraftMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogClearDraftMessage(ctx context.Context, in *TLDialogClearDraftMessage, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogClearDraftMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetAllDrafts(ctx context.Context, in *TLDialogGetAllDrafts, opts ...grpc.CallOption) (*Vector_PeerWithDraftMessage, error) {
	out := new(Vector_PeerWithDraftMessage)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetAllDrafts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogClearAllDrafts(ctx context.Context, in *TLDialogClearAllDrafts, opts ...grpc.CallOption) (*Vector_PeerWithDraftMessage, error) {
	out := new(Vector_PeerWithDraftMessage)
	err := c.cc.Invoke(ctx, RPCDialog_DialogClearAllDrafts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogMarkDialogUnread(ctx context.Context, in *TLDialogMarkDialogUnread, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogMarkDialogUnread_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogToggleDialogPin(ctx context.Context, in *TLDialogToggleDialogPin, opts ...grpc.CallOption) (*mtproto.Int32, error) {
	out := new(mtproto.Int32)
	err := c.cc.Invoke(ctx, RPCDialog_DialogToggleDialogPin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogUnreadMarkList(ctx context.Context, in *TLDialogGetDialogUnreadMarkList, opts ...grpc.CallOption) (*Vector_DialogPeer, error) {
	out := new(Vector_DialogPeer)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetDialogUnreadMarkList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogsByOffsetDate(ctx context.Context, in *TLDialogGetDialogsByOffsetDate, opts ...grpc.CallOption) (*Vector_DialogExt, error) {
	out := new(Vector_DialogExt)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetDialogsByOffsetDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogs(ctx context.Context, in *TLDialogGetDialogs, opts ...grpc.CallOption) (*Vector_DialogExt, error) {
	out := new(Vector_DialogExt)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetDialogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogsByIdList(ctx context.Context, in *TLDialogGetDialogsByIdList, opts ...grpc.CallOption) (*Vector_DialogExt, error) {
	out := new(Vector_DialogExt)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetDialogsByIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogsCount(ctx context.Context, in *TLDialogGetDialogsCount, opts ...grpc.CallOption) (*mtproto.Int32, error) {
	out := new(mtproto.Int32)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetDialogsCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetPinnedDialogs(ctx context.Context, in *TLDialogGetPinnedDialogs, opts ...grpc.CallOption) (*Vector_DialogExt, error) {
	out := new(Vector_DialogExt)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetPinnedDialogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogReorderPinnedDialogs(ctx context.Context, in *TLDialogReorderPinnedDialogs, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogReorderPinnedDialogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogById(ctx context.Context, in *TLDialogGetDialogById, opts ...grpc.CallOption) (*DialogExt, error) {
	out := new(DialogExt)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetDialogById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetTopMessage(ctx context.Context, in *TLDialogGetTopMessage, opts ...grpc.CallOption) (*mtproto.Int32, error) {
	out := new(mtproto.Int32)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetTopMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogUpdateReadInbox(ctx context.Context, in *TLDialogUpdateReadInbox, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogUpdateReadInbox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogUpdateReadOutbox(ctx context.Context, in *TLDialogUpdateReadOutbox, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogUpdateReadOutbox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogInsertOrUpdateDialog(ctx context.Context, in *TLDialogInsertOrUpdateDialog, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogInsertOrUpdateDialog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogDeleteDialog(ctx context.Context, in *TLDialogDeleteDialog, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogDeleteDialog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetUserPinnedMessage(ctx context.Context, in *TLDialogGetUserPinnedMessage, opts ...grpc.CallOption) (*mtproto.Int32, error) {
	out := new(mtproto.Int32)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetUserPinnedMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogUpdateUserPinnedMessage(ctx context.Context, in *TLDialogUpdateUserPinnedMessage, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogUpdateUserPinnedMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogInsertOrUpdateDialogFilter(ctx context.Context, in *TLDialogInsertOrUpdateDialogFilter, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogInsertOrUpdateDialogFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogDeleteDialogFilter(ctx context.Context, in *TLDialogDeleteDialogFilter, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogDeleteDialogFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogUpdateDialogFiltersOrder(ctx context.Context, in *TLDialogUpdateDialogFiltersOrder, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogUpdateDialogFiltersOrder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogFilters(ctx context.Context, in *TLDialogGetDialogFilters, opts ...grpc.CallOption) (*Vector_DialogFilterExt, error) {
	out := new(Vector_DialogFilterExt)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetDialogFilters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogFolder(ctx context.Context, in *TLDialogGetDialogFolder, opts ...grpc.CallOption) (*Vector_DialogExt, error) {
	out := new(Vector_DialogExt)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetDialogFolder_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogEditPeerFolders(ctx context.Context, in *TLDialogEditPeerFolders, opts ...grpc.CallOption) (*Vector_DialogPinnedExt, error) {
	out := new(Vector_DialogPinnedExt)
	err := c.cc.Invoke(ctx, RPCDialog_DialogEditPeerFolders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetChannelMessageReadParticipants(ctx context.Context, in *TLDialogGetChannelMessageReadParticipants, opts ...grpc.CallOption) (*Vector_Long, error) {
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetChannelMessageReadParticipants_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogSetChatTheme(ctx context.Context, in *TLDialogSetChatTheme, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogSetChatTheme_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogSetHistoryTTL(ctx context.Context, in *TLDialogSetHistoryTTL, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogSetHistoryTTL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetMyDialogsData(ctx context.Context, in *TLDialogGetMyDialogsData, opts ...grpc.CallOption) (*DialogsData, error) {
	out := new(DialogsData)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetMyDialogsData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetSavedDialogs(ctx context.Context, in *TLDialogGetSavedDialogs, opts ...grpc.CallOption) (*SavedDialogList, error) {
	out := new(SavedDialogList)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetSavedDialogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetPinnedSavedDialogs(ctx context.Context, in *TLDialogGetPinnedSavedDialogs, opts ...grpc.CallOption) (*SavedDialogList, error) {
	out := new(SavedDialogList)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetPinnedSavedDialogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogToggleSavedDialogPin(ctx context.Context, in *TLDialogToggleSavedDialogPin, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogToggleSavedDialogPin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogReorderPinnedSavedDialogs(ctx context.Context, in *TLDialogReorderPinnedSavedDialogs, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogReorderPinnedSavedDialogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogFilter(ctx context.Context, in *TLDialogGetDialogFilter, opts ...grpc.CallOption) (*DialogFilterExt, error) {
	out := new(DialogFilterExt)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetDialogFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogGetDialogFilterBySlug(ctx context.Context, in *TLDialogGetDialogFilterBySlug, opts ...grpc.CallOption) (*DialogFilterExt, error) {
	out := new(DialogFilterExt)
	err := c.cc.Invoke(ctx, RPCDialog_DialogGetDialogFilterBySlug_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogCreateDialogFilter(ctx context.Context, in *TLDialogCreateDialogFilter, opts ...grpc.CallOption) (*DialogFilterExt, error) {
	out := new(DialogFilterExt)
	err := c.cc.Invoke(ctx, RPCDialog_DialogCreateDialogFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDialogClient) DialogUpdateUnreadCount(ctx context.Context, in *TLDialogUpdateUnreadCount, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDialog_DialogUpdateUnreadCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCDialogServer is the server API for RPCDialog service.
// All implementations should embed UnimplementedRPCDialogServer
// for forward compatibility
type RPCDialogServer interface {
	DialogSaveDraftMessage(context.Context, *TLDialogSaveDraftMessage) (*mtproto.Bool, error)
	DialogClearDraftMessage(context.Context, *TLDialogClearDraftMessage) (*mtproto.Bool, error)
	DialogGetAllDrafts(context.Context, *TLDialogGetAllDrafts) (*Vector_PeerWithDraftMessage, error)
	DialogClearAllDrafts(context.Context, *TLDialogClearAllDrafts) (*Vector_PeerWithDraftMessage, error)
	DialogMarkDialogUnread(context.Context, *TLDialogMarkDialogUnread) (*mtproto.Bool, error)
	DialogToggleDialogPin(context.Context, *TLDialogToggleDialogPin) (*mtproto.Int32, error)
	DialogGetDialogUnreadMarkList(context.Context, *TLDialogGetDialogUnreadMarkList) (*Vector_DialogPeer, error)
	DialogGetDialogsByOffsetDate(context.Context, *TLDialogGetDialogsByOffsetDate) (*Vector_DialogExt, error)
	DialogGetDialogs(context.Context, *TLDialogGetDialogs) (*Vector_DialogExt, error)
	DialogGetDialogsByIdList(context.Context, *TLDialogGetDialogsByIdList) (*Vector_DialogExt, error)
	DialogGetDialogsCount(context.Context, *TLDialogGetDialogsCount) (*mtproto.Int32, error)
	DialogGetPinnedDialogs(context.Context, *TLDialogGetPinnedDialogs) (*Vector_DialogExt, error)
	DialogReorderPinnedDialogs(context.Context, *TLDialogReorderPinnedDialogs) (*mtproto.Bool, error)
	DialogGetDialogById(context.Context, *TLDialogGetDialogById) (*DialogExt, error)
	DialogGetTopMessage(context.Context, *TLDialogGetTopMessage) (*mtproto.Int32, error)
	DialogUpdateReadInbox(context.Context, *TLDialogUpdateReadInbox) (*mtproto.Bool, error)
	DialogUpdateReadOutbox(context.Context, *TLDialogUpdateReadOutbox) (*mtproto.Bool, error)
	DialogInsertOrUpdateDialog(context.Context, *TLDialogInsertOrUpdateDialog) (*mtproto.Bool, error)
	DialogDeleteDialog(context.Context, *TLDialogDeleteDialog) (*mtproto.Bool, error)
	DialogGetUserPinnedMessage(context.Context, *TLDialogGetUserPinnedMessage) (*mtproto.Int32, error)
	DialogUpdateUserPinnedMessage(context.Context, *TLDialogUpdateUserPinnedMessage) (*mtproto.Bool, error)
	DialogInsertOrUpdateDialogFilter(context.Context, *TLDialogInsertOrUpdateDialogFilter) (*mtproto.Bool, error)
	DialogDeleteDialogFilter(context.Context, *TLDialogDeleteDialogFilter) (*mtproto.Bool, error)
	DialogUpdateDialogFiltersOrder(context.Context, *TLDialogUpdateDialogFiltersOrder) (*mtproto.Bool, error)
	DialogGetDialogFilters(context.Context, *TLDialogGetDialogFilters) (*Vector_DialogFilterExt, error)
	DialogGetDialogFolder(context.Context, *TLDialogGetDialogFolder) (*Vector_DialogExt, error)
	DialogEditPeerFolders(context.Context, *TLDialogEditPeerFolders) (*Vector_DialogPinnedExt, error)
	DialogGetChannelMessageReadParticipants(context.Context, *TLDialogGetChannelMessageReadParticipants) (*Vector_Long, error)
	DialogSetChatTheme(context.Context, *TLDialogSetChatTheme) (*mtproto.Bool, error)
	DialogSetHistoryTTL(context.Context, *TLDialogSetHistoryTTL) (*mtproto.Bool, error)
	DialogGetMyDialogsData(context.Context, *TLDialogGetMyDialogsData) (*DialogsData, error)
	DialogGetSavedDialogs(context.Context, *TLDialogGetSavedDialogs) (*SavedDialogList, error)
	DialogGetPinnedSavedDialogs(context.Context, *TLDialogGetPinnedSavedDialogs) (*SavedDialogList, error)
	DialogToggleSavedDialogPin(context.Context, *TLDialogToggleSavedDialogPin) (*mtproto.Bool, error)
	DialogReorderPinnedSavedDialogs(context.Context, *TLDialogReorderPinnedSavedDialogs) (*mtproto.Bool, error)
	DialogGetDialogFilter(context.Context, *TLDialogGetDialogFilter) (*DialogFilterExt, error)
	DialogGetDialogFilterBySlug(context.Context, *TLDialogGetDialogFilterBySlug) (*DialogFilterExt, error)
	DialogCreateDialogFilter(context.Context, *TLDialogCreateDialogFilter) (*DialogFilterExt, error)
	DialogUpdateUnreadCount(context.Context, *TLDialogUpdateUnreadCount) (*mtproto.Bool, error)
}

// UnimplementedRPCDialogServer should be embedded to have forward compatible implementations.
type UnimplementedRPCDialogServer struct {
}

func (UnimplementedRPCDialogServer) DialogSaveDraftMessage(context.Context, *TLDialogSaveDraftMessage) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogSaveDraftMessage not implemented")
}
func (UnimplementedRPCDialogServer) DialogClearDraftMessage(context.Context, *TLDialogClearDraftMessage) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogClearDraftMessage not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetAllDrafts(context.Context, *TLDialogGetAllDrafts) (*Vector_PeerWithDraftMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetAllDrafts not implemented")
}
func (UnimplementedRPCDialogServer) DialogClearAllDrafts(context.Context, *TLDialogClearAllDrafts) (*Vector_PeerWithDraftMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogClearAllDrafts not implemented")
}
func (UnimplementedRPCDialogServer) DialogMarkDialogUnread(context.Context, *TLDialogMarkDialogUnread) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogMarkDialogUnread not implemented")
}
func (UnimplementedRPCDialogServer) DialogToggleDialogPin(context.Context, *TLDialogToggleDialogPin) (*mtproto.Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogToggleDialogPin not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetDialogUnreadMarkList(context.Context, *TLDialogGetDialogUnreadMarkList) (*Vector_DialogPeer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogUnreadMarkList not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetDialogsByOffsetDate(context.Context, *TLDialogGetDialogsByOffsetDate) (*Vector_DialogExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogsByOffsetDate not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetDialogs(context.Context, *TLDialogGetDialogs) (*Vector_DialogExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogs not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetDialogsByIdList(context.Context, *TLDialogGetDialogsByIdList) (*Vector_DialogExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogsByIdList not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetDialogsCount(context.Context, *TLDialogGetDialogsCount) (*mtproto.Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogsCount not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetPinnedDialogs(context.Context, *TLDialogGetPinnedDialogs) (*Vector_DialogExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetPinnedDialogs not implemented")
}
func (UnimplementedRPCDialogServer) DialogReorderPinnedDialogs(context.Context, *TLDialogReorderPinnedDialogs) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogReorderPinnedDialogs not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetDialogById(context.Context, *TLDialogGetDialogById) (*DialogExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogById not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetTopMessage(context.Context, *TLDialogGetTopMessage) (*mtproto.Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetTopMessage not implemented")
}
func (UnimplementedRPCDialogServer) DialogUpdateReadInbox(context.Context, *TLDialogUpdateReadInbox) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogUpdateReadInbox not implemented")
}
func (UnimplementedRPCDialogServer) DialogUpdateReadOutbox(context.Context, *TLDialogUpdateReadOutbox) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogUpdateReadOutbox not implemented")
}
func (UnimplementedRPCDialogServer) DialogInsertOrUpdateDialog(context.Context, *TLDialogInsertOrUpdateDialog) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogInsertOrUpdateDialog not implemented")
}
func (UnimplementedRPCDialogServer) DialogDeleteDialog(context.Context, *TLDialogDeleteDialog) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogDeleteDialog not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetUserPinnedMessage(context.Context, *TLDialogGetUserPinnedMessage) (*mtproto.Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetUserPinnedMessage not implemented")
}
func (UnimplementedRPCDialogServer) DialogUpdateUserPinnedMessage(context.Context, *TLDialogUpdateUserPinnedMessage) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogUpdateUserPinnedMessage not implemented")
}
func (UnimplementedRPCDialogServer) DialogInsertOrUpdateDialogFilter(context.Context, *TLDialogInsertOrUpdateDialogFilter) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogInsertOrUpdateDialogFilter not implemented")
}
func (UnimplementedRPCDialogServer) DialogDeleteDialogFilter(context.Context, *TLDialogDeleteDialogFilter) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogDeleteDialogFilter not implemented")
}
func (UnimplementedRPCDialogServer) DialogUpdateDialogFiltersOrder(context.Context, *TLDialogUpdateDialogFiltersOrder) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogUpdateDialogFiltersOrder not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetDialogFilters(context.Context, *TLDialogGetDialogFilters) (*Vector_DialogFilterExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogFilters not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetDialogFolder(context.Context, *TLDialogGetDialogFolder) (*Vector_DialogExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogFolder not implemented")
}
func (UnimplementedRPCDialogServer) DialogEditPeerFolders(context.Context, *TLDialogEditPeerFolders) (*Vector_DialogPinnedExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogEditPeerFolders not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetChannelMessageReadParticipants(context.Context, *TLDialogGetChannelMessageReadParticipants) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetChannelMessageReadParticipants not implemented")
}
func (UnimplementedRPCDialogServer) DialogSetChatTheme(context.Context, *TLDialogSetChatTheme) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogSetChatTheme not implemented")
}
func (UnimplementedRPCDialogServer) DialogSetHistoryTTL(context.Context, *TLDialogSetHistoryTTL) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogSetHistoryTTL not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetMyDialogsData(context.Context, *TLDialogGetMyDialogsData) (*DialogsData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetMyDialogsData not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetSavedDialogs(context.Context, *TLDialogGetSavedDialogs) (*SavedDialogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetSavedDialogs not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetPinnedSavedDialogs(context.Context, *TLDialogGetPinnedSavedDialogs) (*SavedDialogList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetPinnedSavedDialogs not implemented")
}
func (UnimplementedRPCDialogServer) DialogToggleSavedDialogPin(context.Context, *TLDialogToggleSavedDialogPin) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogToggleSavedDialogPin not implemented")
}
func (UnimplementedRPCDialogServer) DialogReorderPinnedSavedDialogs(context.Context, *TLDialogReorderPinnedSavedDialogs) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogReorderPinnedSavedDialogs not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetDialogFilter(context.Context, *TLDialogGetDialogFilter) (*DialogFilterExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogFilter not implemented")
}
func (UnimplementedRPCDialogServer) DialogGetDialogFilterBySlug(context.Context, *TLDialogGetDialogFilterBySlug) (*DialogFilterExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogGetDialogFilterBySlug not implemented")
}
func (UnimplementedRPCDialogServer) DialogCreateDialogFilter(context.Context, *TLDialogCreateDialogFilter) (*DialogFilterExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogCreateDialogFilter not implemented")
}
func (UnimplementedRPCDialogServer) DialogUpdateUnreadCount(context.Context, *TLDialogUpdateUnreadCount) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialogUpdateUnreadCount not implemented")
}

// UnsafeRPCDialogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCDialogServer will
// result in compilation errors.
type UnsafeRPCDialogServer interface {
	mustEmbedUnimplementedRPCDialogServer()
}

func RegisterRPCDialogServer(s grpc.ServiceRegistrar, srv RPCDialogServer) {
	s.RegisterService(&RPCDialog_ServiceDesc, srv)
}

func _RPCDialog_DialogSaveDraftMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogSaveDraftMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogSaveDraftMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogSaveDraftMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogSaveDraftMessage(ctx, req.(*TLDialogSaveDraftMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogClearDraftMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogClearDraftMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogClearDraftMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogClearDraftMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogClearDraftMessage(ctx, req.(*TLDialogClearDraftMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetAllDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetAllDrafts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetAllDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetAllDrafts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetAllDrafts(ctx, req.(*TLDialogGetAllDrafts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogClearAllDrafts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogClearAllDrafts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogClearAllDrafts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogClearAllDrafts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogClearAllDrafts(ctx, req.(*TLDialogClearAllDrafts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogMarkDialogUnread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogMarkDialogUnread)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogMarkDialogUnread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogMarkDialogUnread_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogMarkDialogUnread(ctx, req.(*TLDialogMarkDialogUnread))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogToggleDialogPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogToggleDialogPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogToggleDialogPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogToggleDialogPin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogToggleDialogPin(ctx, req.(*TLDialogToggleDialogPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogUnreadMarkList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogUnreadMarkList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogUnreadMarkList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetDialogUnreadMarkList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogUnreadMarkList(ctx, req.(*TLDialogGetDialogUnreadMarkList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogsByOffsetDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogsByOffsetDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogsByOffsetDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetDialogsByOffsetDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogsByOffsetDate(ctx, req.(*TLDialogGetDialogsByOffsetDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogs(ctx, req.(*TLDialogGetDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogsByIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogsByIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogsByIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetDialogsByIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogsByIdList(ctx, req.(*TLDialogGetDialogsByIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogsCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetDialogsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogsCount(ctx, req.(*TLDialogGetDialogsCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetPinnedDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetPinnedDialogs(ctx, req.(*TLDialogGetPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogReorderPinnedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogReorderPinnedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogReorderPinnedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogReorderPinnedDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogReorderPinnedDialogs(ctx, req.(*TLDialogReorderPinnedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetDialogById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogById(ctx, req.(*TLDialogGetDialogById))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetTopMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetTopMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetTopMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetTopMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetTopMessage(ctx, req.(*TLDialogGetTopMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogUpdateReadInbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogUpdateReadInbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogUpdateReadInbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogUpdateReadInbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogUpdateReadInbox(ctx, req.(*TLDialogUpdateReadInbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogUpdateReadOutbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogUpdateReadOutbox)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogUpdateReadOutbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogUpdateReadOutbox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogUpdateReadOutbox(ctx, req.(*TLDialogUpdateReadOutbox))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogInsertOrUpdateDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogInsertOrUpdateDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogInsertOrUpdateDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogInsertOrUpdateDialog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogInsertOrUpdateDialog(ctx, req.(*TLDialogInsertOrUpdateDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogDeleteDialog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogDeleteDialog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogDeleteDialog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogDeleteDialog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogDeleteDialog(ctx, req.(*TLDialogDeleteDialog))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetUserPinnedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetUserPinnedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetUserPinnedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetUserPinnedMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetUserPinnedMessage(ctx, req.(*TLDialogGetUserPinnedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogUpdateUserPinnedMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogUpdateUserPinnedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogUpdateUserPinnedMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogUpdateUserPinnedMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogUpdateUserPinnedMessage(ctx, req.(*TLDialogUpdateUserPinnedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogInsertOrUpdateDialogFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogInsertOrUpdateDialogFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogInsertOrUpdateDialogFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogInsertOrUpdateDialogFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogInsertOrUpdateDialogFilter(ctx, req.(*TLDialogInsertOrUpdateDialogFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogDeleteDialogFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogDeleteDialogFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogDeleteDialogFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogDeleteDialogFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogDeleteDialogFilter(ctx, req.(*TLDialogDeleteDialogFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogUpdateDialogFiltersOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogUpdateDialogFiltersOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogUpdateDialogFiltersOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogUpdateDialogFiltersOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogUpdateDialogFiltersOrder(ctx, req.(*TLDialogUpdateDialogFiltersOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogFilters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetDialogFilters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogFilters(ctx, req.(*TLDialogGetDialogFilters))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogFolder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetDialogFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogFolder(ctx, req.(*TLDialogGetDialogFolder))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogEditPeerFolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogEditPeerFolders)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogEditPeerFolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogEditPeerFolders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogEditPeerFolders(ctx, req.(*TLDialogEditPeerFolders))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetChannelMessageReadParticipants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetChannelMessageReadParticipants)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetChannelMessageReadParticipants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetChannelMessageReadParticipants_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetChannelMessageReadParticipants(ctx, req.(*TLDialogGetChannelMessageReadParticipants))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogSetChatTheme_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogSetChatTheme)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogSetChatTheme(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogSetChatTheme_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogSetChatTheme(ctx, req.(*TLDialogSetChatTheme))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogSetHistoryTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogSetHistoryTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogSetHistoryTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogSetHistoryTTL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogSetHistoryTTL(ctx, req.(*TLDialogSetHistoryTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetMyDialogsData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetMyDialogsData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetMyDialogsData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetMyDialogsData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetMyDialogsData(ctx, req.(*TLDialogGetMyDialogsData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetSavedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetSavedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetSavedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetSavedDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetSavedDialogs(ctx, req.(*TLDialogGetSavedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetPinnedSavedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetPinnedSavedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetPinnedSavedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetPinnedSavedDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetPinnedSavedDialogs(ctx, req.(*TLDialogGetPinnedSavedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogToggleSavedDialogPin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogToggleSavedDialogPin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogToggleSavedDialogPin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogToggleSavedDialogPin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogToggleSavedDialogPin(ctx, req.(*TLDialogToggleSavedDialogPin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogReorderPinnedSavedDialogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogReorderPinnedSavedDialogs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogReorderPinnedSavedDialogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogReorderPinnedSavedDialogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogReorderPinnedSavedDialogs(ctx, req.(*TLDialogReorderPinnedSavedDialogs))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetDialogFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogFilter(ctx, req.(*TLDialogGetDialogFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogGetDialogFilterBySlug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogGetDialogFilterBySlug)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogGetDialogFilterBySlug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogGetDialogFilterBySlug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogGetDialogFilterBySlug(ctx, req.(*TLDialogGetDialogFilterBySlug))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogCreateDialogFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogCreateDialogFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogCreateDialogFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogCreateDialogFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogCreateDialogFilter(ctx, req.(*TLDialogCreateDialogFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDialog_DialogUpdateUnreadCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDialogUpdateUnreadCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDialogServer).DialogUpdateUnreadCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDialog_DialogUpdateUnreadCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDialogServer).DialogUpdateUnreadCount(ctx, req.(*TLDialogUpdateUnreadCount))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCDialog_ServiceDesc is the grpc.ServiceDesc for RPCDialog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCDialog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.RPCDialog",
	HandlerType: (*RPCDialogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "dialog_saveDraftMessage",
			Handler:    _RPCDialog_DialogSaveDraftMessage_Handler,
		},
		{
			MethodName: "dialog_clearDraftMessage",
			Handler:    _RPCDialog_DialogClearDraftMessage_Handler,
		},
		{
			MethodName: "dialog_getAllDrafts",
			Handler:    _RPCDialog_DialogGetAllDrafts_Handler,
		},
		{
			MethodName: "dialog_clearAllDrafts",
			Handler:    _RPCDialog_DialogClearAllDrafts_Handler,
		},
		{
			MethodName: "dialog_markDialogUnread",
			Handler:    _RPCDialog_DialogMarkDialogUnread_Handler,
		},
		{
			MethodName: "dialog_toggleDialogPin",
			Handler:    _RPCDialog_DialogToggleDialogPin_Handler,
		},
		{
			MethodName: "dialog_getDialogUnreadMarkList",
			Handler:    _RPCDialog_DialogGetDialogUnreadMarkList_Handler,
		},
		{
			MethodName: "dialog_getDialogsByOffsetDate",
			Handler:    _RPCDialog_DialogGetDialogsByOffsetDate_Handler,
		},
		{
			MethodName: "dialog_getDialogs",
			Handler:    _RPCDialog_DialogGetDialogs_Handler,
		},
		{
			MethodName: "dialog_getDialogsByIdList",
			Handler:    _RPCDialog_DialogGetDialogsByIdList_Handler,
		},
		{
			MethodName: "dialog_getDialogsCount",
			Handler:    _RPCDialog_DialogGetDialogsCount_Handler,
		},
		{
			MethodName: "dialog_getPinnedDialogs",
			Handler:    _RPCDialog_DialogGetPinnedDialogs_Handler,
		},
		{
			MethodName: "dialog_reorderPinnedDialogs",
			Handler:    _RPCDialog_DialogReorderPinnedDialogs_Handler,
		},
		{
			MethodName: "dialog_getDialogById",
			Handler:    _RPCDialog_DialogGetDialogById_Handler,
		},
		{
			MethodName: "dialog_getTopMessage",
			Handler:    _RPCDialog_DialogGetTopMessage_Handler,
		},
		{
			MethodName: "dialog_updateReadInbox",
			Handler:    _RPCDialog_DialogUpdateReadInbox_Handler,
		},
		{
			MethodName: "dialog_updateReadOutbox",
			Handler:    _RPCDialog_DialogUpdateReadOutbox_Handler,
		},
		{
			MethodName: "dialog_insertOrUpdateDialog",
			Handler:    _RPCDialog_DialogInsertOrUpdateDialog_Handler,
		},
		{
			MethodName: "dialog_deleteDialog",
			Handler:    _RPCDialog_DialogDeleteDialog_Handler,
		},
		{
			MethodName: "dialog_getUserPinnedMessage",
			Handler:    _RPCDialog_DialogGetUserPinnedMessage_Handler,
		},
		{
			MethodName: "dialog_updateUserPinnedMessage",
			Handler:    _RPCDialog_DialogUpdateUserPinnedMessage_Handler,
		},
		{
			MethodName: "dialog_insertOrUpdateDialogFilter",
			Handler:    _RPCDialog_DialogInsertOrUpdateDialogFilter_Handler,
		},
		{
			MethodName: "dialog_deleteDialogFilter",
			Handler:    _RPCDialog_DialogDeleteDialogFilter_Handler,
		},
		{
			MethodName: "dialog_updateDialogFiltersOrder",
			Handler:    _RPCDialog_DialogUpdateDialogFiltersOrder_Handler,
		},
		{
			MethodName: "dialog_getDialogFilters",
			Handler:    _RPCDialog_DialogGetDialogFilters_Handler,
		},
		{
			MethodName: "dialog_getDialogFolder",
			Handler:    _RPCDialog_DialogGetDialogFolder_Handler,
		},
		{
			MethodName: "dialog_editPeerFolders",
			Handler:    _RPCDialog_DialogEditPeerFolders_Handler,
		},
		{
			MethodName: "dialog_getChannelMessageReadParticipants",
			Handler:    _RPCDialog_DialogGetChannelMessageReadParticipants_Handler,
		},
		{
			MethodName: "dialog_setChatTheme",
			Handler:    _RPCDialog_DialogSetChatTheme_Handler,
		},
		{
			MethodName: "dialog_setHistoryTTL",
			Handler:    _RPCDialog_DialogSetHistoryTTL_Handler,
		},
		{
			MethodName: "dialog_getMyDialogsData",
			Handler:    _RPCDialog_DialogGetMyDialogsData_Handler,
		},
		{
			MethodName: "dialog_getSavedDialogs",
			Handler:    _RPCDialog_DialogGetSavedDialogs_Handler,
		},
		{
			MethodName: "dialog_getPinnedSavedDialogs",
			Handler:    _RPCDialog_DialogGetPinnedSavedDialogs_Handler,
		},
		{
			MethodName: "dialog_toggleSavedDialogPin",
			Handler:    _RPCDialog_DialogToggleSavedDialogPin_Handler,
		},
		{
			MethodName: "dialog_reorderPinnedSavedDialogs",
			Handler:    _RPCDialog_DialogReorderPinnedSavedDialogs_Handler,
		},
		{
			MethodName: "dialog_getDialogFilter",
			Handler:    _RPCDialog_DialogGetDialogFilter_Handler,
		},
		{
			MethodName: "dialog_getDialogFilterBySlug",
			Handler:    _RPCDialog_DialogGetDialogFilterBySlug_Handler,
		},
		{
			MethodName: "dialog_createDialogFilter",
			Handler:    _RPCDialog_DialogCreateDialogFilter_Handler,
		},
		{
			MethodName: "dialog_updateUnreadCount",
			Handler:    _RPCDialog_DialogUpdateUnreadCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dialog.tl.proto",
}
