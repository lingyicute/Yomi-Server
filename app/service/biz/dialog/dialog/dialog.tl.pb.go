//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: dialog.tl.proto

package dialog

import (
	mtproto "github.com/teamgram/proto/mtproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLConstructor int32

const (
	TLConstructor_CRC32_UNKNOWN                                  TLConstructor = 0
	TLConstructor_CRC32_updateDraftMessage                       TLConstructor = -155335502
	TLConstructor_CRC32_dialogExt                                TLConstructor = -1109809056
	TLConstructor_CRC32_dialogPinnedExt                          TLConstructor = 245834284
	TLConstructor_CRC32_dialogFilterExt                          TLConstructor = -1496016642
	TLConstructor_CRC32_simpleDialogsData                        TLConstructor = 492418141
	TLConstructor_CRC32_savedDialogList                          TLConstructor = 2005919834
	TLConstructor_CRC32_dialog_saveDraftMessage                  TLConstructor = 1321916826
	TLConstructor_CRC32_dialog_clearDraftMessage                 TLConstructor = -76500326
	TLConstructor_CRC32_dialog_getAllDrafts                      TLConstructor = -1394716698
	TLConstructor_CRC32_dialog_clearAllDrafts                    TLConstructor = 1102614780
	TLConstructor_CRC32_dialog_markDialogUnread                  TLConstructor = 1160941838
	TLConstructor_CRC32_dialog_toggleDialogPin                   TLConstructor = -2038504145
	TLConstructor_CRC32_dialog_getDialogUnreadMarkList           TLConstructor = -893634316
	TLConstructor_CRC32_dialog_getDialogsByOffsetDate            TLConstructor = -1652652540
	TLConstructor_CRC32_dialog_getDialogs                        TLConstructor = -2046091754
	TLConstructor_CRC32_dialog_getDialogsByIdList                TLConstructor = -1390049167
	TLConstructor_CRC32_dialog_getDialogsCount                   TLConstructor = -533089179
	TLConstructor_CRC32_dialog_getPinnedDialogs                  TLConstructor = -1463673931
	TLConstructor_CRC32_dialog_reorderPinnedDialogs              TLConstructor = -18664089
	TLConstructor_CRC32_dialog_getDialogById                     TLConstructor = -1587594251
	TLConstructor_CRC32_dialog_getTopMessage                     TLConstructor = -92425614
	TLConstructor_CRC32_dialog_updateReadInbox                   TLConstructor = 489158840
	TLConstructor_CRC32_dialog_updateReadOutbox                  TLConstructor = 1483799934
	TLConstructor_CRC32_dialog_insertOrUpdateDialog              TLConstructor = 382601889
	TLConstructor_CRC32_dialog_deleteDialog                      TLConstructor = 28515811
	TLConstructor_CRC32_dialog_getUserPinnedMessage              TLConstructor = -1885617487
	TLConstructor_CRC32_dialog_updateUserPinnedMessage           TLConstructor = 371388970
	TLConstructor_CRC32_dialog_insertOrUpdateDialogFilter        TLConstructor = 178824068
	TLConstructor_CRC32_dialog_deleteDialogFilter                TLConstructor = 31276695
	TLConstructor_CRC32_dialog_updateDialogFiltersOrder          TLConstructor = -1321465025
	TLConstructor_CRC32_dialog_getDialogFilters                  TLConstructor = 1818717244
	TLConstructor_CRC32_dialog_getDialogFolder                   TLConstructor = 1092325045
	TLConstructor_CRC32_dialog_editPeerFolders                   TLConstructor = 608601754
	TLConstructor_CRC32_dialog_getChannelMessageReadParticipants TLConstructor = 683494715
	TLConstructor_CRC32_dialog_setChatTheme                      TLConstructor = -374431190
	TLConstructor_CRC32_dialog_setHistoryTTL                     TLConstructor = 165263532
	TLConstructor_CRC32_dialog_getMyDialogsData                  TLConstructor = 2128645891
	TLConstructor_CRC32_dialog_getSavedDialogs                   TLConstructor = 952227432
	TLConstructor_CRC32_dialog_getPinnedSavedDialogs             TLConstructor = 1084471271
	TLConstructor_CRC32_dialog_toggleSavedDialogPin              TLConstructor = 1156782041
	TLConstructor_CRC32_dialog_reorderPinnedSavedDialogs         TLConstructor = -665007150
	TLConstructor_CRC32_dialog_getDialogFilter                   TLConstructor = -209189348
	TLConstructor_CRC32_dialog_getDialogFilterBySlug             TLConstructor = 1313177583
	TLConstructor_CRC32_dialog_createDialogFilter                TLConstructor = -959749265
	TLConstructor_CRC32_dialog_updateUnreadCount                 TLConstructor = 732705613
)

// Enum value maps for TLConstructor.
var (
	TLConstructor_name = map[int32]string{
		0:           "CRC32_UNKNOWN",
		-155335502:  "CRC32_updateDraftMessage",
		-1109809056: "CRC32_dialogExt",
		245834284:   "CRC32_dialogPinnedExt",
		-1496016642: "CRC32_dialogFilterExt",
		492418141:   "CRC32_simpleDialogsData",
		2005919834:  "CRC32_savedDialogList",
		1321916826:  "CRC32_dialog_saveDraftMessage",
		-76500326:   "CRC32_dialog_clearDraftMessage",
		-1394716698: "CRC32_dialog_getAllDrafts",
		1102614780:  "CRC32_dialog_clearAllDrafts",
		1160941838:  "CRC32_dialog_markDialogUnread",
		-2038504145: "CRC32_dialog_toggleDialogPin",
		-893634316:  "CRC32_dialog_getDialogUnreadMarkList",
		-1652652540: "CRC32_dialog_getDialogsByOffsetDate",
		-2046091754: "CRC32_dialog_getDialogs",
		-1390049167: "CRC32_dialog_getDialogsByIdList",
		-533089179:  "CRC32_dialog_getDialogsCount",
		-1463673931: "CRC32_dialog_getPinnedDialogs",
		-18664089:   "CRC32_dialog_reorderPinnedDialogs",
		-1587594251: "CRC32_dialog_getDialogById",
		-92425614:   "CRC32_dialog_getTopMessage",
		489158840:   "CRC32_dialog_updateReadInbox",
		1483799934:  "CRC32_dialog_updateReadOutbox",
		382601889:   "CRC32_dialog_insertOrUpdateDialog",
		28515811:    "CRC32_dialog_deleteDialog",
		-1885617487: "CRC32_dialog_getUserPinnedMessage",
		371388970:   "CRC32_dialog_updateUserPinnedMessage",
		178824068:   "CRC32_dialog_insertOrUpdateDialogFilter",
		31276695:    "CRC32_dialog_deleteDialogFilter",
		-1321465025: "CRC32_dialog_updateDialogFiltersOrder",
		1818717244:  "CRC32_dialog_getDialogFilters",
		1092325045:  "CRC32_dialog_getDialogFolder",
		608601754:   "CRC32_dialog_editPeerFolders",
		683494715:   "CRC32_dialog_getChannelMessageReadParticipants",
		-374431190:  "CRC32_dialog_setChatTheme",
		165263532:   "CRC32_dialog_setHistoryTTL",
		2128645891:  "CRC32_dialog_getMyDialogsData",
		952227432:   "CRC32_dialog_getSavedDialogs",
		1084471271:  "CRC32_dialog_getPinnedSavedDialogs",
		1156782041:  "CRC32_dialog_toggleSavedDialogPin",
		-665007150:  "CRC32_dialog_reorderPinnedSavedDialogs",
		-209189348:  "CRC32_dialog_getDialogFilter",
		1313177583:  "CRC32_dialog_getDialogFilterBySlug",
		-959749265:  "CRC32_dialog_createDialogFilter",
		732705613:   "CRC32_dialog_updateUnreadCount",
	}
	TLConstructor_value = map[string]int32{
		"CRC32_UNKNOWN":                                  0,
		"CRC32_updateDraftMessage":                       -155335502,
		"CRC32_dialogExt":                                -1109809056,
		"CRC32_dialogPinnedExt":                          245834284,
		"CRC32_dialogFilterExt":                          -1496016642,
		"CRC32_simpleDialogsData":                        492418141,
		"CRC32_savedDialogList":                          2005919834,
		"CRC32_dialog_saveDraftMessage":                  1321916826,
		"CRC32_dialog_clearDraftMessage":                 -76500326,
		"CRC32_dialog_getAllDrafts":                      -1394716698,
		"CRC32_dialog_clearAllDrafts":                    1102614780,
		"CRC32_dialog_markDialogUnread":                  1160941838,
		"CRC32_dialog_toggleDialogPin":                   -2038504145,
		"CRC32_dialog_getDialogUnreadMarkList":           -893634316,
		"CRC32_dialog_getDialogsByOffsetDate":            -1652652540,
		"CRC32_dialog_getDialogs":                        -2046091754,
		"CRC32_dialog_getDialogsByIdList":                -1390049167,
		"CRC32_dialog_getDialogsCount":                   -533089179,
		"CRC32_dialog_getPinnedDialogs":                  -1463673931,
		"CRC32_dialog_reorderPinnedDialogs":              -18664089,
		"CRC32_dialog_getDialogById":                     -1587594251,
		"CRC32_dialog_getTopMessage":                     -92425614,
		"CRC32_dialog_updateReadInbox":                   489158840,
		"CRC32_dialog_updateReadOutbox":                  1483799934,
		"CRC32_dialog_insertOrUpdateDialog":              382601889,
		"CRC32_dialog_deleteDialog":                      28515811,
		"CRC32_dialog_getUserPinnedMessage":              -1885617487,
		"CRC32_dialog_updateUserPinnedMessage":           371388970,
		"CRC32_dialog_insertOrUpdateDialogFilter":        178824068,
		"CRC32_dialog_deleteDialogFilter":                31276695,
		"CRC32_dialog_updateDialogFiltersOrder":          -1321465025,
		"CRC32_dialog_getDialogFilters":                  1818717244,
		"CRC32_dialog_getDialogFolder":                   1092325045,
		"CRC32_dialog_editPeerFolders":                   608601754,
		"CRC32_dialog_getChannelMessageReadParticipants": 683494715,
		"CRC32_dialog_setChatTheme":                      -374431190,
		"CRC32_dialog_setHistoryTTL":                     165263532,
		"CRC32_dialog_getMyDialogsData":                  2128645891,
		"CRC32_dialog_getSavedDialogs":                   952227432,
		"CRC32_dialog_getPinnedSavedDialogs":             1084471271,
		"CRC32_dialog_toggleSavedDialogPin":              1156782041,
		"CRC32_dialog_reorderPinnedSavedDialogs":         -665007150,
		"CRC32_dialog_getDialogFilter":                   -209189348,
		"CRC32_dialog_getDialogFilterBySlug":             1313177583,
		"CRC32_dialog_createDialogFilter":                -959749265,
		"CRC32_dialog_updateUnreadCount":                 732705613,
	}
)

func (x TLConstructor) Enum() *TLConstructor {
	p := new(TLConstructor)
	*p = x
	return p
}

func (x TLConstructor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLConstructor) Descriptor() protoreflect.EnumDescriptor {
	return file_dialog_tl_proto_enumTypes[0].Descriptor()
}

func (TLConstructor) Type() protoreflect.EnumType {
	return &file_dialog_tl_proto_enumTypes[0]
}

func (x TLConstructor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLConstructor.Descriptor instead.
func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{0}
}

// DialogExt <--
//   - TL_dialogExt
type DialogExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName  string          `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor    TLConstructor   `protobuf:"varint,2,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	Order          int64           `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	Dialog         *mtproto.Dialog `protobuf:"bytes,4,opt,name=dialog,proto3" json:"dialog,omitempty"`
	AvailableMinId int32           `protobuf:"varint,5,opt,name=available_min_id,json=availableMinId,proto3" json:"available_min_id,omitempty"`
	Date           int64           `protobuf:"varint,6,opt,name=date,proto3" json:"date,omitempty"`
	ThemeEmoticon  string          `protobuf:"bytes,7,opt,name=theme_emoticon,json=themeEmoticon,proto3" json:"theme_emoticon,omitempty"`
	TtlPeriod      int32           `protobuf:"varint,8,opt,name=ttl_period,json=ttlPeriod,proto3" json:"ttl_period,omitempty"`
}

func (x *DialogExt) Reset() {
	*x = DialogExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialogExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialogExt) ProtoMessage() {}

func (x *DialogExt) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialogExt.ProtoReflect.Descriptor instead.
func (*DialogExt) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{0}
}

func (x *DialogExt) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *DialogExt) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *DialogExt) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *DialogExt) GetDialog() *mtproto.Dialog {
	if x != nil {
		return x.Dialog
	}
	return nil
}

func (x *DialogExt) GetAvailableMinId() int32 {
	if x != nil {
		return x.AvailableMinId
	}
	return 0
}

func (x *DialogExt) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *DialogExt) GetThemeEmoticon() string {
	if x != nil {
		return x.ThemeEmoticon
	}
	return ""
}

func (x *DialogExt) GetTtlPeriod() int32 {
	if x != nil {
		return x.TtlPeriod
	}
	return 0
}

type TLDialogExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *DialogExt `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLDialogExt) Reset() {
	*x = TLDialogExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogExt) ProtoMessage() {}

func (x *TLDialogExt) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogExt.ProtoReflect.Descriptor instead.
func (*TLDialogExt) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{1}
}

func (x *TLDialogExt) GetData2() *DialogExt {
	if x != nil {
		return x.Data2
	}
	return nil
}

// DialogFilterExt <--
//   - TL_dialogFilterExt
type DialogFilterExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string                `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor         `protobuf:"varint,2,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	Id            int32                 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	JoinedBySlug  bool                  `protobuf:"varint,4,opt,name=joined_by_slug,json=joinedBySlug,proto3" json:"joined_by_slug,omitempty"`
	Slug          string                `protobuf:"bytes,5,opt,name=slug,proto3" json:"slug,omitempty"`
	DialogFilter  *mtproto.DialogFilter `protobuf:"bytes,6,opt,name=dialog_filter,json=dialogFilter,proto3" json:"dialog_filter,omitempty"`
	Order         int64                 `protobuf:"varint,7,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *DialogFilterExt) Reset() {
	*x = DialogFilterExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialogFilterExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialogFilterExt) ProtoMessage() {}

func (x *DialogFilterExt) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialogFilterExt.ProtoReflect.Descriptor instead.
func (*DialogFilterExt) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{2}
}

func (x *DialogFilterExt) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *DialogFilterExt) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *DialogFilterExt) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DialogFilterExt) GetJoinedBySlug() bool {
	if x != nil {
		return x.JoinedBySlug
	}
	return false
}

func (x *DialogFilterExt) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *DialogFilterExt) GetDialogFilter() *mtproto.DialogFilter {
	if x != nil {
		return x.DialogFilter
	}
	return nil
}

func (x *DialogFilterExt) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

type TLDialogFilterExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *DialogFilterExt `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLDialogFilterExt) Reset() {
	*x = TLDialogFilterExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogFilterExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogFilterExt) ProtoMessage() {}

func (x *TLDialogFilterExt) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogFilterExt.ProtoReflect.Descriptor instead.
func (*TLDialogFilterExt) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{3}
}

func (x *TLDialogFilterExt) GetData2() *DialogFilterExt {
	if x != nil {
		return x.Data2
	}
	return nil
}

// DialogPinnedExt <--
//   - TL_dialogPinnedExt
type DialogPinnedExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	Order         int64         `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"`
	PeerType      int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId        int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *DialogPinnedExt) Reset() {
	*x = DialogPinnedExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialogPinnedExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialogPinnedExt) ProtoMessage() {}

func (x *DialogPinnedExt) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialogPinnedExt.ProtoReflect.Descriptor instead.
func (*DialogPinnedExt) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{4}
}

func (x *DialogPinnedExt) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *DialogPinnedExt) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *DialogPinnedExt) GetOrder() int64 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *DialogPinnedExt) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *DialogPinnedExt) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

type TLDialogPinnedExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *DialogPinnedExt `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLDialogPinnedExt) Reset() {
	*x = TLDialogPinnedExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogPinnedExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogPinnedExt) ProtoMessage() {}

func (x *TLDialogPinnedExt) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogPinnedExt.ProtoReflect.Descriptor instead.
func (*TLDialogPinnedExt) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{5}
}

func (x *TLDialogPinnedExt) GetData2() *DialogPinnedExt {
	if x != nil {
		return x.Data2
	}
	return nil
}

// DialogsData <--
//   - TL_simpleDialogsData
type DialogsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	Users         []int64       `protobuf:"varint,3,rep,packed,name=users,proto3" json:"users,omitempty"`
	Chats         []int64       `protobuf:"varint,4,rep,packed,name=chats,proto3" json:"chats,omitempty"`
	Channels      []int64       `protobuf:"varint,5,rep,packed,name=channels,proto3" json:"channels,omitempty"`
}

func (x *DialogsData) Reset() {
	*x = DialogsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DialogsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DialogsData) ProtoMessage() {}

func (x *DialogsData) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DialogsData.ProtoReflect.Descriptor instead.
func (*DialogsData) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{6}
}

func (x *DialogsData) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *DialogsData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *DialogsData) GetUsers() []int64 {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *DialogsData) GetChats() []int64 {
	if x != nil {
		return x.Chats
	}
	return nil
}

func (x *DialogsData) GetChannels() []int64 {
	if x != nil {
		return x.Channels
	}
	return nil
}

type TLSimpleDialogsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *DialogsData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLSimpleDialogsData) Reset() {
	*x = TLSimpleDialogsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSimpleDialogsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSimpleDialogsData) ProtoMessage() {}

func (x *TLSimpleDialogsData) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSimpleDialogsData.ProtoReflect.Descriptor instead.
func (*TLSimpleDialogsData) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{7}
}

func (x *TLSimpleDialogsData) GetData2() *DialogsData {
	if x != nil {
		return x.Data2
	}
	return nil
}

// PeerWithDraftMessage <--
//   - TL_updateDraftMessage
type PeerWithDraftMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string                `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor         `protobuf:"varint,2,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	Peer          *mtproto.Peer         `protobuf:"bytes,3,opt,name=peer,proto3" json:"peer,omitempty"`
	Draft         *mtproto.DraftMessage `protobuf:"bytes,4,opt,name=draft,proto3" json:"draft,omitempty"`
}

func (x *PeerWithDraftMessage) Reset() {
	*x = PeerWithDraftMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerWithDraftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerWithDraftMessage) ProtoMessage() {}

func (x *PeerWithDraftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerWithDraftMessage.ProtoReflect.Descriptor instead.
func (*PeerWithDraftMessage) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{8}
}

func (x *PeerWithDraftMessage) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *PeerWithDraftMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *PeerWithDraftMessage) GetPeer() *mtproto.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *PeerWithDraftMessage) GetDraft() *mtproto.DraftMessage {
	if x != nil {
		return x.Draft
	}
	return nil
}

type TLUpdateDraftMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *PeerWithDraftMessage `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLUpdateDraftMessage) Reset() {
	*x = TLUpdateDraftMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUpdateDraftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUpdateDraftMessage) ProtoMessage() {}

func (x *TLUpdateDraftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUpdateDraftMessage.ProtoReflect.Descriptor instead.
func (*TLUpdateDraftMessage) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{9}
}

func (x *TLUpdateDraftMessage) GetData2() *PeerWithDraftMessage {
	if x != nil {
		return x.Data2
	}
	return nil
}

// SavedDialogList <--
//   - TL_savedDialogList
type SavedDialogList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string                 `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor          `protobuf:"varint,2,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	Count         int32                  `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Dialogs       []*mtproto.SavedDialog `protobuf:"bytes,4,rep,name=dialogs,proto3" json:"dialogs,omitempty"`
}

func (x *SavedDialogList) Reset() {
	*x = SavedDialogList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavedDialogList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavedDialogList) ProtoMessage() {}

func (x *SavedDialogList) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavedDialogList.ProtoReflect.Descriptor instead.
func (*SavedDialogList) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{10}
}

func (x *SavedDialogList) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *SavedDialogList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *SavedDialogList) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SavedDialogList) GetDialogs() []*mtproto.SavedDialog {
	if x != nil {
		return x.Dialogs
	}
	return nil
}

type TLSavedDialogList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *SavedDialogList `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLSavedDialogList) Reset() {
	*x = TLSavedDialogList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSavedDialogList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSavedDialogList) ProtoMessage() {}

func (x *TLSavedDialogList) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSavedDialogList.ProtoReflect.Descriptor instead.
func (*TLSavedDialogList) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{11}
}

func (x *TLSavedDialogList) GetData2() *SavedDialogList {
	if x != nil {
		return x.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogSaveDraftMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor         `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64                 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32                 `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64                 `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Message     *mtproto.DraftMessage `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TLDialogSaveDraftMessage) Reset() {
	*x = TLDialogSaveDraftMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogSaveDraftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogSaveDraftMessage) ProtoMessage() {}

func (x *TLDialogSaveDraftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogSaveDraftMessage.ProtoReflect.Descriptor instead.
func (*TLDialogSaveDraftMessage) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{12}
}

func (x *TLDialogSaveDraftMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogSaveDraftMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogSaveDraftMessage) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLDialogSaveDraftMessage) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLDialogSaveDraftMessage) GetMessage() *mtproto.DraftMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogClearDraftMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLDialogClearDraftMessage) Reset() {
	*x = TLDialogClearDraftMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogClearDraftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogClearDraftMessage) ProtoMessage() {}

func (x *TLDialogClearDraftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogClearDraftMessage.ProtoReflect.Descriptor instead.
func (*TLDialogClearDraftMessage) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{13}
}

func (x *TLDialogClearDraftMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogClearDraftMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogClearDraftMessage) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLDialogClearDraftMessage) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetAllDrafts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLDialogGetAllDrafts) Reset() {
	*x = TLDialogGetAllDrafts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetAllDrafts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetAllDrafts) ProtoMessage() {}

func (x *TLDialogGetAllDrafts) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetAllDrafts.ProtoReflect.Descriptor instead.
func (*TLDialogGetAllDrafts) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{14}
}

func (x *TLDialogGetAllDrafts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetAllDrafts) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogClearAllDrafts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLDialogClearAllDrafts) Reset() {
	*x = TLDialogClearAllDrafts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogClearAllDrafts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogClearAllDrafts) ProtoMessage() {}

func (x *TLDialogClearAllDrafts) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogClearAllDrafts.ProtoReflect.Descriptor instead.
func (*TLDialogClearAllDrafts) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{15}
}

func (x *TLDialogClearAllDrafts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogClearAllDrafts) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogMarkDialogUnread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	UnreadMark  *mtproto.Bool `protobuf:"bytes,6,opt,name=unread_mark,json=unreadMark,proto3" json:"unread_mark,omitempty"`
}

func (x *TLDialogMarkDialogUnread) Reset() {
	*x = TLDialogMarkDialogUnread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogMarkDialogUnread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogMarkDialogUnread) ProtoMessage() {}

func (x *TLDialogMarkDialogUnread) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogMarkDialogUnread.ProtoReflect.Descriptor instead.
func (*TLDialogMarkDialogUnread) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{16}
}

func (x *TLDialogMarkDialogUnread) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogMarkDialogUnread) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogMarkDialogUnread) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLDialogMarkDialogUnread) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLDialogMarkDialogUnread) GetUnreadMark() *mtproto.Bool {
	if x != nil {
		return x.UnreadMark
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogToggleDialogPin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Pinned      *mtproto.Bool `protobuf:"bytes,6,opt,name=pinned,proto3" json:"pinned,omitempty"`
}

func (x *TLDialogToggleDialogPin) Reset() {
	*x = TLDialogToggleDialogPin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogToggleDialogPin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogToggleDialogPin) ProtoMessage() {}

func (x *TLDialogToggleDialogPin) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogToggleDialogPin.ProtoReflect.Descriptor instead.
func (*TLDialogToggleDialogPin) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{17}
}

func (x *TLDialogToggleDialogPin) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogToggleDialogPin) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogToggleDialogPin) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLDialogToggleDialogPin) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLDialogToggleDialogPin) GetPinned() *mtproto.Bool {
	if x != nil {
		return x.Pinned
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogUnreadMarkList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLDialogGetDialogUnreadMarkList) Reset() {
	*x = TLDialogGetDialogUnreadMarkList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetDialogUnreadMarkList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetDialogUnreadMarkList) ProtoMessage() {}

func (x *TLDialogGetDialogUnreadMarkList) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetDialogUnreadMarkList.ProtoReflect.Descriptor instead.
func (*TLDialogGetDialogUnreadMarkList) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{18}
}

func (x *TLDialogGetDialogUnreadMarkList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetDialogUnreadMarkList) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogsByOffsetDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor   TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId        int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExcludePinned *mtproto.Bool `protobuf:"bytes,4,opt,name=exclude_pinned,json=excludePinned,proto3" json:"exclude_pinned,omitempty"`
	OffsetDate    int32         `protobuf:"varint,5,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	Limit         int32         `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TLDialogGetDialogsByOffsetDate) Reset() {
	*x = TLDialogGetDialogsByOffsetDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetDialogsByOffsetDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetDialogsByOffsetDate) ProtoMessage() {}

func (x *TLDialogGetDialogsByOffsetDate) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetDialogsByOffsetDate.ProtoReflect.Descriptor instead.
func (*TLDialogGetDialogsByOffsetDate) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{19}
}

func (x *TLDialogGetDialogsByOffsetDate) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetDialogsByOffsetDate) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogGetDialogsByOffsetDate) GetExcludePinned() *mtproto.Bool {
	if x != nil {
		return x.ExcludePinned
	}
	return nil
}

func (x *TLDialogGetDialogsByOffsetDate) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *TLDialogGetDialogsByOffsetDate) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor   TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId        int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExcludePinned *mtproto.Bool `protobuf:"bytes,4,opt,name=exclude_pinned,json=excludePinned,proto3" json:"exclude_pinned,omitempty"`
	FolderId      int32         `protobuf:"varint,5,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *TLDialogGetDialogs) Reset() {
	*x = TLDialogGetDialogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetDialogs) ProtoMessage() {}

func (x *TLDialogGetDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetDialogs.ProtoReflect.Descriptor instead.
func (*TLDialogGetDialogs) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{20}
}

func (x *TLDialogGetDialogs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetDialogs) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogGetDialogs) GetExcludePinned() *mtproto.Bool {
	if x != nil {
		return x.ExcludePinned
	}
	return nil
}

func (x *TLDialogGetDialogs) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogsByIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IdList      []int64       `protobuf:"varint,4,rep,packed,name=id_list,json=idList,proto3" json:"id_list,omitempty"`
}

func (x *TLDialogGetDialogsByIdList) Reset() {
	*x = TLDialogGetDialogsByIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetDialogsByIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetDialogsByIdList) ProtoMessage() {}

func (x *TLDialogGetDialogsByIdList) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetDialogsByIdList.ProtoReflect.Descriptor instead.
func (*TLDialogGetDialogsByIdList) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{21}
}

func (x *TLDialogGetDialogsByIdList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetDialogsByIdList) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogGetDialogsByIdList) GetIdList() []int64 {
	if x != nil {
		return x.IdList
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor   TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId        int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExcludePinned *mtproto.Bool `protobuf:"bytes,4,opt,name=exclude_pinned,json=excludePinned,proto3" json:"exclude_pinned,omitempty"`
	FolderId      int32         `protobuf:"varint,5,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *TLDialogGetDialogsCount) Reset() {
	*x = TLDialogGetDialogsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetDialogsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetDialogsCount) ProtoMessage() {}

func (x *TLDialogGetDialogsCount) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetDialogsCount.ProtoReflect.Descriptor instead.
func (*TLDialogGetDialogsCount) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{22}
}

func (x *TLDialogGetDialogsCount) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetDialogsCount) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogGetDialogsCount) GetExcludePinned() *mtproto.Bool {
	if x != nil {
		return x.ExcludePinned
	}
	return nil
}

func (x *TLDialogGetDialogsCount) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetPinnedDialogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FolderId    int32         `protobuf:"varint,4,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *TLDialogGetPinnedDialogs) Reset() {
	*x = TLDialogGetPinnedDialogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetPinnedDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetPinnedDialogs) ProtoMessage() {}

func (x *TLDialogGetPinnedDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetPinnedDialogs.ProtoReflect.Descriptor instead.
func (*TLDialogGetPinnedDialogs) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{23}
}

func (x *TLDialogGetPinnedDialogs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetPinnedDialogs) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogGetPinnedDialogs) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogReorderPinnedDialogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Force       *mtproto.Bool `protobuf:"bytes,4,opt,name=force,proto3" json:"force,omitempty"`
	FolderId    int32         `protobuf:"varint,5,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
	IdList      []int64       `protobuf:"varint,6,rep,packed,name=id_list,json=idList,proto3" json:"id_list,omitempty"`
}

func (x *TLDialogReorderPinnedDialogs) Reset() {
	*x = TLDialogReorderPinnedDialogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogReorderPinnedDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogReorderPinnedDialogs) ProtoMessage() {}

func (x *TLDialogReorderPinnedDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogReorderPinnedDialogs.ProtoReflect.Descriptor instead.
func (*TLDialogReorderPinnedDialogs) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{24}
}

func (x *TLDialogReorderPinnedDialogs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogReorderPinnedDialogs) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogReorderPinnedDialogs) GetForce() *mtproto.Bool {
	if x != nil {
		return x.Force
	}
	return nil
}

func (x *TLDialogReorderPinnedDialogs) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

func (x *TLDialogReorderPinnedDialogs) GetIdList() []int64 {
	if x != nil {
		return x.IdList
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLDialogGetDialogById) Reset() {
	*x = TLDialogGetDialogById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetDialogById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetDialogById) ProtoMessage() {}

func (x *TLDialogGetDialogById) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetDialogById.ProtoReflect.Descriptor instead.
func (*TLDialogGetDialogById) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{25}
}

func (x *TLDialogGetDialogById) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetDialogById) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogGetDialogById) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLDialogGetDialogById) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetTopMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLDialogGetTopMessage) Reset() {
	*x = TLDialogGetTopMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetTopMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetTopMessage) ProtoMessage() {}

func (x *TLDialogGetTopMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetTopMessage.ProtoReflect.Descriptor instead.
func (*TLDialogGetTopMessage) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{26}
}

func (x *TLDialogGetTopMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetTopMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogGetTopMessage) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLDialogGetTopMessage) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogUpdateReadInbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	ReadInboxId int32         `protobuf:"varint,6,opt,name=read_inbox_id,json=readInboxId,proto3" json:"read_inbox_id,omitempty"`
}

func (x *TLDialogUpdateReadInbox) Reset() {
	*x = TLDialogUpdateReadInbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogUpdateReadInbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogUpdateReadInbox) ProtoMessage() {}

func (x *TLDialogUpdateReadInbox) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogUpdateReadInbox.ProtoReflect.Descriptor instead.
func (*TLDialogUpdateReadInbox) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{27}
}

func (x *TLDialogUpdateReadInbox) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogUpdateReadInbox) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogUpdateReadInbox) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLDialogUpdateReadInbox) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLDialogUpdateReadInbox) GetReadInboxId() int32 {
	if x != nil {
		return x.ReadInboxId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogUpdateReadOutbox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor  TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId       int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType     int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId       int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	ReadOutboxId int32         `protobuf:"varint,6,opt,name=read_outbox_id,json=readOutboxId,proto3" json:"read_outbox_id,omitempty"`
}

func (x *TLDialogUpdateReadOutbox) Reset() {
	*x = TLDialogUpdateReadOutbox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogUpdateReadOutbox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogUpdateReadOutbox) ProtoMessage() {}

func (x *TLDialogUpdateReadOutbox) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogUpdateReadOutbox.ProtoReflect.Descriptor instead.
func (*TLDialogUpdateReadOutbox) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{28}
}

func (x *TLDialogUpdateReadOutbox) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogUpdateReadOutbox) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogUpdateReadOutbox) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLDialogUpdateReadOutbox) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLDialogUpdateReadOutbox) GetReadOutboxId() int32 {
	if x != nil {
		return x.ReadOutboxId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogInsertOrUpdateDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor     TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId          int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType        int32                  `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId          int64                  `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	TopMessage      *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=top_message,json=topMessage,proto3" json:"top_message,omitempty"`
	ReadOutboxMaxId *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=read_outbox_max_id,json=readOutboxMaxId,proto3" json:"read_outbox_max_id,omitempty"`
	ReadInboxMaxId  *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=read_inbox_max_id,json=readInboxMaxId,proto3" json:"read_inbox_max_id,omitempty"`
	UnreadCount     *wrapperspb.Int32Value `protobuf:"bytes,9,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	UnreadMark      bool                   `protobuf:"varint,10,opt,name=unread_mark,json=unreadMark,proto3" json:"unread_mark,omitempty"`
	Date2           *wrapperspb.Int64Value `protobuf:"bytes,11,opt,name=date2,proto3" json:"date2,omitempty"`
}

func (x *TLDialogInsertOrUpdateDialog) Reset() {
	*x = TLDialogInsertOrUpdateDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogInsertOrUpdateDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogInsertOrUpdateDialog) ProtoMessage() {}

func (x *TLDialogInsertOrUpdateDialog) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogInsertOrUpdateDialog.ProtoReflect.Descriptor instead.
func (*TLDialogInsertOrUpdateDialog) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{29}
}

func (x *TLDialogInsertOrUpdateDialog) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogInsertOrUpdateDialog) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogInsertOrUpdateDialog) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLDialogInsertOrUpdateDialog) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLDialogInsertOrUpdateDialog) GetTopMessage() *wrapperspb.Int32Value {
	if x != nil {
		return x.TopMessage
	}
	return nil
}

func (x *TLDialogInsertOrUpdateDialog) GetReadOutboxMaxId() *wrapperspb.Int32Value {
	if x != nil {
		return x.ReadOutboxMaxId
	}
	return nil
}

func (x *TLDialogInsertOrUpdateDialog) GetReadInboxMaxId() *wrapperspb.Int32Value {
	if x != nil {
		return x.ReadInboxMaxId
	}
	return nil
}

func (x *TLDialogInsertOrUpdateDialog) GetUnreadCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.UnreadCount
	}
	return nil
}

func (x *TLDialogInsertOrUpdateDialog) GetUnreadMark() bool {
	if x != nil {
		return x.UnreadMark
	}
	return false
}

func (x *TLDialogInsertOrUpdateDialog) GetDate2() *wrapperspb.Int64Value {
	if x != nil {
		return x.Date2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogDeleteDialog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLDialogDeleteDialog) Reset() {
	*x = TLDialogDeleteDialog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogDeleteDialog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogDeleteDialog) ProtoMessage() {}

func (x *TLDialogDeleteDialog) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogDeleteDialog.ProtoReflect.Descriptor instead.
func (*TLDialogDeleteDialog) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{30}
}

func (x *TLDialogDeleteDialog) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogDeleteDialog) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogDeleteDialog) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLDialogDeleteDialog) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetUserPinnedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLDialogGetUserPinnedMessage) Reset() {
	*x = TLDialogGetUserPinnedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetUserPinnedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetUserPinnedMessage) ProtoMessage() {}

func (x *TLDialogGetUserPinnedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetUserPinnedMessage.ProtoReflect.Descriptor instead.
func (*TLDialogGetUserPinnedMessage) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{31}
}

func (x *TLDialogGetUserPinnedMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetUserPinnedMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogGetUserPinnedMessage) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLDialogGetUserPinnedMessage) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogUpdateUserPinnedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	PinnedMsgId int32         `protobuf:"varint,6,opt,name=pinned_msg_id,json=pinnedMsgId,proto3" json:"pinned_msg_id,omitempty"`
}

func (x *TLDialogUpdateUserPinnedMessage) Reset() {
	*x = TLDialogUpdateUserPinnedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogUpdateUserPinnedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogUpdateUserPinnedMessage) ProtoMessage() {}

func (x *TLDialogUpdateUserPinnedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogUpdateUserPinnedMessage.ProtoReflect.Descriptor instead.
func (*TLDialogUpdateUserPinnedMessage) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{32}
}

func (x *TLDialogUpdateUserPinnedMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogUpdateUserPinnedMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogUpdateUserPinnedMessage) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLDialogUpdateUserPinnedMessage) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLDialogUpdateUserPinnedMessage) GetPinnedMsgId() int32 {
	if x != nil {
		return x.PinnedMsgId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogInsertOrUpdateDialogFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor  TLConstructor         `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId       int64                 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id           int32                 `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	DialogFilter *mtproto.DialogFilter `protobuf:"bytes,5,opt,name=dialog_filter,json=dialogFilter,proto3" json:"dialog_filter,omitempty"`
}

func (x *TLDialogInsertOrUpdateDialogFilter) Reset() {
	*x = TLDialogInsertOrUpdateDialogFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogInsertOrUpdateDialogFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogInsertOrUpdateDialogFilter) ProtoMessage() {}

func (x *TLDialogInsertOrUpdateDialogFilter) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogInsertOrUpdateDialogFilter.ProtoReflect.Descriptor instead.
func (*TLDialogInsertOrUpdateDialogFilter) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{33}
}

func (x *TLDialogInsertOrUpdateDialogFilter) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogInsertOrUpdateDialogFilter) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogInsertOrUpdateDialogFilter) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLDialogInsertOrUpdateDialogFilter) GetDialogFilter() *mtproto.DialogFilter {
	if x != nil {
		return x.DialogFilter
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogDeleteDialogFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id          int32         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TLDialogDeleteDialogFilter) Reset() {
	*x = TLDialogDeleteDialogFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogDeleteDialogFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogDeleteDialogFilter) ProtoMessage() {}

func (x *TLDialogDeleteDialogFilter) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogDeleteDialogFilter.ProtoReflect.Descriptor instead.
func (*TLDialogDeleteDialogFilter) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{34}
}

func (x *TLDialogDeleteDialogFilter) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogDeleteDialogFilter) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogDeleteDialogFilter) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogUpdateDialogFiltersOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Order       []int32       `protobuf:"varint,4,rep,packed,name=order,proto3" json:"order,omitempty"`
}

func (x *TLDialogUpdateDialogFiltersOrder) Reset() {
	*x = TLDialogUpdateDialogFiltersOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogUpdateDialogFiltersOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogUpdateDialogFiltersOrder) ProtoMessage() {}

func (x *TLDialogUpdateDialogFiltersOrder) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogUpdateDialogFiltersOrder.ProtoReflect.Descriptor instead.
func (*TLDialogUpdateDialogFiltersOrder) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{35}
}

func (x *TLDialogUpdateDialogFiltersOrder) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogUpdateDialogFiltersOrder) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogUpdateDialogFiltersOrder) GetOrder() []int32 {
	if x != nil {
		return x.Order
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogFilters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLDialogGetDialogFilters) Reset() {
	*x = TLDialogGetDialogFilters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetDialogFilters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetDialogFilters) ProtoMessage() {}

func (x *TLDialogGetDialogFilters) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetDialogFilters.ProtoReflect.Descriptor instead.
func (*TLDialogGetDialogFilters) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{36}
}

func (x *TLDialogGetDialogFilters) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetDialogFilters) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogFolder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FolderId    int32         `protobuf:"varint,4,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *TLDialogGetDialogFolder) Reset() {
	*x = TLDialogGetDialogFolder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetDialogFolder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetDialogFolder) ProtoMessage() {}

func (x *TLDialogGetDialogFolder) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetDialogFolder.ProtoReflect.Descriptor instead.
func (*TLDialogGetDialogFolder) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{37}
}

func (x *TLDialogGetDialogFolder) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetDialogFolder) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogGetDialogFolder) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogEditPeerFolders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor    TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId         int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerDialogList []int64       `protobuf:"varint,4,rep,packed,name=peer_dialog_list,json=peerDialogList,proto3" json:"peer_dialog_list,omitempty"`
	FolderId       int32         `protobuf:"varint,5,opt,name=folder_id,json=folderId,proto3" json:"folder_id,omitempty"`
}

func (x *TLDialogEditPeerFolders) Reset() {
	*x = TLDialogEditPeerFolders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogEditPeerFolders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogEditPeerFolders) ProtoMessage() {}

func (x *TLDialogEditPeerFolders) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogEditPeerFolders.ProtoReflect.Descriptor instead.
func (*TLDialogEditPeerFolders) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{38}
}

func (x *TLDialogEditPeerFolders) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogEditPeerFolders) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogEditPeerFolders) GetPeerDialogList() []int64 {
	if x != nil {
		return x.PeerDialogList
	}
	return nil
}

func (x *TLDialogEditPeerFolders) GetFolderId() int32 {
	if x != nil {
		return x.FolderId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetChannelMessageReadParticipants struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId   int64         `protobuf:"varint,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	MsgId       int32         `protobuf:"varint,5,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *TLDialogGetChannelMessageReadParticipants) Reset() {
	*x = TLDialogGetChannelMessageReadParticipants{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetChannelMessageReadParticipants) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetChannelMessageReadParticipants) ProtoMessage() {}

func (x *TLDialogGetChannelMessageReadParticipants) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetChannelMessageReadParticipants.ProtoReflect.Descriptor instead.
func (*TLDialogGetChannelMessageReadParticipants) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{39}
}

func (x *TLDialogGetChannelMessageReadParticipants) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetChannelMessageReadParticipants) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogGetChannelMessageReadParticipants) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *TLDialogGetChannelMessageReadParticipants) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogSetChatTheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor   TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId        int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType      int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId        int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	ThemeEmoticon string        `protobuf:"bytes,6,opt,name=theme_emoticon,json=themeEmoticon,proto3" json:"theme_emoticon,omitempty"`
}

func (x *TLDialogSetChatTheme) Reset() {
	*x = TLDialogSetChatTheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogSetChatTheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogSetChatTheme) ProtoMessage() {}

func (x *TLDialogSetChatTheme) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogSetChatTheme.ProtoReflect.Descriptor instead.
func (*TLDialogSetChatTheme) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{40}
}

func (x *TLDialogSetChatTheme) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogSetChatTheme) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogSetChatTheme) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLDialogSetChatTheme) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLDialogSetChatTheme) GetThemeEmoticon() string {
	if x != nil {
		return x.ThemeEmoticon
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLDialogSetHistoryTTL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	TtlPeriod   int32         `protobuf:"varint,6,opt,name=ttl_period,json=ttlPeriod,proto3" json:"ttl_period,omitempty"`
}

func (x *TLDialogSetHistoryTTL) Reset() {
	*x = TLDialogSetHistoryTTL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogSetHistoryTTL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogSetHistoryTTL) ProtoMessage() {}

func (x *TLDialogSetHistoryTTL) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogSetHistoryTTL.ProtoReflect.Descriptor instead.
func (*TLDialogSetHistoryTTL) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{41}
}

func (x *TLDialogSetHistoryTTL) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogSetHistoryTTL) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogSetHistoryTTL) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLDialogSetHistoryTTL) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLDialogSetHistoryTTL) GetTtlPeriod() int32 {
	if x != nil {
		return x.TtlPeriod
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetMyDialogsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	User        bool          `protobuf:"varint,4,opt,name=user,proto3" json:"user,omitempty"`
	Chat        bool          `protobuf:"varint,5,opt,name=chat,proto3" json:"chat,omitempty"`
	Channel     bool          `protobuf:"varint,6,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *TLDialogGetMyDialogsData) Reset() {
	*x = TLDialogGetMyDialogsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetMyDialogsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetMyDialogsData) ProtoMessage() {}

func (x *TLDialogGetMyDialogsData) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetMyDialogsData.ProtoReflect.Descriptor instead.
func (*TLDialogGetMyDialogsData) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{42}
}

func (x *TLDialogGetMyDialogsData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetMyDialogsData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogGetMyDialogsData) GetUser() bool {
	if x != nil {
		return x.User
	}
	return false
}

func (x *TLDialogGetMyDialogsData) GetChat() bool {
	if x != nil {
		return x.Chat
	}
	return false
}

func (x *TLDialogGetMyDialogsData) GetChannel() bool {
	if x != nil {
		return x.Channel
	}
	return false
}

// --------------------------------------------------------------------------------------------
type TLDialogGetSavedDialogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor   TLConstructor     `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId        int64             `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExcludePinned *mtproto.Bool     `protobuf:"bytes,4,opt,name=exclude_pinned,json=excludePinned,proto3" json:"exclude_pinned,omitempty"`
	OffsetDate    int32             `protobuf:"varint,5,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetId      int32             `protobuf:"varint,6,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetPeer    *mtproto.PeerUtil `protobuf:"bytes,7,opt,name=offset_peer,json=offsetPeer,proto3" json:"offset_peer,omitempty"`
	Limit         int32             `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TLDialogGetSavedDialogs) Reset() {
	*x = TLDialogGetSavedDialogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetSavedDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetSavedDialogs) ProtoMessage() {}

func (x *TLDialogGetSavedDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetSavedDialogs.ProtoReflect.Descriptor instead.
func (*TLDialogGetSavedDialogs) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{43}
}

func (x *TLDialogGetSavedDialogs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetSavedDialogs) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogGetSavedDialogs) GetExcludePinned() *mtproto.Bool {
	if x != nil {
		return x.ExcludePinned
	}
	return nil
}

func (x *TLDialogGetSavedDialogs) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *TLDialogGetSavedDialogs) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLDialogGetSavedDialogs) GetOffsetPeer() *mtproto.PeerUtil {
	if x != nil {
		return x.OffsetPeer
	}
	return nil
}

func (x *TLDialogGetSavedDialogs) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetPinnedSavedDialogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLDialogGetPinnedSavedDialogs) Reset() {
	*x = TLDialogGetPinnedSavedDialogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetPinnedSavedDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetPinnedSavedDialogs) ProtoMessage() {}

func (x *TLDialogGetPinnedSavedDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetPinnedSavedDialogs.ProtoReflect.Descriptor instead.
func (*TLDialogGetPinnedSavedDialogs) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{44}
}

func (x *TLDialogGetPinnedSavedDialogs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetPinnedSavedDialogs) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogToggleSavedDialogPin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor     `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64             `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Peer        *mtproto.PeerUtil `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
	Pinned      *mtproto.Bool     `protobuf:"bytes,5,opt,name=pinned,proto3" json:"pinned,omitempty"`
}

func (x *TLDialogToggleSavedDialogPin) Reset() {
	*x = TLDialogToggleSavedDialogPin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogToggleSavedDialogPin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogToggleSavedDialogPin) ProtoMessage() {}

func (x *TLDialogToggleSavedDialogPin) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogToggleSavedDialogPin.ProtoReflect.Descriptor instead.
func (*TLDialogToggleSavedDialogPin) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{45}
}

func (x *TLDialogToggleSavedDialogPin) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogToggleSavedDialogPin) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogToggleSavedDialogPin) GetPeer() *mtproto.PeerUtil {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *TLDialogToggleSavedDialogPin) GetPinned() *mtproto.Bool {
	if x != nil {
		return x.Pinned
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogReorderPinnedSavedDialogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64               `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Force       *mtproto.Bool       `protobuf:"bytes,4,opt,name=force,proto3" json:"force,omitempty"`
	Order       []*mtproto.PeerUtil `protobuf:"bytes,5,rep,name=order,proto3" json:"order,omitempty"`
}

func (x *TLDialogReorderPinnedSavedDialogs) Reset() {
	*x = TLDialogReorderPinnedSavedDialogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogReorderPinnedSavedDialogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogReorderPinnedSavedDialogs) ProtoMessage() {}

func (x *TLDialogReorderPinnedSavedDialogs) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogReorderPinnedSavedDialogs.ProtoReflect.Descriptor instead.
func (*TLDialogReorderPinnedSavedDialogs) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{46}
}

func (x *TLDialogReorderPinnedSavedDialogs) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogReorderPinnedSavedDialogs) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogReorderPinnedSavedDialogs) GetForce() *mtproto.Bool {
	if x != nil {
		return x.Force
	}
	return nil
}

func (x *TLDialogReorderPinnedSavedDialogs) GetOrder() []*mtproto.PeerUtil {
	if x != nil {
		return x.Order
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id          int32         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TLDialogGetDialogFilter) Reset() {
	*x = TLDialogGetDialogFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetDialogFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetDialogFilter) ProtoMessage() {}

func (x *TLDialogGetDialogFilter) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetDialogFilter.ProtoReflect.Descriptor instead.
func (*TLDialogGetDialogFilter) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{47}
}

func (x *TLDialogGetDialogFilter) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetDialogFilter) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogGetDialogFilter) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDialogGetDialogFilterBySlug struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Slug        string        `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (x *TLDialogGetDialogFilterBySlug) Reset() {
	*x = TLDialogGetDialogFilterBySlug{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogGetDialogFilterBySlug) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogGetDialogFilterBySlug) ProtoMessage() {}

func (x *TLDialogGetDialogFilterBySlug) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogGetDialogFilterBySlug.ProtoReflect.Descriptor instead.
func (*TLDialogGetDialogFilterBySlug) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{48}
}

func (x *TLDialogGetDialogFilterBySlug) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogGetDialogFilterBySlug) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogGetDialogFilterBySlug) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLDialogCreateDialogFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor  TLConstructor    `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId       int64            `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	DialogFilter *DialogFilterExt `protobuf:"bytes,4,opt,name=dialog_filter,json=dialogFilter,proto3" json:"dialog_filter,omitempty"`
}

func (x *TLDialogCreateDialogFilter) Reset() {
	*x = TLDialogCreateDialogFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogCreateDialogFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogCreateDialogFilter) ProtoMessage() {}

func (x *TLDialogCreateDialogFilter) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogCreateDialogFilter.ProtoReflect.Descriptor instead.
func (*TLDialogCreateDialogFilter) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{49}
}

func (x *TLDialogCreateDialogFilter) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogCreateDialogFilter) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogCreateDialogFilter) GetDialogFilter() *DialogFilterExt {
	if x != nil {
		return x.DialogFilter
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDialogUpdateUnreadCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor          TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=dialog.TLConstructor" json:"constructor,omitempty"`
	UserId               int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType             int32                  `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId               int64                  `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	UnreadCount          *wrapperspb.Int32Value `protobuf:"bytes,6,opt,name=unread_count,json=unreadCount,proto3" json:"unread_count,omitempty"`
	UnreadMentionsCount  *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=unread_mentions_count,json=unreadMentionsCount,proto3" json:"unread_mentions_count,omitempty"`
	UnreadReactionsCount *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=unread_reactions_count,json=unreadReactionsCount,proto3" json:"unread_reactions_count,omitempty"`
}

func (x *TLDialogUpdateUnreadCount) Reset() {
	*x = TLDialogUpdateUnreadCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDialogUpdateUnreadCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDialogUpdateUnreadCount) ProtoMessage() {}

func (x *TLDialogUpdateUnreadCount) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDialogUpdateUnreadCount.ProtoReflect.Descriptor instead.
func (*TLDialogUpdateUnreadCount) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{50}
}

func (x *TLDialogUpdateUnreadCount) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDialogUpdateUnreadCount) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLDialogUpdateUnreadCount) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLDialogUpdateUnreadCount) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLDialogUpdateUnreadCount) GetUnreadCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.UnreadCount
	}
	return nil
}

func (x *TLDialogUpdateUnreadCount) GetUnreadMentionsCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.UnreadMentionsCount
	}
	return nil
}

func (x *TLDialogUpdateUnreadCount) GetUnreadReactionsCount() *wrapperspb.Int32Value {
	if x != nil {
		return x.UnreadReactionsCount
	}
	return nil
}

// --------------------------------------------------------------------------------------------
// Vector api result type
type Vector_PeerWithDraftMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*PeerWithDraftMessage `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_PeerWithDraftMessage) Reset() {
	*x = Vector_PeerWithDraftMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_PeerWithDraftMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_PeerWithDraftMessage) ProtoMessage() {}

func (x *Vector_PeerWithDraftMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_PeerWithDraftMessage.ProtoReflect.Descriptor instead.
func (*Vector_PeerWithDraftMessage) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{51}
}

func (x *Vector_PeerWithDraftMessage) GetDatas() []*PeerWithDraftMessage {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_DialogPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*mtproto.DialogPeer `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_DialogPeer) Reset() {
	*x = Vector_DialogPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_DialogPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_DialogPeer) ProtoMessage() {}

func (x *Vector_DialogPeer) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_DialogPeer.ProtoReflect.Descriptor instead.
func (*Vector_DialogPeer) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{52}
}

func (x *Vector_DialogPeer) GetDatas() []*mtproto.DialogPeer {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_DialogExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*DialogExt `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_DialogExt) Reset() {
	*x = Vector_DialogExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_DialogExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_DialogExt) ProtoMessage() {}

func (x *Vector_DialogExt) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_DialogExt.ProtoReflect.Descriptor instead.
func (*Vector_DialogExt) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{53}
}

func (x *Vector_DialogExt) GetDatas() []*DialogExt {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_DialogFilterExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*DialogFilterExt `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_DialogFilterExt) Reset() {
	*x = Vector_DialogFilterExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_DialogFilterExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_DialogFilterExt) ProtoMessage() {}

func (x *Vector_DialogFilterExt) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_DialogFilterExt.ProtoReflect.Descriptor instead.
func (*Vector_DialogFilterExt) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{54}
}

func (x *Vector_DialogFilterExt) GetDatas() []*DialogFilterExt {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_DialogPinnedExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*DialogPinnedExt `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_DialogPinnedExt) Reset() {
	*x = Vector_DialogPinnedExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_DialogPinnedExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_DialogPinnedExt) ProtoMessage() {}

func (x *Vector_DialogPinnedExt) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_DialogPinnedExt.ProtoReflect.Descriptor instead.
func (*Vector_DialogPinnedExt) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{55}
}

func (x *Vector_DialogPinnedExt) GetDatas() []*DialogPinnedExt {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_Long struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []int64 `protobuf:"varint,1,rep,packed,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_Long) Reset() {
	*x = Vector_Long{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dialog_tl_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_Long) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_Long) ProtoMessage() {}

func (x *Vector_Long) ProtoReflect() protoreflect.Message {
	mi := &file_dialog_tl_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_Long.ProtoReflect.Descriptor instead.
func (*Vector_Long) Descriptor() ([]byte, []int) {
	return file_dialog_tl_proto_rawDescGZIP(), []int{56}
}

func (x *Vector_Long) GetDatas() []int64 {
	if x != nil {
		return x.Datas
	}
	return nil
}

var File_dialog_tl_proto protoreflect.FileDescriptor

var file_dialog_tl_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x74, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x06, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x73, 0x79, 0x6e, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xae, 0x02, 0x0a, 0x09, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x45, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x06, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x65, 0x6d, 0x6f, 0x74, 0x69,
	0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x74, 0x6c, 0x5f,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x74,
	0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0x37, 0x0a, 0x0c, 0x54, 0x4c, 0x5f, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x45, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x78, 0x74, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x22, 0x8d, 0x02, 0x0a, 0x0f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x45, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x62,
	0x79, 0x5f, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6a, 0x6f,
	0x69, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x3a,
	0x0a, 0x0d, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x43, 0x0a, 0x12, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0xbd, 0x01, 0x0a, 0x0f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x43, 0x0a, 0x12, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x45, 0x78, 0x74, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x05, 0x63, 0x68, 0x61, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x22, 0x41, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x50, 0x65, 0x65, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x21,
	0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x64, 0x72, 0x61, 0x66, 0x74, 0x22, 0x4b,
	0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0xb7, 0x01, 0x0a, 0x0f,
	0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x43, 0x0a, 0x12, 0x54, 0x4c, 0x5f, 0x73, 0x61, 0x76, 0x65,
	0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0xd5, 0x01, 0x0a, 0x1a, 0x54,
	0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x16, 0x54, 0x4c,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x44, 0x72, 0x61, 0x66,
	0x74, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x0b, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x0a, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x22, 0xca, 0x01, 0x0a, 0x19,
	0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x52, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0x75, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xe1, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65,
	0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x89, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc0, 0x01,
	0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a,
	0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x8b, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67,
	0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcd,
	0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x73, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa1,
	0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x79, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x37,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0xc7, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x49,
	0x6e, 0x62, 0x6f, 0x78, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x49, 0x64,
	0x22, 0xca, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x12,
	0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x5f,
	0x6f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x49, 0x64, 0x22, 0x8c, 0x04,
	0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x74, 0x6f, 0x70, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f,
	0x75, 0x74, 0x62, 0x6f, 0x78, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x4d, 0x61, 0x78, 0x49, 0x64,
	0x12, 0x46, 0x0a, 0x11, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x6e, 0x62, 0x6f, 0x78, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e,
	0x62, 0x6f, 0x78, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x75, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x12, 0x31, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x65, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x64, 0x61, 0x74, 0x65, 0x32, 0x22, 0xa0, 0x01, 0x0a,
	0x16, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22,
	0xa8, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0xcf, 0x01, 0x0a, 0x21, 0x54,
	0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xc4, 0x01, 0x0a,
	0x24, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x0d, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x6e, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8a, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x6f, 0x6c,
	0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x50, 0x65, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x65,
	0x65, 0x72, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x66, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb5, 0x01, 0x0a, 0x2b, 0x54, 0x4c,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x64, 0x22, 0xc7, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x65, 0x6d,
	0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x68,
	0x65, 0x6d, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x22, 0xc0, 0x01, 0x0a, 0x17,
	0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x54, 0x54, 0x4c, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x74, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x74, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x22, 0xb0,
	0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74,
	0x4d, 0x79, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x37, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0xab, 0x02, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x34, 0x0a, 0x0e, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x70, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x55, 0x74, 0x69, 0x6c, 0x52, 0x0a, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x73, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0xc0, 0x01, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x50, 0x69, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x55, 0x74, 0x69, 0x6c, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x06, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x55, 0x74, 0x69, 0x6c, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22,
	0x7d, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x87,
	0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x53, 0x6c,
	0x75, 0x67, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x22, 0xae, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x0d, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x52, 0x0c, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x89, 0x03, 0x0a, 0x1b, 0x54, 0x4c,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x4f, 0x0a, 0x15, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x75,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x51, 0x0a, 0x16, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x14, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x51, 0x0a, 0x1b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x50, 0x65, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x3e, 0x0a, 0x11, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x65, 0x65, 0x72, 0x12, 0x29, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x65, 0x65,
	0x72, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x3b, 0x0a, 0x10, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x78, 0x74, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x47, 0x0a, 0x16, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x12,
	0x2d, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x47,
	0x0a, 0x16, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x74,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x23, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x2a, 0xee, 0x0e, 0x0a,
	0x0d, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x25, 0x0a, 0x18, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0xb2, 0x89,
	0xf7, 0xb5, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1c, 0x0a, 0x0f, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x78, 0x74, 0x10, 0xe0, 0xd0, 0xe6, 0xee,
	0xfb, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1c, 0x0a, 0x15, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x74, 0x10,
	0xac, 0xc4, 0x9c, 0x75, 0x12, 0x22, 0x0a, 0x15, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x10, 0xfe, 0xb1,
	0xd2, 0xb6, 0xfa, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x17, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x10, 0xdd, 0xe8, 0xe6, 0xea, 0x01, 0x12, 0x1d, 0x0a, 0x15, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x10, 0xda, 0xd0, 0xbf, 0xbc, 0x07, 0x12, 0x25, 0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x9a, 0xb3, 0xab, 0xf6, 0x04, 0x12,
	0x2b, 0x0a, 0x1e, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x63, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x10, 0x9a, 0xe5, 0xc2, 0xdb, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x19,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74,
	0x41, 0x6c, 0x6c, 0x44, 0x72, 0x61, 0x66, 0x74, 0x73, 0x10, 0xe6, 0x9f, 0xf9, 0xe6, 0xfa, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x1b, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x73, 0x10, 0xfc, 0xa1, 0xe2, 0x8d, 0x04, 0x12, 0x25, 0x0a, 0x1d, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x10, 0x8e, 0xa2, 0xca, 0xa9, 0x04,
	0x12, 0x29, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x69, 0x6e,
	0x10, 0xaf, 0xca, 0xfb, 0xb3, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x31, 0x0a, 0x24, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x10, 0xf4, 0xf1, 0xf0, 0xd5, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x30,
	0x0a, 0x23, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67,
	0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x10, 0x84, 0x8c, 0xfa, 0xeb, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x24, 0x0a, 0x17, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x10, 0x96, 0xbc, 0xac, 0xb0,
	0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x73, 0x42, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xf1, 0x90, 0x96, 0xe9, 0xfa, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x29, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x10, 0xe5, 0xe8, 0xe6, 0x81, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x2a, 0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73,
	0x10, 0xb5, 0xb7, 0x88, 0xc6, 0xfa, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2e, 0x0a, 0x21, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73,
	0x10, 0xe7, 0xea, 0x8c, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x42, 0x79, 0x49, 0x64, 0x10, 0xf5, 0xf7, 0xfc, 0x8a, 0xfa, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x10, 0xf2, 0xe4, 0xf6, 0xd3, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a,
	0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78, 0x10, 0xb8, 0xf1,
	0x9f, 0xe9, 0x01, 0x12, 0x25, 0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x78, 0x10, 0xfe, 0xfa, 0xc3, 0xc3, 0x05, 0x12, 0x29, 0x0a, 0x21, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x10,
	0xa1, 0x95, 0xb8, 0xb6, 0x01, 0x12, 0x20, 0x0a, 0x19, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x10, 0xe3, 0xbb, 0xcc, 0x0d, 0x12, 0x2e, 0x0a, 0x21, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0xb1, 0x85, 0xef,
	0xfc, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x24, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10,
	0xaa, 0xe4, 0x8b, 0xb1, 0x01, 0x12, 0x2e, 0x0a, 0x27, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x10, 0x84, 0xc7, 0xa2, 0x55, 0x12, 0x26, 0x0a, 0x1f, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x10, 0x97, 0xfd, 0xf4, 0x0e, 0x12, 0x32, 0x0a,
	0x25, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0xbf, 0x96, 0xf0, 0x89, 0xfb, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x25, 0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x10, 0xbc, 0xd8, 0x9d, 0xe3, 0x06, 0x12, 0x24, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0xb5, 0x9d, 0xee, 0x88, 0x04, 0x12, 0x24,
	0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x50, 0x65, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x10, 0x9a,
	0x8d, 0x9a, 0xa2, 0x02, 0x12, 0x36, 0x0a, 0x2e, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x10, 0xbb, 0x9a, 0xf5, 0xc5, 0x02, 0x12, 0x26, 0x0a, 0x19,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x10, 0xaa, 0xc4, 0xba, 0xcd, 0xfe, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x1a, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54,
	0x54, 0x4c, 0x10, 0xac, 0xf1, 0xe6, 0x4e, 0x12, 0x25, 0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x79, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x10, 0x83, 0x9e, 0x82, 0xf7, 0x07, 0x12, 0x24,
	0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67,
	0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x10, 0xe8,
	0xac, 0x87, 0xc6, 0x03, 0x12, 0x2a, 0x0a, 0x22, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x61,
	0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x10, 0xe7, 0xef, 0x8e, 0x85, 0x04,
	0x12, 0x29, 0x0a, 0x21, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x50, 0x69, 0x6e, 0x10, 0xd9, 0xaf, 0xcc, 0xa7, 0x04, 0x12, 0x33, 0x0a, 0x26, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x73, 0x10, 0xd2, 0x97, 0xf3, 0xc2, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x29, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x10, 0x9c, 0x8c, 0xa0, 0x9c, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2a, 0x0a, 0x22, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x53, 0x6c, 0x75,
	0x67, 0x10, 0xef, 0xff, 0x95, 0xf2, 0x04, 0x12, 0x2c, 0x0a, 0x1f, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x10, 0xef, 0xc6, 0xad, 0xb6, 0xfc,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x1e, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xcd, 0xe6, 0xb0, 0xdd, 0x02, 0x32, 0x8e, 0x1b,
	0x0a, 0x09, 0x52, 0x50, 0x43, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x12, 0x4e, 0x0a, 0x17, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x22, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x18, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x13, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x73, 0x12, 0x1e, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x73, 0x1a, 0x23, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x50, 0x65, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44, 0x72, 0x61,
	0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x15, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x73, 0x1a, 0x23, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x50, 0x65, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x17, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x22, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x61, 0x72, 0x6b,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x16, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x50, 0x69, 0x6e, 0x12, 0x21, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x69, 0x6e, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x1e,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29,
	0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x4d, 0x61, 0x72, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x50, 0x65, 0x65, 0x72, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x1d, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x1a, 0x18, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x78, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a,
	0x11, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x73, 0x12, 0x1c, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73,
	0x1a, 0x18, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x78, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x19,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x73, 0x42, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x2e, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x42, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x78, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x16, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54,
	0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x17, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x22, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54,
	0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x18, 0x2e, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x45, 0x78, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x1b, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x14, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54,
	0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x78, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x14, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x16, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x62, 0x6f, 0x78,
	0x12, 0x21, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x49, 0x6e,
	0x62, 0x6f, 0x78, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x17, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x12,
	0x22, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x78, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x1b, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x12, 0x26, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x13,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x12, 0x1e, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x1b, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0e, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x1e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x29, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x50, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x21, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x2c, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x19, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x17, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65,
	0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22,
	0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0x1e, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45,
	0x78, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x16, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67,
	0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x21,
	0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x1a, 0x18, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x45, 0x78, 0x74, 0x22, 0x00, 0x12, 0x5d, 0x0a,
	0x16, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x12, 0x21, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x1e, 0x2e, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x45, 0x78, 0x74, 0x22, 0x00, 0x12, 0x76, 0x0a, 0x28,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x33, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x1a, 0x13, 0x2e,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x6f,
	0x6e, 0x67, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x13, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x14,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x54, 0x54, 0x4c, 0x12, 0x1f, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x54, 0x54, 0x4c, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x17, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x5f, 0x67, 0x65, 0x74, 0x4d, 0x79, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x22, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x79, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x73, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x13, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x16,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e,
	0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76,
	0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x17, 0x2e, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x1c, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67,
	0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x27, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x73, 0x1a, 0x17, 0x2e,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x1b, 0x64, 0x69, 0x61, 0x6c,
	0x6f, 0x67, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x50, 0x69, 0x6e, 0x12, 0x26, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c,
	0x65, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x50, 0x69, 0x6e, 0x1a,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x20, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x73, 0x12, 0x2b, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c,
	0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x53, 0x61, 0x76, 0x65, 0x64, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67,
	0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x16, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74,
	0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x64,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x17, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x1c, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65, 0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x27, 0x2e, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x67, 0x65,
	0x74, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x42, 0x79, 0x53,
	0x6c, 0x75, 0x67, 0x1a, 0x17, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x19, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x64, 0x69,
	0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x1a, 0x17, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2e, 0x44, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x45, 0x78, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x18,
	0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x72,
	0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x64, 0x69, 0x61, 0x6c, 0x6f,
	0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x42, 0x43,
	0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x61,
	0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2f, 0x62, 0x69, 0x7a, 0x2f, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dialog_tl_proto_rawDescOnce sync.Once
	file_dialog_tl_proto_rawDescData = file_dialog_tl_proto_rawDesc
)

func file_dialog_tl_proto_rawDescGZIP() []byte {
	file_dialog_tl_proto_rawDescOnce.Do(func() {
		file_dialog_tl_proto_rawDescData = protoimpl.X.CompressGZIP(file_dialog_tl_proto_rawDescData)
	})
	return file_dialog_tl_proto_rawDescData
}

var file_dialog_tl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dialog_tl_proto_msgTypes = make([]protoimpl.MessageInfo, 57)
var file_dialog_tl_proto_goTypes = []interface{}{
	(TLConstructor)(0),                                // 0: dialog.TLConstructor
	(*DialogExt)(nil),                                 // 1: dialog.DialogExt
	(*TLDialogExt)(nil),                               // 2: dialog.TL_dialogExt
	(*DialogFilterExt)(nil),                           // 3: dialog.DialogFilterExt
	(*TLDialogFilterExt)(nil),                         // 4: dialog.TL_dialogFilterExt
	(*DialogPinnedExt)(nil),                           // 5: dialog.DialogPinnedExt
	(*TLDialogPinnedExt)(nil),                         // 6: dialog.TL_dialogPinnedExt
	(*DialogsData)(nil),                               // 7: dialog.DialogsData
	(*TLSimpleDialogsData)(nil),                       // 8: dialog.TL_simpleDialogsData
	(*PeerWithDraftMessage)(nil),                      // 9: dialog.PeerWithDraftMessage
	(*TLUpdateDraftMessage)(nil),                      // 10: dialog.TL_updateDraftMessage
	(*SavedDialogList)(nil),                           // 11: dialog.SavedDialogList
	(*TLSavedDialogList)(nil),                         // 12: dialog.TL_savedDialogList
	(*TLDialogSaveDraftMessage)(nil),                  // 13: dialog.TL_dialog_saveDraftMessage
	(*TLDialogClearDraftMessage)(nil),                 // 14: dialog.TL_dialog_clearDraftMessage
	(*TLDialogGetAllDrafts)(nil),                      // 15: dialog.TL_dialog_getAllDrafts
	(*TLDialogClearAllDrafts)(nil),                    // 16: dialog.TL_dialog_clearAllDrafts
	(*TLDialogMarkDialogUnread)(nil),                  // 17: dialog.TL_dialog_markDialogUnread
	(*TLDialogToggleDialogPin)(nil),                   // 18: dialog.TL_dialog_toggleDialogPin
	(*TLDialogGetDialogUnreadMarkList)(nil),           // 19: dialog.TL_dialog_getDialogUnreadMarkList
	(*TLDialogGetDialogsByOffsetDate)(nil),            // 20: dialog.TL_dialog_getDialogsByOffsetDate
	(*TLDialogGetDialogs)(nil),                        // 21: dialog.TL_dialog_getDialogs
	(*TLDialogGetDialogsByIdList)(nil),                // 22: dialog.TL_dialog_getDialogsByIdList
	(*TLDialogGetDialogsCount)(nil),                   // 23: dialog.TL_dialog_getDialogsCount
	(*TLDialogGetPinnedDialogs)(nil),                  // 24: dialog.TL_dialog_getPinnedDialogs
	(*TLDialogReorderPinnedDialogs)(nil),              // 25: dialog.TL_dialog_reorderPinnedDialogs
	(*TLDialogGetDialogById)(nil),                     // 26: dialog.TL_dialog_getDialogById
	(*TLDialogGetTopMessage)(nil),                     // 27: dialog.TL_dialog_getTopMessage
	(*TLDialogUpdateReadInbox)(nil),                   // 28: dialog.TL_dialog_updateReadInbox
	(*TLDialogUpdateReadOutbox)(nil),                  // 29: dialog.TL_dialog_updateReadOutbox
	(*TLDialogInsertOrUpdateDialog)(nil),              // 30: dialog.TL_dialog_insertOrUpdateDialog
	(*TLDialogDeleteDialog)(nil),                      // 31: dialog.TL_dialog_deleteDialog
	(*TLDialogGetUserPinnedMessage)(nil),              // 32: dialog.TL_dialog_getUserPinnedMessage
	(*TLDialogUpdateUserPinnedMessage)(nil),           // 33: dialog.TL_dialog_updateUserPinnedMessage
	(*TLDialogInsertOrUpdateDialogFilter)(nil),        // 34: dialog.TL_dialog_insertOrUpdateDialogFilter
	(*TLDialogDeleteDialogFilter)(nil),                // 35: dialog.TL_dialog_deleteDialogFilter
	(*TLDialogUpdateDialogFiltersOrder)(nil),          // 36: dialog.TL_dialog_updateDialogFiltersOrder
	(*TLDialogGetDialogFilters)(nil),                  // 37: dialog.TL_dialog_getDialogFilters
	(*TLDialogGetDialogFolder)(nil),                   // 38: dialog.TL_dialog_getDialogFolder
	(*TLDialogEditPeerFolders)(nil),                   // 39: dialog.TL_dialog_editPeerFolders
	(*TLDialogGetChannelMessageReadParticipants)(nil), // 40: dialog.TL_dialog_getChannelMessageReadParticipants
	(*TLDialogSetChatTheme)(nil),                      // 41: dialog.TL_dialog_setChatTheme
	(*TLDialogSetHistoryTTL)(nil),                     // 42: dialog.TL_dialog_setHistoryTTL
	(*TLDialogGetMyDialogsData)(nil),                  // 43: dialog.TL_dialog_getMyDialogsData
	(*TLDialogGetSavedDialogs)(nil),                   // 44: dialog.TL_dialog_getSavedDialogs
	(*TLDialogGetPinnedSavedDialogs)(nil),             // 45: dialog.TL_dialog_getPinnedSavedDialogs
	(*TLDialogToggleSavedDialogPin)(nil),              // 46: dialog.TL_dialog_toggleSavedDialogPin
	(*TLDialogReorderPinnedSavedDialogs)(nil),         // 47: dialog.TL_dialog_reorderPinnedSavedDialogs
	(*TLDialogGetDialogFilter)(nil),                   // 48: dialog.TL_dialog_getDialogFilter
	(*TLDialogGetDialogFilterBySlug)(nil),             // 49: dialog.TL_dialog_getDialogFilterBySlug
	(*TLDialogCreateDialogFilter)(nil),                // 50: dialog.TL_dialog_createDialogFilter
	(*TLDialogUpdateUnreadCount)(nil),                 // 51: dialog.TL_dialog_updateUnreadCount
	(*Vector_PeerWithDraftMessage)(nil),               // 52: dialog.Vector_PeerWithDraftMessage
	(*Vector_DialogPeer)(nil),                         // 53: dialog.Vector_DialogPeer
	(*Vector_DialogExt)(nil),                          // 54: dialog.Vector_DialogExt
	(*Vector_DialogFilterExt)(nil),                    // 55: dialog.Vector_DialogFilterExt
	(*Vector_DialogPinnedExt)(nil),                    // 56: dialog.Vector_DialogPinnedExt
	(*Vector_Long)(nil),                               // 57: dialog.Vector_Long
	(*mtproto.Dialog)(nil),                            // 58: mtproto.Dialog
	(*mtproto.DialogFilter)(nil),                      // 59: mtproto.DialogFilter
	(*mtproto.Peer)(nil),                              // 60: mtproto.Peer
	(*mtproto.DraftMessage)(nil),                      // 61: mtproto.DraftMessage
	(*mtproto.SavedDialog)(nil),                       // 62: mtproto.SavedDialog
	(*mtproto.Bool)(nil),                              // 63: mtproto.Bool
	(*wrapperspb.Int32Value)(nil),                     // 64: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),                     // 65: google.protobuf.Int64Value
	(*mtproto.PeerUtil)(nil),                          // 66: mtproto.PeerUtil
	(*mtproto.DialogPeer)(nil),                        // 67: mtproto.DialogPeer
	(*mtproto.Int32)(nil),                             // 68: mtproto.Int32
}
var file_dialog_tl_proto_depIdxs = []int32{
	0,   // 0: dialog.DialogExt.constructor:type_name -> dialog.TLConstructor
	58,  // 1: dialog.DialogExt.dialog:type_name -> mtproto.Dialog
	1,   // 2: dialog.TL_dialogExt.data2:type_name -> dialog.DialogExt
	0,   // 3: dialog.DialogFilterExt.constructor:type_name -> dialog.TLConstructor
	59,  // 4: dialog.DialogFilterExt.dialog_filter:type_name -> mtproto.DialogFilter
	3,   // 5: dialog.TL_dialogFilterExt.data2:type_name -> dialog.DialogFilterExt
	0,   // 6: dialog.DialogPinnedExt.constructor:type_name -> dialog.TLConstructor
	5,   // 7: dialog.TL_dialogPinnedExt.data2:type_name -> dialog.DialogPinnedExt
	0,   // 8: dialog.DialogsData.constructor:type_name -> dialog.TLConstructor
	7,   // 9: dialog.TL_simpleDialogsData.data2:type_name -> dialog.DialogsData
	0,   // 10: dialog.PeerWithDraftMessage.constructor:type_name -> dialog.TLConstructor
	60,  // 11: dialog.PeerWithDraftMessage.peer:type_name -> mtproto.Peer
	61,  // 12: dialog.PeerWithDraftMessage.draft:type_name -> mtproto.DraftMessage
	9,   // 13: dialog.TL_updateDraftMessage.data2:type_name -> dialog.PeerWithDraftMessage
	0,   // 14: dialog.SavedDialogList.constructor:type_name -> dialog.TLConstructor
	62,  // 15: dialog.SavedDialogList.dialogs:type_name -> mtproto.SavedDialog
	11,  // 16: dialog.TL_savedDialogList.data2:type_name -> dialog.SavedDialogList
	0,   // 17: dialog.TL_dialog_saveDraftMessage.constructor:type_name -> dialog.TLConstructor
	61,  // 18: dialog.TL_dialog_saveDraftMessage.message:type_name -> mtproto.DraftMessage
	0,   // 19: dialog.TL_dialog_clearDraftMessage.constructor:type_name -> dialog.TLConstructor
	0,   // 20: dialog.TL_dialog_getAllDrafts.constructor:type_name -> dialog.TLConstructor
	0,   // 21: dialog.TL_dialog_clearAllDrafts.constructor:type_name -> dialog.TLConstructor
	0,   // 22: dialog.TL_dialog_markDialogUnread.constructor:type_name -> dialog.TLConstructor
	63,  // 23: dialog.TL_dialog_markDialogUnread.unread_mark:type_name -> mtproto.Bool
	0,   // 24: dialog.TL_dialog_toggleDialogPin.constructor:type_name -> dialog.TLConstructor
	63,  // 25: dialog.TL_dialog_toggleDialogPin.pinned:type_name -> mtproto.Bool
	0,   // 26: dialog.TL_dialog_getDialogUnreadMarkList.constructor:type_name -> dialog.TLConstructor
	0,   // 27: dialog.TL_dialog_getDialogsByOffsetDate.constructor:type_name -> dialog.TLConstructor
	63,  // 28: dialog.TL_dialog_getDialogsByOffsetDate.exclude_pinned:type_name -> mtproto.Bool
	0,   // 29: dialog.TL_dialog_getDialogs.constructor:type_name -> dialog.TLConstructor
	63,  // 30: dialog.TL_dialog_getDialogs.exclude_pinned:type_name -> mtproto.Bool
	0,   // 31: dialog.TL_dialog_getDialogsByIdList.constructor:type_name -> dialog.TLConstructor
	0,   // 32: dialog.TL_dialog_getDialogsCount.constructor:type_name -> dialog.TLConstructor
	63,  // 33: dialog.TL_dialog_getDialogsCount.exclude_pinned:type_name -> mtproto.Bool
	0,   // 34: dialog.TL_dialog_getPinnedDialogs.constructor:type_name -> dialog.TLConstructor
	0,   // 35: dialog.TL_dialog_reorderPinnedDialogs.constructor:type_name -> dialog.TLConstructor
	63,  // 36: dialog.TL_dialog_reorderPinnedDialogs.force:type_name -> mtproto.Bool
	0,   // 37: dialog.TL_dialog_getDialogById.constructor:type_name -> dialog.TLConstructor
	0,   // 38: dialog.TL_dialog_getTopMessage.constructor:type_name -> dialog.TLConstructor
	0,   // 39: dialog.TL_dialog_updateReadInbox.constructor:type_name -> dialog.TLConstructor
	0,   // 40: dialog.TL_dialog_updateReadOutbox.constructor:type_name -> dialog.TLConstructor
	0,   // 41: dialog.TL_dialog_insertOrUpdateDialog.constructor:type_name -> dialog.TLConstructor
	64,  // 42: dialog.TL_dialog_insertOrUpdateDialog.top_message:type_name -> google.protobuf.Int32Value
	64,  // 43: dialog.TL_dialog_insertOrUpdateDialog.read_outbox_max_id:type_name -> google.protobuf.Int32Value
	64,  // 44: dialog.TL_dialog_insertOrUpdateDialog.read_inbox_max_id:type_name -> google.protobuf.Int32Value
	64,  // 45: dialog.TL_dialog_insertOrUpdateDialog.unread_count:type_name -> google.protobuf.Int32Value
	65,  // 46: dialog.TL_dialog_insertOrUpdateDialog.date2:type_name -> google.protobuf.Int64Value
	0,   // 47: dialog.TL_dialog_deleteDialog.constructor:type_name -> dialog.TLConstructor
	0,   // 48: dialog.TL_dialog_getUserPinnedMessage.constructor:type_name -> dialog.TLConstructor
	0,   // 49: dialog.TL_dialog_updateUserPinnedMessage.constructor:type_name -> dialog.TLConstructor
	0,   // 50: dialog.TL_dialog_insertOrUpdateDialogFilter.constructor:type_name -> dialog.TLConstructor
	59,  // 51: dialog.TL_dialog_insertOrUpdateDialogFilter.dialog_filter:type_name -> mtproto.DialogFilter
	0,   // 52: dialog.TL_dialog_deleteDialogFilter.constructor:type_name -> dialog.TLConstructor
	0,   // 53: dialog.TL_dialog_updateDialogFiltersOrder.constructor:type_name -> dialog.TLConstructor
	0,   // 54: dialog.TL_dialog_getDialogFilters.constructor:type_name -> dialog.TLConstructor
	0,   // 55: dialog.TL_dialog_getDialogFolder.constructor:type_name -> dialog.TLConstructor
	0,   // 56: dialog.TL_dialog_editPeerFolders.constructor:type_name -> dialog.TLConstructor
	0,   // 57: dialog.TL_dialog_getChannelMessageReadParticipants.constructor:type_name -> dialog.TLConstructor
	0,   // 58: dialog.TL_dialog_setChatTheme.constructor:type_name -> dialog.TLConstructor
	0,   // 59: dialog.TL_dialog_setHistoryTTL.constructor:type_name -> dialog.TLConstructor
	0,   // 60: dialog.TL_dialog_getMyDialogsData.constructor:type_name -> dialog.TLConstructor
	0,   // 61: dialog.TL_dialog_getSavedDialogs.constructor:type_name -> dialog.TLConstructor
	63,  // 62: dialog.TL_dialog_getSavedDialogs.exclude_pinned:type_name -> mtproto.Bool
	66,  // 63: dialog.TL_dialog_getSavedDialogs.offset_peer:type_name -> mtproto.PeerUtil
	0,   // 64: dialog.TL_dialog_getPinnedSavedDialogs.constructor:type_name -> dialog.TLConstructor
	0,   // 65: dialog.TL_dialog_toggleSavedDialogPin.constructor:type_name -> dialog.TLConstructor
	66,  // 66: dialog.TL_dialog_toggleSavedDialogPin.peer:type_name -> mtproto.PeerUtil
	63,  // 67: dialog.TL_dialog_toggleSavedDialogPin.pinned:type_name -> mtproto.Bool
	0,   // 68: dialog.TL_dialog_reorderPinnedSavedDialogs.constructor:type_name -> dialog.TLConstructor
	63,  // 69: dialog.TL_dialog_reorderPinnedSavedDialogs.force:type_name -> mtproto.Bool
	66,  // 70: dialog.TL_dialog_reorderPinnedSavedDialogs.order:type_name -> mtproto.PeerUtil
	0,   // 71: dialog.TL_dialog_getDialogFilter.constructor:type_name -> dialog.TLConstructor
	0,   // 72: dialog.TL_dialog_getDialogFilterBySlug.constructor:type_name -> dialog.TLConstructor
	0,   // 73: dialog.TL_dialog_createDialogFilter.constructor:type_name -> dialog.TLConstructor
	3,   // 74: dialog.TL_dialog_createDialogFilter.dialog_filter:type_name -> dialog.DialogFilterExt
	0,   // 75: dialog.TL_dialog_updateUnreadCount.constructor:type_name -> dialog.TLConstructor
	64,  // 76: dialog.TL_dialog_updateUnreadCount.unread_count:type_name -> google.protobuf.Int32Value
	64,  // 77: dialog.TL_dialog_updateUnreadCount.unread_mentions_count:type_name -> google.protobuf.Int32Value
	64,  // 78: dialog.TL_dialog_updateUnreadCount.unread_reactions_count:type_name -> google.protobuf.Int32Value
	9,   // 79: dialog.Vector_PeerWithDraftMessage.datas:type_name -> dialog.PeerWithDraftMessage
	67,  // 80: dialog.Vector_DialogPeer.datas:type_name -> mtproto.DialogPeer
	1,   // 81: dialog.Vector_DialogExt.datas:type_name -> dialog.DialogExt
	3,   // 82: dialog.Vector_DialogFilterExt.datas:type_name -> dialog.DialogFilterExt
	5,   // 83: dialog.Vector_DialogPinnedExt.datas:type_name -> dialog.DialogPinnedExt
	13,  // 84: dialog.RPCDialog.dialog_saveDraftMessage:input_type -> dialog.TL_dialog_saveDraftMessage
	14,  // 85: dialog.RPCDialog.dialog_clearDraftMessage:input_type -> dialog.TL_dialog_clearDraftMessage
	15,  // 86: dialog.RPCDialog.dialog_getAllDrafts:input_type -> dialog.TL_dialog_getAllDrafts
	16,  // 87: dialog.RPCDialog.dialog_clearAllDrafts:input_type -> dialog.TL_dialog_clearAllDrafts
	17,  // 88: dialog.RPCDialog.dialog_markDialogUnread:input_type -> dialog.TL_dialog_markDialogUnread
	18,  // 89: dialog.RPCDialog.dialog_toggleDialogPin:input_type -> dialog.TL_dialog_toggleDialogPin
	19,  // 90: dialog.RPCDialog.dialog_getDialogUnreadMarkList:input_type -> dialog.TL_dialog_getDialogUnreadMarkList
	20,  // 91: dialog.RPCDialog.dialog_getDialogsByOffsetDate:input_type -> dialog.TL_dialog_getDialogsByOffsetDate
	21,  // 92: dialog.RPCDialog.dialog_getDialogs:input_type -> dialog.TL_dialog_getDialogs
	22,  // 93: dialog.RPCDialog.dialog_getDialogsByIdList:input_type -> dialog.TL_dialog_getDialogsByIdList
	23,  // 94: dialog.RPCDialog.dialog_getDialogsCount:input_type -> dialog.TL_dialog_getDialogsCount
	24,  // 95: dialog.RPCDialog.dialog_getPinnedDialogs:input_type -> dialog.TL_dialog_getPinnedDialogs
	25,  // 96: dialog.RPCDialog.dialog_reorderPinnedDialogs:input_type -> dialog.TL_dialog_reorderPinnedDialogs
	26,  // 97: dialog.RPCDialog.dialog_getDialogById:input_type -> dialog.TL_dialog_getDialogById
	27,  // 98: dialog.RPCDialog.dialog_getTopMessage:input_type -> dialog.TL_dialog_getTopMessage
	28,  // 99: dialog.RPCDialog.dialog_updateReadInbox:input_type -> dialog.TL_dialog_updateReadInbox
	29,  // 100: dialog.RPCDialog.dialog_updateReadOutbox:input_type -> dialog.TL_dialog_updateReadOutbox
	30,  // 101: dialog.RPCDialog.dialog_insertOrUpdateDialog:input_type -> dialog.TL_dialog_insertOrUpdateDialog
	31,  // 102: dialog.RPCDialog.dialog_deleteDialog:input_type -> dialog.TL_dialog_deleteDialog
	32,  // 103: dialog.RPCDialog.dialog_getUserPinnedMessage:input_type -> dialog.TL_dialog_getUserPinnedMessage
	33,  // 104: dialog.RPCDialog.dialog_updateUserPinnedMessage:input_type -> dialog.TL_dialog_updateUserPinnedMessage
	34,  // 105: dialog.RPCDialog.dialog_insertOrUpdateDialogFilter:input_type -> dialog.TL_dialog_insertOrUpdateDialogFilter
	35,  // 106: dialog.RPCDialog.dialog_deleteDialogFilter:input_type -> dialog.TL_dialog_deleteDialogFilter
	36,  // 107: dialog.RPCDialog.dialog_updateDialogFiltersOrder:input_type -> dialog.TL_dialog_updateDialogFiltersOrder
	37,  // 108: dialog.RPCDialog.dialog_getDialogFilters:input_type -> dialog.TL_dialog_getDialogFilters
	38,  // 109: dialog.RPCDialog.dialog_getDialogFolder:input_type -> dialog.TL_dialog_getDialogFolder
	39,  // 110: dialog.RPCDialog.dialog_editPeerFolders:input_type -> dialog.TL_dialog_editPeerFolders
	40,  // 111: dialog.RPCDialog.dialog_getChannelMessageReadParticipants:input_type -> dialog.TL_dialog_getChannelMessageReadParticipants
	41,  // 112: dialog.RPCDialog.dialog_setChatTheme:input_type -> dialog.TL_dialog_setChatTheme
	42,  // 113: dialog.RPCDialog.dialog_setHistoryTTL:input_type -> dialog.TL_dialog_setHistoryTTL
	43,  // 114: dialog.RPCDialog.dialog_getMyDialogsData:input_type -> dialog.TL_dialog_getMyDialogsData
	44,  // 115: dialog.RPCDialog.dialog_getSavedDialogs:input_type -> dialog.TL_dialog_getSavedDialogs
	45,  // 116: dialog.RPCDialog.dialog_getPinnedSavedDialogs:input_type -> dialog.TL_dialog_getPinnedSavedDialogs
	46,  // 117: dialog.RPCDialog.dialog_toggleSavedDialogPin:input_type -> dialog.TL_dialog_toggleSavedDialogPin
	47,  // 118: dialog.RPCDialog.dialog_reorderPinnedSavedDialogs:input_type -> dialog.TL_dialog_reorderPinnedSavedDialogs
	48,  // 119: dialog.RPCDialog.dialog_getDialogFilter:input_type -> dialog.TL_dialog_getDialogFilter
	49,  // 120: dialog.RPCDialog.dialog_getDialogFilterBySlug:input_type -> dialog.TL_dialog_getDialogFilterBySlug
	50,  // 121: dialog.RPCDialog.dialog_createDialogFilter:input_type -> dialog.TL_dialog_createDialogFilter
	51,  // 122: dialog.RPCDialog.dialog_updateUnreadCount:input_type -> dialog.TL_dialog_updateUnreadCount
	63,  // 123: dialog.RPCDialog.dialog_saveDraftMessage:output_type -> mtproto.Bool
	63,  // 124: dialog.RPCDialog.dialog_clearDraftMessage:output_type -> mtproto.Bool
	52,  // 125: dialog.RPCDialog.dialog_getAllDrafts:output_type -> dialog.Vector_PeerWithDraftMessage
	52,  // 126: dialog.RPCDialog.dialog_clearAllDrafts:output_type -> dialog.Vector_PeerWithDraftMessage
	63,  // 127: dialog.RPCDialog.dialog_markDialogUnread:output_type -> mtproto.Bool
	68,  // 128: dialog.RPCDialog.dialog_toggleDialogPin:output_type -> mtproto.Int32
	53,  // 129: dialog.RPCDialog.dialog_getDialogUnreadMarkList:output_type -> dialog.Vector_DialogPeer
	54,  // 130: dialog.RPCDialog.dialog_getDialogsByOffsetDate:output_type -> dialog.Vector_DialogExt
	54,  // 131: dialog.RPCDialog.dialog_getDialogs:output_type -> dialog.Vector_DialogExt
	54,  // 132: dialog.RPCDialog.dialog_getDialogsByIdList:output_type -> dialog.Vector_DialogExt
	68,  // 133: dialog.RPCDialog.dialog_getDialogsCount:output_type -> mtproto.Int32
	54,  // 134: dialog.RPCDialog.dialog_getPinnedDialogs:output_type -> dialog.Vector_DialogExt
	63,  // 135: dialog.RPCDialog.dialog_reorderPinnedDialogs:output_type -> mtproto.Bool
	1,   // 136: dialog.RPCDialog.dialog_getDialogById:output_type -> dialog.DialogExt
	68,  // 137: dialog.RPCDialog.dialog_getTopMessage:output_type -> mtproto.Int32
	63,  // 138: dialog.RPCDialog.dialog_updateReadInbox:output_type -> mtproto.Bool
	63,  // 139: dialog.RPCDialog.dialog_updateReadOutbox:output_type -> mtproto.Bool
	63,  // 140: dialog.RPCDialog.dialog_insertOrUpdateDialog:output_type -> mtproto.Bool
	63,  // 141: dialog.RPCDialog.dialog_deleteDialog:output_type -> mtproto.Bool
	68,  // 142: dialog.RPCDialog.dialog_getUserPinnedMessage:output_type -> mtproto.Int32
	63,  // 143: dialog.RPCDialog.dialog_updateUserPinnedMessage:output_type -> mtproto.Bool
	63,  // 144: dialog.RPCDialog.dialog_insertOrUpdateDialogFilter:output_type -> mtproto.Bool
	63,  // 145: dialog.RPCDialog.dialog_deleteDialogFilter:output_type -> mtproto.Bool
	63,  // 146: dialog.RPCDialog.dialog_updateDialogFiltersOrder:output_type -> mtproto.Bool
	55,  // 147: dialog.RPCDialog.dialog_getDialogFilters:output_type -> dialog.Vector_DialogFilterExt
	54,  // 148: dialog.RPCDialog.dialog_getDialogFolder:output_type -> dialog.Vector_DialogExt
	56,  // 149: dialog.RPCDialog.dialog_editPeerFolders:output_type -> dialog.Vector_DialogPinnedExt
	57,  // 150: dialog.RPCDialog.dialog_getChannelMessageReadParticipants:output_type -> dialog.Vector_Long
	63,  // 151: dialog.RPCDialog.dialog_setChatTheme:output_type -> mtproto.Bool
	63,  // 152: dialog.RPCDialog.dialog_setHistoryTTL:output_type -> mtproto.Bool
	7,   // 153: dialog.RPCDialog.dialog_getMyDialogsData:output_type -> dialog.DialogsData
	11,  // 154: dialog.RPCDialog.dialog_getSavedDialogs:output_type -> dialog.SavedDialogList
	11,  // 155: dialog.RPCDialog.dialog_getPinnedSavedDialogs:output_type -> dialog.SavedDialogList
	63,  // 156: dialog.RPCDialog.dialog_toggleSavedDialogPin:output_type -> mtproto.Bool
	63,  // 157: dialog.RPCDialog.dialog_reorderPinnedSavedDialogs:output_type -> mtproto.Bool
	3,   // 158: dialog.RPCDialog.dialog_getDialogFilter:output_type -> dialog.DialogFilterExt
	3,   // 159: dialog.RPCDialog.dialog_getDialogFilterBySlug:output_type -> dialog.DialogFilterExt
	3,   // 160: dialog.RPCDialog.dialog_createDialogFilter:output_type -> dialog.DialogFilterExt
	63,  // 161: dialog.RPCDialog.dialog_updateUnreadCount:output_type -> mtproto.Bool
	123, // [123:162] is the sub-list for method output_type
	84,  // [84:123] is the sub-list for method input_type
	84,  // [84:84] is the sub-list for extension type_name
	84,  // [84:84] is the sub-list for extension extendee
	0,   // [0:84] is the sub-list for field type_name
}

func init() { file_dialog_tl_proto_init() }
func file_dialog_tl_proto_init() {
	if File_dialog_tl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dialog_tl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialogExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialogFilterExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogFilterExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialogPinnedExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogPinnedExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DialogsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSimpleDialogsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerWithDraftMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUpdateDraftMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavedDialogList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSavedDialogList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogSaveDraftMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogClearDraftMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetAllDrafts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogClearAllDrafts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogMarkDialogUnread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogToggleDialogPin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetDialogUnreadMarkList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetDialogsByOffsetDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetDialogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetDialogsByIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetDialogsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetPinnedDialogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogReorderPinnedDialogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetDialogById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetTopMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogUpdateReadInbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogUpdateReadOutbox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogInsertOrUpdateDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogDeleteDialog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetUserPinnedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogUpdateUserPinnedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogInsertOrUpdateDialogFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogDeleteDialogFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogUpdateDialogFiltersOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetDialogFilters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetDialogFolder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogEditPeerFolders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetChannelMessageReadParticipants); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogSetChatTheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogSetHistoryTTL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetMyDialogsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetSavedDialogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetPinnedSavedDialogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogToggleSavedDialogPin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogReorderPinnedSavedDialogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetDialogFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogGetDialogFilterBySlug); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogCreateDialogFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDialogUpdateUnreadCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_PeerWithDraftMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_DialogPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_DialogExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_DialogFilterExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_DialogPinnedExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dialog_tl_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_Long); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dialog_tl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   57,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dialog_tl_proto_goTypes,
		DependencyIndexes: file_dialog_tl_proto_depIdxs,
		EnumInfos:         file_dialog_tl_proto_enumTypes,
		MessageInfos:      file_dialog_tl_proto_msgTypes,
	}.Build()
	File_dialog_tl_proto = out.File
	file_dialog_tl_proto_rawDesc = nil
	file_dialog_tl_proto_goTypes = nil
	file_dialog_tl_proto_depIdxs = nil
}
