//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: chat.tl.proto

package chat

import (
	context "context"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPCChat_ChatGetMutableChat_FullMethodName                   = "/chat.RPCChat/chat_getMutableChat"
	RPCChat_ChatGetChatListByIdList_FullMethodName              = "/chat.RPCChat/chat_getChatListByIdList"
	RPCChat_ChatGetChatBySelfId_FullMethodName                  = "/chat.RPCChat/chat_getChatBySelfId"
	RPCChat_ChatCreateChat2_FullMethodName                      = "/chat.RPCChat/chat_createChat2"
	RPCChat_ChatDeleteChat_FullMethodName                       = "/chat.RPCChat/chat_deleteChat"
	RPCChat_ChatDeleteChatUser_FullMethodName                   = "/chat.RPCChat/chat_deleteChatUser"
	RPCChat_ChatEditChatTitle_FullMethodName                    = "/chat.RPCChat/chat_editChatTitle"
	RPCChat_ChatEditChatAbout_FullMethodName                    = "/chat.RPCChat/chat_editChatAbout"
	RPCChat_ChatEditChatPhoto_FullMethodName                    = "/chat.RPCChat/chat_editChatPhoto"
	RPCChat_ChatEditChatAdmin_FullMethodName                    = "/chat.RPCChat/chat_editChatAdmin"
	RPCChat_ChatEditChatDefaultBannedRights_FullMethodName      = "/chat.RPCChat/chat_editChatDefaultBannedRights"
	RPCChat_ChatAddChatUser_FullMethodName                      = "/chat.RPCChat/chat_addChatUser"
	RPCChat_ChatGetMutableChatByLink_FullMethodName             = "/chat.RPCChat/chat_getMutableChatByLink"
	RPCChat_ChatToggleNoForwards_FullMethodName                 = "/chat.RPCChat/chat_toggleNoForwards"
	RPCChat_ChatMigratedToChannel_FullMethodName                = "/chat.RPCChat/chat_migratedToChannel"
	RPCChat_ChatGetChatParticipantIdList_FullMethodName         = "/chat.RPCChat/chat_getChatParticipantIdList"
	RPCChat_ChatGetUsersChatIdList_FullMethodName               = "/chat.RPCChat/chat_getUsersChatIdList"
	RPCChat_ChatGetMyChatList_FullMethodName                    = "/chat.RPCChat/chat_getMyChatList"
	RPCChat_ChatExportChatInvite_FullMethodName                 = "/chat.RPCChat/chat_exportChatInvite"
	RPCChat_ChatGetAdminsWithInvites_FullMethodName             = "/chat.RPCChat/chat_getAdminsWithInvites"
	RPCChat_ChatGetExportedChatInvite_FullMethodName            = "/chat.RPCChat/chat_getExportedChatInvite"
	RPCChat_ChatGetExportedChatInvites_FullMethodName           = "/chat.RPCChat/chat_getExportedChatInvites"
	RPCChat_ChatCheckChatInvite_FullMethodName                  = "/chat.RPCChat/chat_checkChatInvite"
	RPCChat_ChatImportChatInvite_FullMethodName                 = "/chat.RPCChat/chat_importChatInvite"
	RPCChat_ChatGetChatInviteImporters_FullMethodName           = "/chat.RPCChat/chat_getChatInviteImporters"
	RPCChat_ChatDeleteExportedChatInvite_FullMethodName         = "/chat.RPCChat/chat_deleteExportedChatInvite"
	RPCChat_ChatDeleteRevokedExportedChatInvites_FullMethodName = "/chat.RPCChat/chat_deleteRevokedExportedChatInvites"
	RPCChat_ChatEditExportedChatInvite_FullMethodName           = "/chat.RPCChat/chat_editExportedChatInvite"
	RPCChat_ChatSetChatAvailableReactions_FullMethodName        = "/chat.RPCChat/chat_setChatAvailableReactions"
	RPCChat_ChatSetHistoryTTL_FullMethodName                    = "/chat.RPCChat/chat_setHistoryTTL"
	RPCChat_ChatSearch_FullMethodName                           = "/chat.RPCChat/chat_search"
	RPCChat_ChatGetRecentChatInviteRequesters_FullMethodName    = "/chat.RPCChat/chat_getRecentChatInviteRequesters"
	RPCChat_ChatHideChatJoinRequests_FullMethodName             = "/chat.RPCChat/chat_hideChatJoinRequests"
	RPCChat_ChatImportChatInvite2_FullMethodName                = "/chat.RPCChat/chat_importChatInvite2"
)

// RPCChatClient is the client API for RPCChat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCChatClient interface {
	ChatGetMutableChat(ctx context.Context, in *TLChatGetMutableChat, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatGetChatListByIdList(ctx context.Context, in *TLChatGetChatListByIdList, opts ...grpc.CallOption) (*Vector_MutableChat, error)
	ChatGetChatBySelfId(ctx context.Context, in *TLChatGetChatBySelfId, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatCreateChat2(ctx context.Context, in *TLChatCreateChat2, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatDeleteChat(ctx context.Context, in *TLChatDeleteChat, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatDeleteChatUser(ctx context.Context, in *TLChatDeleteChatUser, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatEditChatTitle(ctx context.Context, in *TLChatEditChatTitle, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatEditChatAbout(ctx context.Context, in *TLChatEditChatAbout, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatEditChatPhoto(ctx context.Context, in *TLChatEditChatPhoto, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatEditChatAdmin(ctx context.Context, in *TLChatEditChatAdmin, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatEditChatDefaultBannedRights(ctx context.Context, in *TLChatEditChatDefaultBannedRights, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatAddChatUser(ctx context.Context, in *TLChatAddChatUser, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatGetMutableChatByLink(ctx context.Context, in *TLChatGetMutableChatByLink, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatToggleNoForwards(ctx context.Context, in *TLChatToggleNoForwards, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatMigratedToChannel(ctx context.Context, in *TLChatMigratedToChannel, opts ...grpc.CallOption) (*mtproto.Bool, error)
	ChatGetChatParticipantIdList(ctx context.Context, in *TLChatGetChatParticipantIdList, opts ...grpc.CallOption) (*Vector_Long, error)
	ChatGetUsersChatIdList(ctx context.Context, in *TLChatGetUsersChatIdList, opts ...grpc.CallOption) (*Vector_UserChatIdList, error)
	ChatGetMyChatList(ctx context.Context, in *TLChatGetMyChatList, opts ...grpc.CallOption) (*Vector_MutableChat, error)
	ChatExportChatInvite(ctx context.Context, in *TLChatExportChatInvite, opts ...grpc.CallOption) (*mtproto.ExportedChatInvite, error)
	ChatGetAdminsWithInvites(ctx context.Context, in *TLChatGetAdminsWithInvites, opts ...grpc.CallOption) (*Vector_ChatAdminWithInvites, error)
	ChatGetExportedChatInvite(ctx context.Context, in *TLChatGetExportedChatInvite, opts ...grpc.CallOption) (*mtproto.ExportedChatInvite, error)
	ChatGetExportedChatInvites(ctx context.Context, in *TLChatGetExportedChatInvites, opts ...grpc.CallOption) (*Vector_ExportedChatInvite, error)
	ChatCheckChatInvite(ctx context.Context, in *TLChatCheckChatInvite, opts ...grpc.CallOption) (*ChatInviteExt, error)
	ChatImportChatInvite(ctx context.Context, in *TLChatImportChatInvite, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatGetChatInviteImporters(ctx context.Context, in *TLChatGetChatInviteImporters, opts ...grpc.CallOption) (*Vector_ChatInviteImporter, error)
	ChatDeleteExportedChatInvite(ctx context.Context, in *TLChatDeleteExportedChatInvite, opts ...grpc.CallOption) (*mtproto.Bool, error)
	ChatDeleteRevokedExportedChatInvites(ctx context.Context, in *TLChatDeleteRevokedExportedChatInvites, opts ...grpc.CallOption) (*mtproto.Bool, error)
	ChatEditExportedChatInvite(ctx context.Context, in *TLChatEditExportedChatInvite, opts ...grpc.CallOption) (*Vector_ExportedChatInvite, error)
	ChatSetChatAvailableReactions(ctx context.Context, in *TLChatSetChatAvailableReactions, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatSetHistoryTTL(ctx context.Context, in *TLChatSetHistoryTTL, opts ...grpc.CallOption) (*mtproto.MutableChat, error)
	ChatSearch(ctx context.Context, in *TLChatSearch, opts ...grpc.CallOption) (*Vector_MutableChat, error)
	ChatGetRecentChatInviteRequesters(ctx context.Context, in *TLChatGetRecentChatInviteRequesters, opts ...grpc.CallOption) (*RecentChatInviteRequesters, error)
	ChatHideChatJoinRequests(ctx context.Context, in *TLChatHideChatJoinRequests, opts ...grpc.CallOption) (*RecentChatInviteRequesters, error)
	ChatImportChatInvite2(ctx context.Context, in *TLChatImportChatInvite2, opts ...grpc.CallOption) (*ChatInviteImported, error)
}

type rPCChatClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCChatClient(cc grpc.ClientConnInterface) RPCChatClient {
	return &rPCChatClient{cc}
}

func (c *rPCChatClient) ChatGetMutableChat(ctx context.Context, in *TLChatGetMutableChat, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatGetMutableChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetChatListByIdList(ctx context.Context, in *TLChatGetChatListByIdList, opts ...grpc.CallOption) (*Vector_MutableChat, error) {
	out := new(Vector_MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatGetChatListByIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetChatBySelfId(ctx context.Context, in *TLChatGetChatBySelfId, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatGetChatBySelfId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatCreateChat2(ctx context.Context, in *TLChatCreateChat2, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatCreateChat2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatDeleteChat(ctx context.Context, in *TLChatDeleteChat, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatDeleteChat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatDeleteChatUser(ctx context.Context, in *TLChatDeleteChatUser, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatDeleteChatUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatEditChatTitle(ctx context.Context, in *TLChatEditChatTitle, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatEditChatTitle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatEditChatAbout(ctx context.Context, in *TLChatEditChatAbout, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatEditChatAbout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatEditChatPhoto(ctx context.Context, in *TLChatEditChatPhoto, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatEditChatPhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatEditChatAdmin(ctx context.Context, in *TLChatEditChatAdmin, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatEditChatAdmin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatEditChatDefaultBannedRights(ctx context.Context, in *TLChatEditChatDefaultBannedRights, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatEditChatDefaultBannedRights_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatAddChatUser(ctx context.Context, in *TLChatAddChatUser, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatAddChatUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetMutableChatByLink(ctx context.Context, in *TLChatGetMutableChatByLink, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatGetMutableChatByLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatToggleNoForwards(ctx context.Context, in *TLChatToggleNoForwards, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatToggleNoForwards_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatMigratedToChannel(ctx context.Context, in *TLChatMigratedToChannel, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCChat_ChatMigratedToChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetChatParticipantIdList(ctx context.Context, in *TLChatGetChatParticipantIdList, opts ...grpc.CallOption) (*Vector_Long, error) {
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, RPCChat_ChatGetChatParticipantIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetUsersChatIdList(ctx context.Context, in *TLChatGetUsersChatIdList, opts ...grpc.CallOption) (*Vector_UserChatIdList, error) {
	out := new(Vector_UserChatIdList)
	err := c.cc.Invoke(ctx, RPCChat_ChatGetUsersChatIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetMyChatList(ctx context.Context, in *TLChatGetMyChatList, opts ...grpc.CallOption) (*Vector_MutableChat, error) {
	out := new(Vector_MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatGetMyChatList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatExportChatInvite(ctx context.Context, in *TLChatExportChatInvite, opts ...grpc.CallOption) (*mtproto.ExportedChatInvite, error) {
	out := new(mtproto.ExportedChatInvite)
	err := c.cc.Invoke(ctx, RPCChat_ChatExportChatInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetAdminsWithInvites(ctx context.Context, in *TLChatGetAdminsWithInvites, opts ...grpc.CallOption) (*Vector_ChatAdminWithInvites, error) {
	out := new(Vector_ChatAdminWithInvites)
	err := c.cc.Invoke(ctx, RPCChat_ChatGetAdminsWithInvites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetExportedChatInvite(ctx context.Context, in *TLChatGetExportedChatInvite, opts ...grpc.CallOption) (*mtproto.ExportedChatInvite, error) {
	out := new(mtproto.ExportedChatInvite)
	err := c.cc.Invoke(ctx, RPCChat_ChatGetExportedChatInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetExportedChatInvites(ctx context.Context, in *TLChatGetExportedChatInvites, opts ...grpc.CallOption) (*Vector_ExportedChatInvite, error) {
	out := new(Vector_ExportedChatInvite)
	err := c.cc.Invoke(ctx, RPCChat_ChatGetExportedChatInvites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatCheckChatInvite(ctx context.Context, in *TLChatCheckChatInvite, opts ...grpc.CallOption) (*ChatInviteExt, error) {
	out := new(ChatInviteExt)
	err := c.cc.Invoke(ctx, RPCChat_ChatCheckChatInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatImportChatInvite(ctx context.Context, in *TLChatImportChatInvite, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatImportChatInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetChatInviteImporters(ctx context.Context, in *TLChatGetChatInviteImporters, opts ...grpc.CallOption) (*Vector_ChatInviteImporter, error) {
	out := new(Vector_ChatInviteImporter)
	err := c.cc.Invoke(ctx, RPCChat_ChatGetChatInviteImporters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatDeleteExportedChatInvite(ctx context.Context, in *TLChatDeleteExportedChatInvite, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCChat_ChatDeleteExportedChatInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatDeleteRevokedExportedChatInvites(ctx context.Context, in *TLChatDeleteRevokedExportedChatInvites, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCChat_ChatDeleteRevokedExportedChatInvites_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatEditExportedChatInvite(ctx context.Context, in *TLChatEditExportedChatInvite, opts ...grpc.CallOption) (*Vector_ExportedChatInvite, error) {
	out := new(Vector_ExportedChatInvite)
	err := c.cc.Invoke(ctx, RPCChat_ChatEditExportedChatInvite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatSetChatAvailableReactions(ctx context.Context, in *TLChatSetChatAvailableReactions, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatSetChatAvailableReactions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatSetHistoryTTL(ctx context.Context, in *TLChatSetHistoryTTL, opts ...grpc.CallOption) (*mtproto.MutableChat, error) {
	out := new(mtproto.MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatSetHistoryTTL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatSearch(ctx context.Context, in *TLChatSearch, opts ...grpc.CallOption) (*Vector_MutableChat, error) {
	out := new(Vector_MutableChat)
	err := c.cc.Invoke(ctx, RPCChat_ChatSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatGetRecentChatInviteRequesters(ctx context.Context, in *TLChatGetRecentChatInviteRequesters, opts ...grpc.CallOption) (*RecentChatInviteRequesters, error) {
	out := new(RecentChatInviteRequesters)
	err := c.cc.Invoke(ctx, RPCChat_ChatGetRecentChatInviteRequesters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatHideChatJoinRequests(ctx context.Context, in *TLChatHideChatJoinRequests, opts ...grpc.CallOption) (*RecentChatInviteRequesters, error) {
	out := new(RecentChatInviteRequesters)
	err := c.cc.Invoke(ctx, RPCChat_ChatHideChatJoinRequests_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCChatClient) ChatImportChatInvite2(ctx context.Context, in *TLChatImportChatInvite2, opts ...grpc.CallOption) (*ChatInviteImported, error) {
	out := new(ChatInviteImported)
	err := c.cc.Invoke(ctx, RPCChat_ChatImportChatInvite2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCChatServer is the server API for RPCChat service.
// All implementations should embed UnimplementedRPCChatServer
// for forward compatibility
type RPCChatServer interface {
	ChatGetMutableChat(context.Context, *TLChatGetMutableChat) (*mtproto.MutableChat, error)
	ChatGetChatListByIdList(context.Context, *TLChatGetChatListByIdList) (*Vector_MutableChat, error)
	ChatGetChatBySelfId(context.Context, *TLChatGetChatBySelfId) (*mtproto.MutableChat, error)
	ChatCreateChat2(context.Context, *TLChatCreateChat2) (*mtproto.MutableChat, error)
	ChatDeleteChat(context.Context, *TLChatDeleteChat) (*mtproto.MutableChat, error)
	ChatDeleteChatUser(context.Context, *TLChatDeleteChatUser) (*mtproto.MutableChat, error)
	ChatEditChatTitle(context.Context, *TLChatEditChatTitle) (*mtproto.MutableChat, error)
	ChatEditChatAbout(context.Context, *TLChatEditChatAbout) (*mtproto.MutableChat, error)
	ChatEditChatPhoto(context.Context, *TLChatEditChatPhoto) (*mtproto.MutableChat, error)
	ChatEditChatAdmin(context.Context, *TLChatEditChatAdmin) (*mtproto.MutableChat, error)
	ChatEditChatDefaultBannedRights(context.Context, *TLChatEditChatDefaultBannedRights) (*mtproto.MutableChat, error)
	ChatAddChatUser(context.Context, *TLChatAddChatUser) (*mtproto.MutableChat, error)
	ChatGetMutableChatByLink(context.Context, *TLChatGetMutableChatByLink) (*mtproto.MutableChat, error)
	ChatToggleNoForwards(context.Context, *TLChatToggleNoForwards) (*mtproto.MutableChat, error)
	ChatMigratedToChannel(context.Context, *TLChatMigratedToChannel) (*mtproto.Bool, error)
	ChatGetChatParticipantIdList(context.Context, *TLChatGetChatParticipantIdList) (*Vector_Long, error)
	ChatGetUsersChatIdList(context.Context, *TLChatGetUsersChatIdList) (*Vector_UserChatIdList, error)
	ChatGetMyChatList(context.Context, *TLChatGetMyChatList) (*Vector_MutableChat, error)
	ChatExportChatInvite(context.Context, *TLChatExportChatInvite) (*mtproto.ExportedChatInvite, error)
	ChatGetAdminsWithInvites(context.Context, *TLChatGetAdminsWithInvites) (*Vector_ChatAdminWithInvites, error)
	ChatGetExportedChatInvite(context.Context, *TLChatGetExportedChatInvite) (*mtproto.ExportedChatInvite, error)
	ChatGetExportedChatInvites(context.Context, *TLChatGetExportedChatInvites) (*Vector_ExportedChatInvite, error)
	ChatCheckChatInvite(context.Context, *TLChatCheckChatInvite) (*ChatInviteExt, error)
	ChatImportChatInvite(context.Context, *TLChatImportChatInvite) (*mtproto.MutableChat, error)
	ChatGetChatInviteImporters(context.Context, *TLChatGetChatInviteImporters) (*Vector_ChatInviteImporter, error)
	ChatDeleteExportedChatInvite(context.Context, *TLChatDeleteExportedChatInvite) (*mtproto.Bool, error)
	ChatDeleteRevokedExportedChatInvites(context.Context, *TLChatDeleteRevokedExportedChatInvites) (*mtproto.Bool, error)
	ChatEditExportedChatInvite(context.Context, *TLChatEditExportedChatInvite) (*Vector_ExportedChatInvite, error)
	ChatSetChatAvailableReactions(context.Context, *TLChatSetChatAvailableReactions) (*mtproto.MutableChat, error)
	ChatSetHistoryTTL(context.Context, *TLChatSetHistoryTTL) (*mtproto.MutableChat, error)
	ChatSearch(context.Context, *TLChatSearch) (*Vector_MutableChat, error)
	ChatGetRecentChatInviteRequesters(context.Context, *TLChatGetRecentChatInviteRequesters) (*RecentChatInviteRequesters, error)
	ChatHideChatJoinRequests(context.Context, *TLChatHideChatJoinRequests) (*RecentChatInviteRequesters, error)
	ChatImportChatInvite2(context.Context, *TLChatImportChatInvite2) (*ChatInviteImported, error)
}

// UnimplementedRPCChatServer should be embedded to have forward compatible implementations.
type UnimplementedRPCChatServer struct {
}

func (UnimplementedRPCChatServer) ChatGetMutableChat(context.Context, *TLChatGetMutableChat) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetMutableChat not implemented")
}
func (UnimplementedRPCChatServer) ChatGetChatListByIdList(context.Context, *TLChatGetChatListByIdList) (*Vector_MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetChatListByIdList not implemented")
}
func (UnimplementedRPCChatServer) ChatGetChatBySelfId(context.Context, *TLChatGetChatBySelfId) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetChatBySelfId not implemented")
}
func (UnimplementedRPCChatServer) ChatCreateChat2(context.Context, *TLChatCreateChat2) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatCreateChat2 not implemented")
}
func (UnimplementedRPCChatServer) ChatDeleteChat(context.Context, *TLChatDeleteChat) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatDeleteChat not implemented")
}
func (UnimplementedRPCChatServer) ChatDeleteChatUser(context.Context, *TLChatDeleteChatUser) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatDeleteChatUser not implemented")
}
func (UnimplementedRPCChatServer) ChatEditChatTitle(context.Context, *TLChatEditChatTitle) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatEditChatTitle not implemented")
}
func (UnimplementedRPCChatServer) ChatEditChatAbout(context.Context, *TLChatEditChatAbout) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatEditChatAbout not implemented")
}
func (UnimplementedRPCChatServer) ChatEditChatPhoto(context.Context, *TLChatEditChatPhoto) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatEditChatPhoto not implemented")
}
func (UnimplementedRPCChatServer) ChatEditChatAdmin(context.Context, *TLChatEditChatAdmin) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatEditChatAdmin not implemented")
}
func (UnimplementedRPCChatServer) ChatEditChatDefaultBannedRights(context.Context, *TLChatEditChatDefaultBannedRights) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatEditChatDefaultBannedRights not implemented")
}
func (UnimplementedRPCChatServer) ChatAddChatUser(context.Context, *TLChatAddChatUser) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatAddChatUser not implemented")
}
func (UnimplementedRPCChatServer) ChatGetMutableChatByLink(context.Context, *TLChatGetMutableChatByLink) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetMutableChatByLink not implemented")
}
func (UnimplementedRPCChatServer) ChatToggleNoForwards(context.Context, *TLChatToggleNoForwards) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatToggleNoForwards not implemented")
}
func (UnimplementedRPCChatServer) ChatMigratedToChannel(context.Context, *TLChatMigratedToChannel) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatMigratedToChannel not implemented")
}
func (UnimplementedRPCChatServer) ChatGetChatParticipantIdList(context.Context, *TLChatGetChatParticipantIdList) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetChatParticipantIdList not implemented")
}
func (UnimplementedRPCChatServer) ChatGetUsersChatIdList(context.Context, *TLChatGetUsersChatIdList) (*Vector_UserChatIdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetUsersChatIdList not implemented")
}
func (UnimplementedRPCChatServer) ChatGetMyChatList(context.Context, *TLChatGetMyChatList) (*Vector_MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetMyChatList not implemented")
}
func (UnimplementedRPCChatServer) ChatExportChatInvite(context.Context, *TLChatExportChatInvite) (*mtproto.ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatExportChatInvite not implemented")
}
func (UnimplementedRPCChatServer) ChatGetAdminsWithInvites(context.Context, *TLChatGetAdminsWithInvites) (*Vector_ChatAdminWithInvites, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetAdminsWithInvites not implemented")
}
func (UnimplementedRPCChatServer) ChatGetExportedChatInvite(context.Context, *TLChatGetExportedChatInvite) (*mtproto.ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetExportedChatInvite not implemented")
}
func (UnimplementedRPCChatServer) ChatGetExportedChatInvites(context.Context, *TLChatGetExportedChatInvites) (*Vector_ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetExportedChatInvites not implemented")
}
func (UnimplementedRPCChatServer) ChatCheckChatInvite(context.Context, *TLChatCheckChatInvite) (*ChatInviteExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatCheckChatInvite not implemented")
}
func (UnimplementedRPCChatServer) ChatImportChatInvite(context.Context, *TLChatImportChatInvite) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatImportChatInvite not implemented")
}
func (UnimplementedRPCChatServer) ChatGetChatInviteImporters(context.Context, *TLChatGetChatInviteImporters) (*Vector_ChatInviteImporter, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetChatInviteImporters not implemented")
}
func (UnimplementedRPCChatServer) ChatDeleteExportedChatInvite(context.Context, *TLChatDeleteExportedChatInvite) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatDeleteExportedChatInvite not implemented")
}
func (UnimplementedRPCChatServer) ChatDeleteRevokedExportedChatInvites(context.Context, *TLChatDeleteRevokedExportedChatInvites) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatDeleteRevokedExportedChatInvites not implemented")
}
func (UnimplementedRPCChatServer) ChatEditExportedChatInvite(context.Context, *TLChatEditExportedChatInvite) (*Vector_ExportedChatInvite, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatEditExportedChatInvite not implemented")
}
func (UnimplementedRPCChatServer) ChatSetChatAvailableReactions(context.Context, *TLChatSetChatAvailableReactions) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatSetChatAvailableReactions not implemented")
}
func (UnimplementedRPCChatServer) ChatSetHistoryTTL(context.Context, *TLChatSetHistoryTTL) (*mtproto.MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatSetHistoryTTL not implemented")
}
func (UnimplementedRPCChatServer) ChatSearch(context.Context, *TLChatSearch) (*Vector_MutableChat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatSearch not implemented")
}
func (UnimplementedRPCChatServer) ChatGetRecentChatInviteRequesters(context.Context, *TLChatGetRecentChatInviteRequesters) (*RecentChatInviteRequesters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatGetRecentChatInviteRequesters not implemented")
}
func (UnimplementedRPCChatServer) ChatHideChatJoinRequests(context.Context, *TLChatHideChatJoinRequests) (*RecentChatInviteRequesters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatHideChatJoinRequests not implemented")
}
func (UnimplementedRPCChatServer) ChatImportChatInvite2(context.Context, *TLChatImportChatInvite2) (*ChatInviteImported, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatImportChatInvite2 not implemented")
}

// UnsafeRPCChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCChatServer will
// result in compilation errors.
type UnsafeRPCChatServer interface {
	mustEmbedUnimplementedRPCChatServer()
}

func RegisterRPCChatServer(s grpc.ServiceRegistrar, srv RPCChatServer) {
	s.RegisterService(&RPCChat_ServiceDesc, srv)
}

func _RPCChat_ChatGetMutableChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetMutableChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetMutableChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatGetMutableChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetMutableChat(ctx, req.(*TLChatGetMutableChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetChatListByIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetChatListByIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetChatListByIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatGetChatListByIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetChatListByIdList(ctx, req.(*TLChatGetChatListByIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetChatBySelfId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetChatBySelfId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetChatBySelfId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatGetChatBySelfId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetChatBySelfId(ctx, req.(*TLChatGetChatBySelfId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatCreateChat2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatCreateChat2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatCreateChat2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatCreateChat2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatCreateChat2(ctx, req.(*TLChatCreateChat2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatDeleteChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatDeleteChat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatDeleteChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatDeleteChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatDeleteChat(ctx, req.(*TLChatDeleteChat))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatDeleteChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatDeleteChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatDeleteChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatDeleteChatUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatDeleteChatUser(ctx, req.(*TLChatDeleteChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatEditChatTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatEditChatTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatEditChatTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatEditChatTitle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatEditChatTitle(ctx, req.(*TLChatEditChatTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatEditChatAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatEditChatAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatEditChatAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatEditChatAbout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatEditChatAbout(ctx, req.(*TLChatEditChatAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatEditChatPhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatEditChatPhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatEditChatPhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatEditChatPhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatEditChatPhoto(ctx, req.(*TLChatEditChatPhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatEditChatAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatEditChatAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatEditChatAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatEditChatAdmin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatEditChatAdmin(ctx, req.(*TLChatEditChatAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatEditChatDefaultBannedRights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatEditChatDefaultBannedRights)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatEditChatDefaultBannedRights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatEditChatDefaultBannedRights_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatEditChatDefaultBannedRights(ctx, req.(*TLChatEditChatDefaultBannedRights))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatAddChatUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatAddChatUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatAddChatUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatAddChatUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatAddChatUser(ctx, req.(*TLChatAddChatUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetMutableChatByLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetMutableChatByLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetMutableChatByLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatGetMutableChatByLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetMutableChatByLink(ctx, req.(*TLChatGetMutableChatByLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatToggleNoForwards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatToggleNoForwards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatToggleNoForwards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatToggleNoForwards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatToggleNoForwards(ctx, req.(*TLChatToggleNoForwards))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatMigratedToChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatMigratedToChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatMigratedToChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatMigratedToChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatMigratedToChannel(ctx, req.(*TLChatMigratedToChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetChatParticipantIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetChatParticipantIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetChatParticipantIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatGetChatParticipantIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetChatParticipantIdList(ctx, req.(*TLChatGetChatParticipantIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetUsersChatIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetUsersChatIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetUsersChatIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatGetUsersChatIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetUsersChatIdList(ctx, req.(*TLChatGetUsersChatIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetMyChatList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetMyChatList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetMyChatList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatGetMyChatList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetMyChatList(ctx, req.(*TLChatGetMyChatList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatExportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatExportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatExportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatExportChatInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatExportChatInvite(ctx, req.(*TLChatExportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetAdminsWithInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetAdminsWithInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetAdminsWithInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatGetAdminsWithInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetAdminsWithInvites(ctx, req.(*TLChatGetAdminsWithInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetExportedChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetExportedChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetExportedChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatGetExportedChatInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetExportedChatInvite(ctx, req.(*TLChatGetExportedChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetExportedChatInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetExportedChatInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetExportedChatInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatGetExportedChatInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetExportedChatInvites(ctx, req.(*TLChatGetExportedChatInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatCheckChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatCheckChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatCheckChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatCheckChatInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatCheckChatInvite(ctx, req.(*TLChatCheckChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatImportChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatImportChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatImportChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatImportChatInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatImportChatInvite(ctx, req.(*TLChatImportChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetChatInviteImporters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetChatInviteImporters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetChatInviteImporters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatGetChatInviteImporters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetChatInviteImporters(ctx, req.(*TLChatGetChatInviteImporters))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatDeleteExportedChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatDeleteExportedChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatDeleteExportedChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatDeleteExportedChatInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatDeleteExportedChatInvite(ctx, req.(*TLChatDeleteExportedChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatDeleteRevokedExportedChatInvites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatDeleteRevokedExportedChatInvites)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatDeleteRevokedExportedChatInvites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatDeleteRevokedExportedChatInvites_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatDeleteRevokedExportedChatInvites(ctx, req.(*TLChatDeleteRevokedExportedChatInvites))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatEditExportedChatInvite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatEditExportedChatInvite)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatEditExportedChatInvite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatEditExportedChatInvite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatEditExportedChatInvite(ctx, req.(*TLChatEditExportedChatInvite))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatSetChatAvailableReactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatSetChatAvailableReactions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatSetChatAvailableReactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatSetChatAvailableReactions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatSetChatAvailableReactions(ctx, req.(*TLChatSetChatAvailableReactions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatSetHistoryTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatSetHistoryTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatSetHistoryTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatSetHistoryTTL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatSetHistoryTTL(ctx, req.(*TLChatSetHistoryTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatSearch(ctx, req.(*TLChatSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatGetRecentChatInviteRequesters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatGetRecentChatInviteRequesters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatGetRecentChatInviteRequesters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatGetRecentChatInviteRequesters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatGetRecentChatInviteRequesters(ctx, req.(*TLChatGetRecentChatInviteRequesters))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatHideChatJoinRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatHideChatJoinRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatHideChatJoinRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatHideChatJoinRequests_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatHideChatJoinRequests(ctx, req.(*TLChatHideChatJoinRequests))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCChat_ChatImportChatInvite2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLChatImportChatInvite2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCChatServer).ChatImportChatInvite2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCChat_ChatImportChatInvite2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCChatServer).ChatImportChatInvite2(ctx, req.(*TLChatImportChatInvite2))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCChat_ServiceDesc is the grpc.ServiceDesc for RPCChat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCChat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.RPCChat",
	HandlerType: (*RPCChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "chat_getMutableChat",
			Handler:    _RPCChat_ChatGetMutableChat_Handler,
		},
		{
			MethodName: "chat_getChatListByIdList",
			Handler:    _RPCChat_ChatGetChatListByIdList_Handler,
		},
		{
			MethodName: "chat_getChatBySelfId",
			Handler:    _RPCChat_ChatGetChatBySelfId_Handler,
		},
		{
			MethodName: "chat_createChat2",
			Handler:    _RPCChat_ChatCreateChat2_Handler,
		},
		{
			MethodName: "chat_deleteChat",
			Handler:    _RPCChat_ChatDeleteChat_Handler,
		},
		{
			MethodName: "chat_deleteChatUser",
			Handler:    _RPCChat_ChatDeleteChatUser_Handler,
		},
		{
			MethodName: "chat_editChatTitle",
			Handler:    _RPCChat_ChatEditChatTitle_Handler,
		},
		{
			MethodName: "chat_editChatAbout",
			Handler:    _RPCChat_ChatEditChatAbout_Handler,
		},
		{
			MethodName: "chat_editChatPhoto",
			Handler:    _RPCChat_ChatEditChatPhoto_Handler,
		},
		{
			MethodName: "chat_editChatAdmin",
			Handler:    _RPCChat_ChatEditChatAdmin_Handler,
		},
		{
			MethodName: "chat_editChatDefaultBannedRights",
			Handler:    _RPCChat_ChatEditChatDefaultBannedRights_Handler,
		},
		{
			MethodName: "chat_addChatUser",
			Handler:    _RPCChat_ChatAddChatUser_Handler,
		},
		{
			MethodName: "chat_getMutableChatByLink",
			Handler:    _RPCChat_ChatGetMutableChatByLink_Handler,
		},
		{
			MethodName: "chat_toggleNoForwards",
			Handler:    _RPCChat_ChatToggleNoForwards_Handler,
		},
		{
			MethodName: "chat_migratedToChannel",
			Handler:    _RPCChat_ChatMigratedToChannel_Handler,
		},
		{
			MethodName: "chat_getChatParticipantIdList",
			Handler:    _RPCChat_ChatGetChatParticipantIdList_Handler,
		},
		{
			MethodName: "chat_getUsersChatIdList",
			Handler:    _RPCChat_ChatGetUsersChatIdList_Handler,
		},
		{
			MethodName: "chat_getMyChatList",
			Handler:    _RPCChat_ChatGetMyChatList_Handler,
		},
		{
			MethodName: "chat_exportChatInvite",
			Handler:    _RPCChat_ChatExportChatInvite_Handler,
		},
		{
			MethodName: "chat_getAdminsWithInvites",
			Handler:    _RPCChat_ChatGetAdminsWithInvites_Handler,
		},
		{
			MethodName: "chat_getExportedChatInvite",
			Handler:    _RPCChat_ChatGetExportedChatInvite_Handler,
		},
		{
			MethodName: "chat_getExportedChatInvites",
			Handler:    _RPCChat_ChatGetExportedChatInvites_Handler,
		},
		{
			MethodName: "chat_checkChatInvite",
			Handler:    _RPCChat_ChatCheckChatInvite_Handler,
		},
		{
			MethodName: "chat_importChatInvite",
			Handler:    _RPCChat_ChatImportChatInvite_Handler,
		},
		{
			MethodName: "chat_getChatInviteImporters",
			Handler:    _RPCChat_ChatGetChatInviteImporters_Handler,
		},
		{
			MethodName: "chat_deleteExportedChatInvite",
			Handler:    _RPCChat_ChatDeleteExportedChatInvite_Handler,
		},
		{
			MethodName: "chat_deleteRevokedExportedChatInvites",
			Handler:    _RPCChat_ChatDeleteRevokedExportedChatInvites_Handler,
		},
		{
			MethodName: "chat_editExportedChatInvite",
			Handler:    _RPCChat_ChatEditExportedChatInvite_Handler,
		},
		{
			MethodName: "chat_setChatAvailableReactions",
			Handler:    _RPCChat_ChatSetChatAvailableReactions_Handler,
		},
		{
			MethodName: "chat_setHistoryTTL",
			Handler:    _RPCChat_ChatSetHistoryTTL_Handler,
		},
		{
			MethodName: "chat_search",
			Handler:    _RPCChat_ChatSearch_Handler,
		},
		{
			MethodName: "chat_getRecentChatInviteRequesters",
			Handler:    _RPCChat_ChatGetRecentChatInviteRequesters_Handler,
		},
		{
			MethodName: "chat_hideChatJoinRequests",
			Handler:    _RPCChat_ChatHideChatJoinRequests_Handler,
		},
		{
			MethodName: "chat_importChatInvite2",
			Handler:    _RPCChat_ChatImportChatInvite2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.tl.proto",
}
