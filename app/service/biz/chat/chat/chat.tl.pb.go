//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: chat.tl.proto

package chat

import (
	mtproto "github.com/teamgram/proto/mtproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLConstructor int32

const (
	TLConstructor_CRC32_UNKNOWN                               TLConstructor = 0
	TLConstructor_CRC32_chatInviteAlready                     TLConstructor = -1542554274
	TLConstructor_CRC32_chatInvite                            TLConstructor = -613035609
	TLConstructor_CRC32_chatInvitePeek                        TLConstructor = -1394351506
	TLConstructor_CRC32_userChatIdList                        TLConstructor = 1342599716
	TLConstructor_CRC32_recentChatInviteRequesters            TLConstructor = 476986452
	TLConstructor_CRC32_chatInviteImported                    TLConstructor = 1913672182
	TLConstructor_CRC32_chat_getMutableChat                   TLConstructor = 741090770
	TLConstructor_CRC32_chat_getChatListByIdList              TLConstructor = -415173319
	TLConstructor_CRC32_chat_getChatBySelfId                  TLConstructor = 1236736584
	TLConstructor_CRC32_chat_createChat2                      TLConstructor = -143374126
	TLConstructor_CRC32_chat_deleteChat                       TLConstructor = 1829891102
	TLConstructor_CRC32_chat_deleteChatUser                   TLConstructor = 187109333
	TLConstructor_CRC32_chat_editChatTitle                    TLConstructor = -1782210905
	TLConstructor_CRC32_chat_editChatAbout                    TLConstructor = 1551072376
	TLConstructor_CRC32_chat_editChatPhoto                    TLConstructor = 1170384488
	TLConstructor_CRC32_chat_editChatAdmin                    TLConstructor = 419816940
	TLConstructor_CRC32_chat_editChatDefaultBannedRights      TLConstructor = 1513399943
	TLConstructor_CRC32_chat_addChatUser                      TLConstructor = -447397528
	TLConstructor_CRC32_chat_getMutableChatByLink             TLConstructor = -1570363509
	TLConstructor_CRC32_chat_toggleNoForwards                 TLConstructor = -711644423
	TLConstructor_CRC32_chat_migratedToChannel                TLConstructor = 138390239
	TLConstructor_CRC32_chat_getChatParticipantIdList         TLConstructor = 848700073
	TLConstructor_CRC32_chat_getUsersChatIdList               TLConstructor = 792111948
	TLConstructor_CRC32_chat_getMyChatList                    TLConstructor = -210408312
	TLConstructor_CRC32_chat_exportChatInvite                 TLConstructor = -976256949
	TLConstructor_CRC32_chat_getAdminsWithInvites             TLConstructor = -756399662
	TLConstructor_CRC32_chat_getExportedChatInvite            TLConstructor = -571854256
	TLConstructor_CRC32_chat_getExportedChatInvites           TLConstructor = -1265690378
	TLConstructor_CRC32_chat_checkChatInvite                  TLConstructor = 1938289292
	TLConstructor_CRC32_chat_importChatInvite                 TLConstructor = 1491493076
	TLConstructor_CRC32_chat_getChatInviteImporters           TLConstructor = -1740221057
	TLConstructor_CRC32_chat_deleteExportedChatInvite         TLConstructor = 1445103800
	TLConstructor_CRC32_chat_deleteRevokedExportedChatInvites TLConstructor = -804101527
	TLConstructor_CRC32_chat_editExportedChatInvite           TLConstructor = -1348907914
	TLConstructor_CRC32_chat_setChatAvailableReactions        TLConstructor = -992966286
	TLConstructor_CRC32_chat_setHistoryTTL                    TLConstructor = 1023107972
	TLConstructor_CRC32_chat_search                           TLConstructor = 568333563
	TLConstructor_CRC32_chat_getRecentChatInviteRequesters    TLConstructor = -19132264
	TLConstructor_CRC32_chat_hideChatJoinRequests             TLConstructor = 1051012305
	TLConstructor_CRC32_chat_importChatInvite2                TLConstructor = -589742657
)

// Enum value maps for TLConstructor.
var (
	TLConstructor_name = map[int32]string{
		0:           "CRC32_UNKNOWN",
		-1542554274: "CRC32_chatInviteAlready",
		-613035609:  "CRC32_chatInvite",
		-1394351506: "CRC32_chatInvitePeek",
		1342599716:  "CRC32_userChatIdList",
		476986452:   "CRC32_recentChatInviteRequesters",
		1913672182:  "CRC32_chatInviteImported",
		741090770:   "CRC32_chat_getMutableChat",
		-415173319:  "CRC32_chat_getChatListByIdList",
		1236736584:  "CRC32_chat_getChatBySelfId",
		-143374126:  "CRC32_chat_createChat2",
		1829891102:  "CRC32_chat_deleteChat",
		187109333:   "CRC32_chat_deleteChatUser",
		-1782210905: "CRC32_chat_editChatTitle",
		1551072376:  "CRC32_chat_editChatAbout",
		1170384488:  "CRC32_chat_editChatPhoto",
		419816940:   "CRC32_chat_editChatAdmin",
		1513399943:  "CRC32_chat_editChatDefaultBannedRights",
		-447397528:  "CRC32_chat_addChatUser",
		-1570363509: "CRC32_chat_getMutableChatByLink",
		-711644423:  "CRC32_chat_toggleNoForwards",
		138390239:   "CRC32_chat_migratedToChannel",
		848700073:   "CRC32_chat_getChatParticipantIdList",
		792111948:   "CRC32_chat_getUsersChatIdList",
		-210408312:  "CRC32_chat_getMyChatList",
		-976256949:  "CRC32_chat_exportChatInvite",
		-756399662:  "CRC32_chat_getAdminsWithInvites",
		-571854256:  "CRC32_chat_getExportedChatInvite",
		-1265690378: "CRC32_chat_getExportedChatInvites",
		1938289292:  "CRC32_chat_checkChatInvite",
		1491493076:  "CRC32_chat_importChatInvite",
		-1740221057: "CRC32_chat_getChatInviteImporters",
		1445103800:  "CRC32_chat_deleteExportedChatInvite",
		-804101527:  "CRC32_chat_deleteRevokedExportedChatInvites",
		-1348907914: "CRC32_chat_editExportedChatInvite",
		-992966286:  "CRC32_chat_setChatAvailableReactions",
		1023107972:  "CRC32_chat_setHistoryTTL",
		568333563:   "CRC32_chat_search",
		-19132264:   "CRC32_chat_getRecentChatInviteRequesters",
		1051012305:  "CRC32_chat_hideChatJoinRequests",
		-589742657:  "CRC32_chat_importChatInvite2",
	}
	TLConstructor_value = map[string]int32{
		"CRC32_UNKNOWN":                               0,
		"CRC32_chatInviteAlready":                     -1542554274,
		"CRC32_chatInvite":                            -613035609,
		"CRC32_chatInvitePeek":                        -1394351506,
		"CRC32_userChatIdList":                        1342599716,
		"CRC32_recentChatInviteRequesters":            476986452,
		"CRC32_chatInviteImported":                    1913672182,
		"CRC32_chat_getMutableChat":                   741090770,
		"CRC32_chat_getChatListByIdList":              -415173319,
		"CRC32_chat_getChatBySelfId":                  1236736584,
		"CRC32_chat_createChat2":                      -143374126,
		"CRC32_chat_deleteChat":                       1829891102,
		"CRC32_chat_deleteChatUser":                   187109333,
		"CRC32_chat_editChatTitle":                    -1782210905,
		"CRC32_chat_editChatAbout":                    1551072376,
		"CRC32_chat_editChatPhoto":                    1170384488,
		"CRC32_chat_editChatAdmin":                    419816940,
		"CRC32_chat_editChatDefaultBannedRights":      1513399943,
		"CRC32_chat_addChatUser":                      -447397528,
		"CRC32_chat_getMutableChatByLink":             -1570363509,
		"CRC32_chat_toggleNoForwards":                 -711644423,
		"CRC32_chat_migratedToChannel":                138390239,
		"CRC32_chat_getChatParticipantIdList":         848700073,
		"CRC32_chat_getUsersChatIdList":               792111948,
		"CRC32_chat_getMyChatList":                    -210408312,
		"CRC32_chat_exportChatInvite":                 -976256949,
		"CRC32_chat_getAdminsWithInvites":             -756399662,
		"CRC32_chat_getExportedChatInvite":            -571854256,
		"CRC32_chat_getExportedChatInvites":           -1265690378,
		"CRC32_chat_checkChatInvite":                  1938289292,
		"CRC32_chat_importChatInvite":                 1491493076,
		"CRC32_chat_getChatInviteImporters":           -1740221057,
		"CRC32_chat_deleteExportedChatInvite":         1445103800,
		"CRC32_chat_deleteRevokedExportedChatInvites": -804101527,
		"CRC32_chat_editExportedChatInvite":           -1348907914,
		"CRC32_chat_setChatAvailableReactions":        -992966286,
		"CRC32_chat_setHistoryTTL":                    1023107972,
		"CRC32_chat_search":                           568333563,
		"CRC32_chat_getRecentChatInviteRequesters":    -19132264,
		"CRC32_chat_hideChatJoinRequests":             1051012305,
		"CRC32_chat_importChatInvite2":                -589742657,
	}
)

func (x TLConstructor) Enum() *TLConstructor {
	p := new(TLConstructor)
	*p = x
	return p
}

func (x TLConstructor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLConstructor) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_tl_proto_enumTypes[0].Descriptor()
}

func (TLConstructor) Type() protoreflect.EnumType {
	return &file_chat_tl_proto_enumTypes[0]
}

func (x TLConstructor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLConstructor.Descriptor instead.
func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{0}
}

// ChatInviteExt <--
//   - TL_chatInviteAlready
//   - TL_chatInvite
//   - TL_chatInvitePeek
type ChatInviteExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName     string                  `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor       TLConstructor           `protobuf:"varint,2,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	Chat              *mtproto.MutableChat    `protobuf:"bytes,3,opt,name=chat,proto3" json:"chat,omitempty"`
	RequestNeeded     bool                    `protobuf:"varint,4,opt,name=request_needed,json=requestNeeded,proto3" json:"request_needed,omitempty"`
	Title             string                  `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	About             *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=about,proto3" json:"about,omitempty"`
	Photo             *mtproto.Photo          `protobuf:"bytes,7,opt,name=photo,proto3" json:"photo,omitempty"`
	ParticipantsCount int32                   `protobuf:"varint,8,opt,name=participants_count,json=participantsCount,proto3" json:"participants_count,omitempty"`
	Participants      []int64                 `protobuf:"varint,9,rep,packed,name=participants,proto3" json:"participants,omitempty"`
	Expires           int32                   `protobuf:"varint,10,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (x *ChatInviteExt) Reset() {
	*x = ChatInviteExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatInviteExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatInviteExt) ProtoMessage() {}

func (x *ChatInviteExt) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatInviteExt.ProtoReflect.Descriptor instead.
func (*ChatInviteExt) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{0}
}

func (x *ChatInviteExt) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *ChatInviteExt) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *ChatInviteExt) GetChat() *mtproto.MutableChat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *ChatInviteExt) GetRequestNeeded() bool {
	if x != nil {
		return x.RequestNeeded
	}
	return false
}

func (x *ChatInviteExt) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ChatInviteExt) GetAbout() *wrapperspb.StringValue {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *ChatInviteExt) GetPhoto() *mtproto.Photo {
	if x != nil {
		return x.Photo
	}
	return nil
}

func (x *ChatInviteExt) GetParticipantsCount() int32 {
	if x != nil {
		return x.ParticipantsCount
	}
	return 0
}

func (x *ChatInviteExt) GetParticipants() []int64 {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *ChatInviteExt) GetExpires() int32 {
	if x != nil {
		return x.Expires
	}
	return 0
}

type TLChatInviteAlready struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *ChatInviteExt `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLChatInviteAlready) Reset() {
	*x = TLChatInviteAlready{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatInviteAlready) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatInviteAlready) ProtoMessage() {}

func (x *TLChatInviteAlready) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatInviteAlready.ProtoReflect.Descriptor instead.
func (*TLChatInviteAlready) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{1}
}

func (x *TLChatInviteAlready) GetData2() *ChatInviteExt {
	if x != nil {
		return x.Data2
	}
	return nil
}

type TLChatInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *ChatInviteExt `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLChatInvite) Reset() {
	*x = TLChatInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatInvite) ProtoMessage() {}

func (x *TLChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatInvite.ProtoReflect.Descriptor instead.
func (*TLChatInvite) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{2}
}

func (x *TLChatInvite) GetData2() *ChatInviteExt {
	if x != nil {
		return x.Data2
	}
	return nil
}

type TLChatInvitePeek struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *ChatInviteExt `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLChatInvitePeek) Reset() {
	*x = TLChatInvitePeek{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatInvitePeek) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatInvitePeek) ProtoMessage() {}

func (x *TLChatInvitePeek) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatInvitePeek.ProtoReflect.Descriptor instead.
func (*TLChatInvitePeek) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{3}
}

func (x *TLChatInvitePeek) GetData2() *ChatInviteExt {
	if x != nil {
		return x.Data2
	}
	return nil
}

// ChatInviteImported <--
//   - TL_chatInviteImported
type ChatInviteImported struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string                      `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor               `protobuf:"varint,2,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	Chat          *mtproto.MutableChat        `protobuf:"bytes,3,opt,name=chat,proto3" json:"chat,omitempty"`
	Requesters    *RecentChatInviteRequesters `protobuf:"bytes,4,opt,name=requesters,proto3" json:"requesters,omitempty"`
}

func (x *ChatInviteImported) Reset() {
	*x = ChatInviteImported{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatInviteImported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatInviteImported) ProtoMessage() {}

func (x *ChatInviteImported) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatInviteImported.ProtoReflect.Descriptor instead.
func (*ChatInviteImported) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{4}
}

func (x *ChatInviteImported) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *ChatInviteImported) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *ChatInviteImported) GetChat() *mtproto.MutableChat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *ChatInviteImported) GetRequesters() *RecentChatInviteRequesters {
	if x != nil {
		return x.Requesters
	}
	return nil
}

type TLChatInviteImported struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *ChatInviteImported `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLChatInviteImported) Reset() {
	*x = TLChatInviteImported{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatInviteImported) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatInviteImported) ProtoMessage() {}

func (x *TLChatInviteImported) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatInviteImported.ProtoReflect.Descriptor instead.
func (*TLChatInviteImported) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{5}
}

func (x *TLChatInviteImported) GetData2() *ChatInviteImported {
	if x != nil {
		return x.Data2
	}
	return nil
}

// RecentChatInviteRequesters <--
//   - TL_recentChatInviteRequesters
type RecentChatInviteRequesters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName    string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor      TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	RequestsPending  int32         `protobuf:"varint,3,opt,name=requests_pending,json=requestsPending,proto3" json:"requests_pending,omitempty"`
	RecentRequesters []int64       `protobuf:"varint,4,rep,packed,name=recent_requesters,json=recentRequesters,proto3" json:"recent_requesters,omitempty"`
}

func (x *RecentChatInviteRequesters) Reset() {
	*x = RecentChatInviteRequesters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentChatInviteRequesters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentChatInviteRequesters) ProtoMessage() {}

func (x *RecentChatInviteRequesters) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentChatInviteRequesters.ProtoReflect.Descriptor instead.
func (*RecentChatInviteRequesters) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{6}
}

func (x *RecentChatInviteRequesters) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *RecentChatInviteRequesters) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *RecentChatInviteRequesters) GetRequestsPending() int32 {
	if x != nil {
		return x.RequestsPending
	}
	return 0
}

func (x *RecentChatInviteRequesters) GetRecentRequesters() []int64 {
	if x != nil {
		return x.RecentRequesters
	}
	return nil
}

type TLRecentChatInviteRequesters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *RecentChatInviteRequesters `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLRecentChatInviteRequesters) Reset() {
	*x = TLRecentChatInviteRequesters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLRecentChatInviteRequesters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLRecentChatInviteRequesters) ProtoMessage() {}

func (x *TLRecentChatInviteRequesters) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLRecentChatInviteRequesters.ProtoReflect.Descriptor instead.
func (*TLRecentChatInviteRequesters) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{7}
}

func (x *TLRecentChatInviteRequesters) GetData2() *RecentChatInviteRequesters {
	if x != nil {
		return x.Data2
	}
	return nil
}

// UserChatIdList <--
//   - TL_userChatIdList
type UserChatIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	UserId        int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChatIdList    []int64       `protobuf:"varint,4,rep,packed,name=chat_id_list,json=chatIdList,proto3" json:"chat_id_list,omitempty"`
}

func (x *UserChatIdList) Reset() {
	*x = UserChatIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserChatIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserChatIdList) ProtoMessage() {}

func (x *UserChatIdList) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserChatIdList.ProtoReflect.Descriptor instead.
func (*UserChatIdList) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{8}
}

func (x *UserChatIdList) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *UserChatIdList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *UserChatIdList) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserChatIdList) GetChatIdList() []int64 {
	if x != nil {
		return x.ChatIdList
	}
	return nil
}

type TLUserChatIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *UserChatIdList `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLUserChatIdList) Reset() {
	*x = TLUserChatIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserChatIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserChatIdList) ProtoMessage() {}

func (x *TLUserChatIdList) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserChatIdList.ProtoReflect.Descriptor instead.
func (*TLUserChatIdList) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{9}
}

func (x *TLUserChatIdList) GetData2() *UserChatIdList {
	if x != nil {
		return x.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLChatGetMutableChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId      int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *TLChatGetMutableChat) Reset() {
	*x = TLChatGetMutableChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatGetMutableChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatGetMutableChat) ProtoMessage() {}

func (x *TLChatGetMutableChat) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatGetMutableChat.ProtoReflect.Descriptor instead.
func (*TLChatGetMutableChat) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{10}
}

func (x *TLChatGetMutableChat) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatGetMutableChat) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLChatGetChatListByIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId      int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	IdList      []int64       `protobuf:"varint,4,rep,packed,name=id_list,json=idList,proto3" json:"id_list,omitempty"`
}

func (x *TLChatGetChatListByIdList) Reset() {
	*x = TLChatGetChatListByIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatGetChatListByIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatGetChatListByIdList) ProtoMessage() {}

func (x *TLChatGetChatListByIdList) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatGetChatListByIdList.ProtoReflect.Descriptor instead.
func (*TLChatGetChatListByIdList) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{11}
}

func (x *TLChatGetChatListByIdList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatGetChatListByIdList) GetSelfId() int64 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *TLChatGetChatListByIdList) GetIdList() []int64 {
	if x != nil {
		return x.IdList
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLChatGetChatBySelfId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId      int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId      int64         `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *TLChatGetChatBySelfId) Reset() {
	*x = TLChatGetChatBySelfId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatGetChatBySelfId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatGetChatBySelfId) ProtoMessage() {}

func (x *TLChatGetChatBySelfId) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatGetChatBySelfId.ProtoReflect.Descriptor instead.
func (*TLChatGetChatBySelfId) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{12}
}

func (x *TLChatGetChatBySelfId) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatGetChatBySelfId) GetSelfId() int64 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *TLChatGetChatBySelfId) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLChatCreateChat2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	CreatorId   int64         `protobuf:"varint,3,opt,name=creator_id,json=creatorId,proto3" json:"creator_id,omitempty"`
	UserIdList  []int64       `protobuf:"varint,4,rep,packed,name=user_id_list,json=userIdList,proto3" json:"user_id_list,omitempty"`
	Title       string        `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	Bots        []int64       `protobuf:"varint,6,rep,packed,name=bots,proto3" json:"bots,omitempty"`
}

func (x *TLChatCreateChat2) Reset() {
	*x = TLChatCreateChat2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatCreateChat2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatCreateChat2) ProtoMessage() {}

func (x *TLChatCreateChat2) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatCreateChat2.ProtoReflect.Descriptor instead.
func (*TLChatCreateChat2) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{13}
}

func (x *TLChatCreateChat2) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatCreateChat2) GetCreatorId() int64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *TLChatCreateChat2) GetUserIdList() []int64 {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

func (x *TLChatCreateChat2) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TLChatCreateChat2) GetBots() []int64 {
	if x != nil {
		return x.Bots
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLChatDeleteChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId      int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OperatorId  int64         `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (x *TLChatDeleteChat) Reset() {
	*x = TLChatDeleteChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatDeleteChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatDeleteChat) ProtoMessage() {}

func (x *TLChatDeleteChat) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatDeleteChat.ProtoReflect.Descriptor instead.
func (*TLChatDeleteChat) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{14}
}

func (x *TLChatDeleteChat) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatDeleteChat) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatDeleteChat) GetOperatorId() int64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLChatDeleteChatUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor  TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId       int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OperatorId   int64         `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	DeleteUserId int64         `protobuf:"varint,5,opt,name=delete_user_id,json=deleteUserId,proto3" json:"delete_user_id,omitempty"`
}

func (x *TLChatDeleteChatUser) Reset() {
	*x = TLChatDeleteChatUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatDeleteChatUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatDeleteChatUser) ProtoMessage() {}

func (x *TLChatDeleteChatUser) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatDeleteChatUser.ProtoReflect.Descriptor instead.
func (*TLChatDeleteChatUser) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{15}
}

func (x *TLChatDeleteChatUser) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatDeleteChatUser) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatDeleteChatUser) GetOperatorId() int64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *TLChatDeleteChatUser) GetDeleteUserId() int64 {
	if x != nil {
		return x.DeleteUserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLChatEditChatTitle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId      int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	EditUserId  int64         `protobuf:"varint,4,opt,name=edit_user_id,json=editUserId,proto3" json:"edit_user_id,omitempty"`
	Title       string        `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *TLChatEditChatTitle) Reset() {
	*x = TLChatEditChatTitle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatEditChatTitle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatEditChatTitle) ProtoMessage() {}

func (x *TLChatEditChatTitle) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatEditChatTitle.ProtoReflect.Descriptor instead.
func (*TLChatEditChatTitle) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{16}
}

func (x *TLChatEditChatTitle) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatEditChatTitle) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatEditChatTitle) GetEditUserId() int64 {
	if x != nil {
		return x.EditUserId
	}
	return 0
}

func (x *TLChatEditChatTitle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLChatEditChatAbout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId      int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	EditUserId  int64         `protobuf:"varint,4,opt,name=edit_user_id,json=editUserId,proto3" json:"edit_user_id,omitempty"`
	About       string        `protobuf:"bytes,5,opt,name=about,proto3" json:"about,omitempty"`
}

func (x *TLChatEditChatAbout) Reset() {
	*x = TLChatEditChatAbout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatEditChatAbout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatEditChatAbout) ProtoMessage() {}

func (x *TLChatEditChatAbout) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatEditChatAbout.ProtoReflect.Descriptor instead.
func (*TLChatEditChatAbout) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{17}
}

func (x *TLChatEditChatAbout) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatEditChatAbout) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatEditChatAbout) GetEditUserId() int64 {
	if x != nil {
		return x.EditUserId
	}
	return 0
}

func (x *TLChatEditChatAbout) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLChatEditChatPhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor  `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId      int64          `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	EditUserId  int64          `protobuf:"varint,4,opt,name=edit_user_id,json=editUserId,proto3" json:"edit_user_id,omitempty"`
	ChatPhoto   *mtproto.Photo `protobuf:"bytes,5,opt,name=chat_photo,json=chatPhoto,proto3" json:"chat_photo,omitempty"`
}

func (x *TLChatEditChatPhoto) Reset() {
	*x = TLChatEditChatPhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatEditChatPhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatEditChatPhoto) ProtoMessage() {}

func (x *TLChatEditChatPhoto) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatEditChatPhoto.ProtoReflect.Descriptor instead.
func (*TLChatEditChatPhoto) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{18}
}

func (x *TLChatEditChatPhoto) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatEditChatPhoto) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatEditChatPhoto) GetEditUserId() int64 {
	if x != nil {
		return x.EditUserId
	}
	return 0
}

func (x *TLChatEditChatPhoto) GetChatPhoto() *mtproto.Photo {
	if x != nil {
		return x.ChatPhoto
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLChatEditChatAdmin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor     TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId          int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OperatorId      int64         `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	EditChatAdminId int64         `protobuf:"varint,5,opt,name=edit_chat_admin_id,json=editChatAdminId,proto3" json:"edit_chat_admin_id,omitempty"`
	IsAdmin         *mtproto.Bool `protobuf:"bytes,6,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
}

func (x *TLChatEditChatAdmin) Reset() {
	*x = TLChatEditChatAdmin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatEditChatAdmin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatEditChatAdmin) ProtoMessage() {}

func (x *TLChatEditChatAdmin) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatEditChatAdmin.ProtoReflect.Descriptor instead.
func (*TLChatEditChatAdmin) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{19}
}

func (x *TLChatEditChatAdmin) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatEditChatAdmin) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatEditChatAdmin) GetOperatorId() int64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *TLChatEditChatAdmin) GetEditChatAdminId() int64 {
	if x != nil {
		return x.EditChatAdminId
	}
	return 0
}

func (x *TLChatEditChatAdmin) GetIsAdmin() *mtproto.Bool {
	if x != nil {
		return x.IsAdmin
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLChatEditChatDefaultBannedRights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor  TLConstructor             `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId       int64                     `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OperatorId   int64                     `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	BannedRights *mtproto.ChatBannedRights `protobuf:"bytes,5,opt,name=banned_rights,json=bannedRights,proto3" json:"banned_rights,omitempty"`
}

func (x *TLChatEditChatDefaultBannedRights) Reset() {
	*x = TLChatEditChatDefaultBannedRights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatEditChatDefaultBannedRights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatEditChatDefaultBannedRights) ProtoMessage() {}

func (x *TLChatEditChatDefaultBannedRights) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatEditChatDefaultBannedRights.ProtoReflect.Descriptor instead.
func (*TLChatEditChatDefaultBannedRights) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{20}
}

func (x *TLChatEditChatDefaultBannedRights) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatEditChatDefaultBannedRights) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatEditChatDefaultBannedRights) GetOperatorId() int64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *TLChatEditChatDefaultBannedRights) GetBannedRights() *mtproto.ChatBannedRights {
	if x != nil {
		return x.BannedRights
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLChatAddChatUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId      int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	InviterId   int64         `protobuf:"varint,4,opt,name=inviter_id,json=inviterId,proto3" json:"inviter_id,omitempty"`
	UserId      int64         `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsBot       bool          `protobuf:"varint,6,opt,name=is_bot,json=isBot,proto3" json:"is_bot,omitempty"`
}

func (x *TLChatAddChatUser) Reset() {
	*x = TLChatAddChatUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatAddChatUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatAddChatUser) ProtoMessage() {}

func (x *TLChatAddChatUser) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatAddChatUser.ProtoReflect.Descriptor instead.
func (*TLChatAddChatUser) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{21}
}

func (x *TLChatAddChatUser) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatAddChatUser) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatAddChatUser) GetInviterId() int64 {
	if x != nil {
		return x.InviterId
	}
	return 0
}

func (x *TLChatAddChatUser) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLChatAddChatUser) GetIsBot() bool {
	if x != nil {
		return x.IsBot
	}
	return false
}

// --------------------------------------------------------------------------------------------
type TLChatGetMutableChatByLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	Link        string        `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *TLChatGetMutableChatByLink) Reset() {
	*x = TLChatGetMutableChatByLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatGetMutableChatByLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatGetMutableChatByLink) ProtoMessage() {}

func (x *TLChatGetMutableChatByLink) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatGetMutableChatByLink.ProtoReflect.Descriptor instead.
func (*TLChatGetMutableChatByLink) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{22}
}

func (x *TLChatGetMutableChatByLink) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatGetMutableChatByLink) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLChatToggleNoForwards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId      int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	OperatorId  int64         `protobuf:"varint,4,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	Enabled     *mtproto.Bool `protobuf:"bytes,5,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *TLChatToggleNoForwards) Reset() {
	*x = TLChatToggleNoForwards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatToggleNoForwards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatToggleNoForwards) ProtoMessage() {}

func (x *TLChatToggleNoForwards) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatToggleNoForwards.ProtoReflect.Descriptor instead.
func (*TLChatToggleNoForwards) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{23}
}

func (x *TLChatToggleNoForwards) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatToggleNoForwards) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatToggleNoForwards) GetOperatorId() int64 {
	if x != nil {
		return x.OperatorId
	}
	return 0
}

func (x *TLChatToggleNoForwards) GetEnabled() *mtproto.Bool {
	if x != nil {
		return x.Enabled
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLChatMigratedToChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor        `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	Chat        *mtproto.MutableChat `protobuf:"bytes,3,opt,name=chat,proto3" json:"chat,omitempty"`
	Id          int64                `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	AccessHash  int64                `protobuf:"varint,5,opt,name=access_hash,json=accessHash,proto3" json:"access_hash,omitempty"`
}

func (x *TLChatMigratedToChannel) Reset() {
	*x = TLChatMigratedToChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatMigratedToChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatMigratedToChannel) ProtoMessage() {}

func (x *TLChatMigratedToChannel) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatMigratedToChannel.ProtoReflect.Descriptor instead.
func (*TLChatMigratedToChannel) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{24}
}

func (x *TLChatMigratedToChannel) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatMigratedToChannel) GetChat() *mtproto.MutableChat {
	if x != nil {
		return x.Chat
	}
	return nil
}

func (x *TLChatMigratedToChannel) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLChatMigratedToChannel) GetAccessHash() int64 {
	if x != nil {
		return x.AccessHash
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLChatGetChatParticipantIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId      int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *TLChatGetChatParticipantIdList) Reset() {
	*x = TLChatGetChatParticipantIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatGetChatParticipantIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatGetChatParticipantIdList) ProtoMessage() {}

func (x *TLChatGetChatParticipantIdList) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatGetChatParticipantIdList.ProtoReflect.Descriptor instead.
func (*TLChatGetChatParticipantIdList) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{25}
}

func (x *TLChatGetChatParticipantIdList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatGetChatParticipantIdList) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLChatGetUsersChatIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	Id          []int64       `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *TLChatGetUsersChatIdList) Reset() {
	*x = TLChatGetUsersChatIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatGetUsersChatIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatGetUsersChatIdList) ProtoMessage() {}

func (x *TLChatGetUsersChatIdList) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatGetUsersChatIdList.ProtoReflect.Descriptor instead.
func (*TLChatGetUsersChatIdList) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{26}
}

func (x *TLChatGetUsersChatIdList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatGetUsersChatIdList) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLChatGetMyChatList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IsCreator   *mtproto.Bool `protobuf:"bytes,4,opt,name=is_creator,json=isCreator,proto3" json:"is_creator,omitempty"`
}

func (x *TLChatGetMyChatList) Reset() {
	*x = TLChatGetMyChatList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatGetMyChatList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatGetMyChatList) ProtoMessage() {}

func (x *TLChatGetMyChatList) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatGetMyChatList.ProtoReflect.Descriptor instead.
func (*TLChatGetMyChatList) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{27}
}

func (x *TLChatGetMyChatList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatGetMyChatList) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLChatGetMyChatList) GetIsCreator() *mtproto.Bool {
	if x != nil {
		return x.IsCreator
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLChatExportChatInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor           TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId                int64                   `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminId               int64                   `protobuf:"varint,4,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	LegacyRevokePermanent bool                    `protobuf:"varint,5,opt,name=legacy_revoke_permanent,json=legacyRevokePermanent,proto3" json:"legacy_revoke_permanent,omitempty"`
	RequestNeeded         bool                    `protobuf:"varint,6,opt,name=request_needed,json=requestNeeded,proto3" json:"request_needed,omitempty"`
	ExpireDate            *wrapperspb.Int32Value  `protobuf:"bytes,7,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	UsageLimit            *wrapperspb.Int32Value  `protobuf:"bytes,8,opt,name=usage_limit,json=usageLimit,proto3" json:"usage_limit,omitempty"`
	Title                 *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *TLChatExportChatInvite) Reset() {
	*x = TLChatExportChatInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatExportChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatExportChatInvite) ProtoMessage() {}

func (x *TLChatExportChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatExportChatInvite.ProtoReflect.Descriptor instead.
func (*TLChatExportChatInvite) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{28}
}

func (x *TLChatExportChatInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatExportChatInvite) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatExportChatInvite) GetAdminId() int64 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *TLChatExportChatInvite) GetLegacyRevokePermanent() bool {
	if x != nil {
		return x.LegacyRevokePermanent
	}
	return false
}

func (x *TLChatExportChatInvite) GetRequestNeeded() bool {
	if x != nil {
		return x.RequestNeeded
	}
	return false
}

func (x *TLChatExportChatInvite) GetExpireDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ExpireDate
	}
	return nil
}

func (x *TLChatExportChatInvite) GetUsageLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.UsageLimit
	}
	return nil
}

func (x *TLChatExportChatInvite) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLChatGetAdminsWithInvites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId      int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId      int64         `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *TLChatGetAdminsWithInvites) Reset() {
	*x = TLChatGetAdminsWithInvites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatGetAdminsWithInvites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatGetAdminsWithInvites) ProtoMessage() {}

func (x *TLChatGetAdminsWithInvites) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatGetAdminsWithInvites.ProtoReflect.Descriptor instead.
func (*TLChatGetAdminsWithInvites) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{29}
}

func (x *TLChatGetAdminsWithInvites) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatGetAdminsWithInvites) GetSelfId() int64 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *TLChatGetAdminsWithInvites) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLChatGetExportedChatInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId      int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Link        string        `protobuf:"bytes,4,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *TLChatGetExportedChatInvite) Reset() {
	*x = TLChatGetExportedChatInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatGetExportedChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatGetExportedChatInvite) ProtoMessage() {}

func (x *TLChatGetExportedChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatGetExportedChatInvite.ProtoReflect.Descriptor instead.
func (*TLChatGetExportedChatInvite) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{30}
}

func (x *TLChatGetExportedChatInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatGetExportedChatInvite) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatGetExportedChatInvite) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLChatGetExportedChatInvites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	ChatId      int64                   `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminId     int64                   `protobuf:"varint,4,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	Revoked     bool                    `protobuf:"varint,5,opt,name=revoked,proto3" json:"revoked,omitempty"`
	OffsetDate  *wrapperspb.Int32Value  `protobuf:"bytes,6,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetLink  *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=offset_link,json=offsetLink,proto3" json:"offset_link,omitempty"`
	Limit       int32                   `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TLChatGetExportedChatInvites) Reset() {
	*x = TLChatGetExportedChatInvites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatGetExportedChatInvites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatGetExportedChatInvites) ProtoMessage() {}

func (x *TLChatGetExportedChatInvites) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatGetExportedChatInvites.ProtoReflect.Descriptor instead.
func (*TLChatGetExportedChatInvites) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{31}
}

func (x *TLChatGetExportedChatInvites) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatGetExportedChatInvites) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatGetExportedChatInvites) GetAdminId() int64 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

func (x *TLChatGetExportedChatInvites) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *TLChatGetExportedChatInvites) GetOffsetDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.OffsetDate
	}
	return nil
}

func (x *TLChatGetExportedChatInvites) GetOffsetLink() *wrapperspb.StringValue {
	if x != nil {
		return x.OffsetLink
	}
	return nil
}

func (x *TLChatGetExportedChatInvites) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLChatCheckChatInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId      int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Hash        string        `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *TLChatCheckChatInvite) Reset() {
	*x = TLChatCheckChatInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatCheckChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatCheckChatInvite) ProtoMessage() {}

func (x *TLChatCheckChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatCheckChatInvite.ProtoReflect.Descriptor instead.
func (*TLChatCheckChatInvite) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{32}
}

func (x *TLChatCheckChatInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatCheckChatInvite) GetSelfId() int64 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *TLChatCheckChatInvite) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLChatImportChatInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId      int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Hash        string        `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *TLChatImportChatInvite) Reset() {
	*x = TLChatImportChatInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatImportChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatImportChatInvite) ProtoMessage() {}

func (x *TLChatImportChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatImportChatInvite.ProtoReflect.Descriptor instead.
func (*TLChatImportChatInvite) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{33}
}

func (x *TLChatImportChatInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatImportChatInvite) GetSelfId() int64 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *TLChatImportChatInvite) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLChatGetChatInviteImporters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId      int64                   `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId      int64                   `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Requested   bool                    `protobuf:"varint,5,opt,name=requested,proto3" json:"requested,omitempty"`
	Link        *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	Q           *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=q,proto3" json:"q,omitempty"`
	OffsetDate  int32                   `protobuf:"varint,8,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	OffsetUser  int64                   `protobuf:"varint,9,opt,name=offset_user,json=offsetUser,proto3" json:"offset_user,omitempty"`
	Limit       int32                   `protobuf:"varint,10,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TLChatGetChatInviteImporters) Reset() {
	*x = TLChatGetChatInviteImporters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatGetChatInviteImporters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatGetChatInviteImporters) ProtoMessage() {}

func (x *TLChatGetChatInviteImporters) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatGetChatInviteImporters.ProtoReflect.Descriptor instead.
func (*TLChatGetChatInviteImporters) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{34}
}

func (x *TLChatGetChatInviteImporters) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatGetChatInviteImporters) GetSelfId() int64 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *TLChatGetChatInviteImporters) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatGetChatInviteImporters) GetRequested() bool {
	if x != nil {
		return x.Requested
	}
	return false
}

func (x *TLChatGetChatInviteImporters) GetLink() *wrapperspb.StringValue {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *TLChatGetChatInviteImporters) GetQ() *wrapperspb.StringValue {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *TLChatGetChatInviteImporters) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *TLChatGetChatInviteImporters) GetOffsetUser() int64 {
	if x != nil {
		return x.OffsetUser
	}
	return 0
}

func (x *TLChatGetChatInviteImporters) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLChatDeleteExportedChatInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId      int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId      int64         `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Link        string        `protobuf:"bytes,5,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *TLChatDeleteExportedChatInvite) Reset() {
	*x = TLChatDeleteExportedChatInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatDeleteExportedChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatDeleteExportedChatInvite) ProtoMessage() {}

func (x *TLChatDeleteExportedChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatDeleteExportedChatInvite.ProtoReflect.Descriptor instead.
func (*TLChatDeleteExportedChatInvite) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{35}
}

func (x *TLChatDeleteExportedChatInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatDeleteExportedChatInvite) GetSelfId() int64 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *TLChatDeleteExportedChatInvite) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatDeleteExportedChatInvite) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLChatDeleteRevokedExportedChatInvites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId      int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId      int64         `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AdminId     int64         `protobuf:"varint,5,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
}

func (x *TLChatDeleteRevokedExportedChatInvites) Reset() {
	*x = TLChatDeleteRevokedExportedChatInvites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatDeleteRevokedExportedChatInvites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatDeleteRevokedExportedChatInvites) ProtoMessage() {}

func (x *TLChatDeleteRevokedExportedChatInvites) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatDeleteRevokedExportedChatInvites.ProtoReflect.Descriptor instead.
func (*TLChatDeleteRevokedExportedChatInvites) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{36}
}

func (x *TLChatDeleteRevokedExportedChatInvites) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatDeleteRevokedExportedChatInvites) GetSelfId() int64 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *TLChatDeleteRevokedExportedChatInvites) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatDeleteRevokedExportedChatInvites) GetAdminId() int64 {
	if x != nil {
		return x.AdminId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLChatEditExportedChatInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor   TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId        int64                   `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId        int64                   `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Revoked       bool                    `protobuf:"varint,5,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Link          string                  `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	ExpireDate    *wrapperspb.Int32Value  `protobuf:"bytes,7,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
	UsageLimit    *wrapperspb.Int32Value  `protobuf:"bytes,8,opt,name=usage_limit,json=usageLimit,proto3" json:"usage_limit,omitempty"`
	RequestNeeded *mtproto.Bool           `protobuf:"bytes,9,opt,name=request_needed,json=requestNeeded,proto3" json:"request_needed,omitempty"`
	Title         *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=title,proto3" json:"title,omitempty"`
}

func (x *TLChatEditExportedChatInvite) Reset() {
	*x = TLChatEditExportedChatInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatEditExportedChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatEditExportedChatInvite) ProtoMessage() {}

func (x *TLChatEditExportedChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatEditExportedChatInvite.ProtoReflect.Descriptor instead.
func (*TLChatEditExportedChatInvite) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{37}
}

func (x *TLChatEditExportedChatInvite) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatEditExportedChatInvite) GetSelfId() int64 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *TLChatEditExportedChatInvite) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatEditExportedChatInvite) GetRevoked() bool {
	if x != nil {
		return x.Revoked
	}
	return false
}

func (x *TLChatEditExportedChatInvite) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

func (x *TLChatEditExportedChatInvite) GetExpireDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ExpireDate
	}
	return nil
}

func (x *TLChatEditExportedChatInvite) GetUsageLimit() *wrapperspb.Int32Value {
	if x != nil {
		return x.UsageLimit
	}
	return nil
}

func (x *TLChatEditExportedChatInvite) GetRequestNeeded() *mtproto.Bool {
	if x != nil {
		return x.RequestNeeded
	}
	return nil
}

func (x *TLChatEditExportedChatInvite) GetTitle() *wrapperspb.StringValue {
	if x != nil {
		return x.Title
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLChatSetChatAvailableReactions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor            TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId                 int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId                 int64         `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	AvailableReactionsType int32         `protobuf:"varint,5,opt,name=available_reactions_type,json=availableReactionsType,proto3" json:"available_reactions_type,omitempty"`
	AvailableReactions     []string      `protobuf:"bytes,6,rep,name=available_reactions,json=availableReactions,proto3" json:"available_reactions,omitempty"`
}

func (x *TLChatSetChatAvailableReactions) Reset() {
	*x = TLChatSetChatAvailableReactions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatSetChatAvailableReactions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatSetChatAvailableReactions) ProtoMessage() {}

func (x *TLChatSetChatAvailableReactions) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatSetChatAvailableReactions.ProtoReflect.Descriptor instead.
func (*TLChatSetChatAvailableReactions) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{38}
}

func (x *TLChatSetChatAvailableReactions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatSetChatAvailableReactions) GetSelfId() int64 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *TLChatSetChatAvailableReactions) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatSetChatAvailableReactions) GetAvailableReactionsType() int32 {
	if x != nil {
		return x.AvailableReactionsType
	}
	return 0
}

func (x *TLChatSetChatAvailableReactions) GetAvailableReactions() []string {
	if x != nil {
		return x.AvailableReactions
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLChatSetHistoryTTL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId      int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId      int64         `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	TtlPeriod   int32         `protobuf:"varint,5,opt,name=ttl_period,json=ttlPeriod,proto3" json:"ttl_period,omitempty"`
}

func (x *TLChatSetHistoryTTL) Reset() {
	*x = TLChatSetHistoryTTL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatSetHistoryTTL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatSetHistoryTTL) ProtoMessage() {}

func (x *TLChatSetHistoryTTL) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatSetHistoryTTL.ProtoReflect.Descriptor instead.
func (*TLChatSetHistoryTTL) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{39}
}

func (x *TLChatSetHistoryTTL) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatSetHistoryTTL) GetSelfId() int64 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *TLChatSetHistoryTTL) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatSetHistoryTTL) GetTtlPeriod() int32 {
	if x != nil {
		return x.TtlPeriod
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLChatSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId      int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Q           string        `protobuf:"bytes,4,opt,name=q,proto3" json:"q,omitempty"`
	Offset      int64         `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int32         `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TLChatSearch) Reset() {
	*x = TLChatSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatSearch) ProtoMessage() {}

func (x *TLChatSearch) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatSearch.ProtoReflect.Descriptor instead.
func (*TLChatSearch) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{40}
}

func (x *TLChatSearch) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatSearch) GetSelfId() int64 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *TLChatSearch) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TLChatSearch) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TLChatSearch) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLChatGetRecentChatInviteRequesters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId      int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId      int64         `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
}

func (x *TLChatGetRecentChatInviteRequesters) Reset() {
	*x = TLChatGetRecentChatInviteRequesters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatGetRecentChatInviteRequesters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatGetRecentChatInviteRequesters) ProtoMessage() {}

func (x *TLChatGetRecentChatInviteRequesters) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatGetRecentChatInviteRequesters.ProtoReflect.Descriptor instead.
func (*TLChatGetRecentChatInviteRequesters) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{41}
}

func (x *TLChatGetRecentChatInviteRequesters) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatGetRecentChatInviteRequesters) GetSelfId() int64 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *TLChatGetRecentChatInviteRequesters) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLChatHideChatJoinRequests struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId      int64                   `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	ChatId      int64                   `protobuf:"varint,4,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	Approved    bool                    `protobuf:"varint,5,opt,name=approved,proto3" json:"approved,omitempty"`
	Link        *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=link,proto3" json:"link,omitempty"`
	UserId      *wrapperspb.Int64Value  `protobuf:"bytes,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLChatHideChatJoinRequests) Reset() {
	*x = TLChatHideChatJoinRequests{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatHideChatJoinRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatHideChatJoinRequests) ProtoMessage() {}

func (x *TLChatHideChatJoinRequests) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatHideChatJoinRequests.ProtoReflect.Descriptor instead.
func (*TLChatHideChatJoinRequests) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{42}
}

func (x *TLChatHideChatJoinRequests) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatHideChatJoinRequests) GetSelfId() int64 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *TLChatHideChatJoinRequests) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLChatHideChatJoinRequests) GetApproved() bool {
	if x != nil {
		return x.Approved
	}
	return false
}

func (x *TLChatHideChatJoinRequests) GetLink() *wrapperspb.StringValue {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *TLChatHideChatJoinRequests) GetUserId() *wrapperspb.Int64Value {
	if x != nil {
		return x.UserId
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLChatImportChatInvite2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=chat.TLConstructor" json:"constructor,omitempty"`
	SelfId      int64         `protobuf:"varint,3,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	Hash        string        `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *TLChatImportChatInvite2) Reset() {
	*x = TLChatImportChatInvite2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLChatImportChatInvite2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLChatImportChatInvite2) ProtoMessage() {}

func (x *TLChatImportChatInvite2) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLChatImportChatInvite2.ProtoReflect.Descriptor instead.
func (*TLChatImportChatInvite2) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{43}
}

func (x *TLChatImportChatInvite2) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLChatImportChatInvite2) GetSelfId() int64 {
	if x != nil {
		return x.SelfId
	}
	return 0
}

func (x *TLChatImportChatInvite2) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// --------------------------------------------------------------------------------------------
// Vector api result type
type Vector_MutableChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*mtproto.MutableChat `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_MutableChat) Reset() {
	*x = Vector_MutableChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_MutableChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_MutableChat) ProtoMessage() {}

func (x *Vector_MutableChat) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_MutableChat.ProtoReflect.Descriptor instead.
func (*Vector_MutableChat) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{44}
}

func (x *Vector_MutableChat) GetDatas() []*mtproto.MutableChat {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_Long struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []int64 `protobuf:"varint,1,rep,packed,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_Long) Reset() {
	*x = Vector_Long{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_Long) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_Long) ProtoMessage() {}

func (x *Vector_Long) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_Long.ProtoReflect.Descriptor instead.
func (*Vector_Long) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{45}
}

func (x *Vector_Long) GetDatas() []int64 {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_UserChatIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*UserChatIdList `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_UserChatIdList) Reset() {
	*x = Vector_UserChatIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_UserChatIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_UserChatIdList) ProtoMessage() {}

func (x *Vector_UserChatIdList) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_UserChatIdList.ProtoReflect.Descriptor instead.
func (*Vector_UserChatIdList) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{46}
}

func (x *Vector_UserChatIdList) GetDatas() []*UserChatIdList {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_ChatAdminWithInvites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*mtproto.ChatAdminWithInvites `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_ChatAdminWithInvites) Reset() {
	*x = Vector_ChatAdminWithInvites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_ChatAdminWithInvites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_ChatAdminWithInvites) ProtoMessage() {}

func (x *Vector_ChatAdminWithInvites) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_ChatAdminWithInvites.ProtoReflect.Descriptor instead.
func (*Vector_ChatAdminWithInvites) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{47}
}

func (x *Vector_ChatAdminWithInvites) GetDatas() []*mtproto.ChatAdminWithInvites {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_ExportedChatInvite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*mtproto.ExportedChatInvite `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_ExportedChatInvite) Reset() {
	*x = Vector_ExportedChatInvite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_ExportedChatInvite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_ExportedChatInvite) ProtoMessage() {}

func (x *Vector_ExportedChatInvite) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_ExportedChatInvite.ProtoReflect.Descriptor instead.
func (*Vector_ExportedChatInvite) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{48}
}

func (x *Vector_ExportedChatInvite) GetDatas() []*mtproto.ExportedChatInvite {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_ChatInviteImporter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*mtproto.ChatInviteImporter `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_ChatInviteImporter) Reset() {
	*x = Vector_ChatInviteImporter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_tl_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_ChatInviteImporter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_ChatInviteImporter) ProtoMessage() {}

func (x *Vector_ChatInviteImporter) ProtoReflect() protoreflect.Message {
	mi := &file_chat_tl_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_ChatInviteImporter.ProtoReflect.Descriptor instead.
func (*Vector_ChatInviteImporter) Descriptor() ([]byte, []int) {
	return file_chat_tl_proto_rawDescGZIP(), []int{49}
}

func (x *Vector_ChatInviteImporter) GetDatas() []*mtproto.ChatInviteImporter {
	if x != nil {
		return x.Datas
	}
	return nil
}

var File_chat_tl_proto protoreflect.FileDescriptor

var file_chat_tl_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x74, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x63, 0x68, 0x61, 0x74, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9b, 0x03, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x45, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x65,
	0x64, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x61, 0x62, 0x6f,
	0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x0a,
	0x05, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x70, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x22, 0x41, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x45, 0x78, 0x74, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x22, 0x3a, 0x0a, 0x0d, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x45, 0x78, 0x74, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22,
	0x3e, 0x0a, 0x11, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x50, 0x65, 0x65, 0x6b, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x45, 0x78, 0x74, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22,
	0xde, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12, 0x40,
	0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x22, 0x47, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0xd2, 0x01, 0x0a, 0x1a, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x72, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x57,
	0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x36, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0xa9, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x20, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x3f, 0x0a, 0x11, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x32, 0x22, 0x68, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x67, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x35,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x86,
	0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x06, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x42, 0x79, 0x53, 0x65, 0x6c,
	0x66, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65,
	0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6c,
	0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0xb7, 0x01, 0x0a,
	0x13, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x32, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x04, 0x62, 0x6f, 0x74, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x12, 0x54, 0x4c, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x35, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x22, 0xaf,
	0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x9f, 0x01, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61,
	0x62, 0x6f, 0x75, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x35,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x68, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x22,
	0xdf, 0x01, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x22, 0xd6, 0x01, 0x0a, 0x23, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x0c, 0x62, 0x61,
	0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x13, 0x54,
	0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73,
	0x5f, 0x62, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x42, 0x6f,
	0x74, 0x22, 0x69, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74,
	0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x42, 0x79, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xb4, 0x01, 0x0a,
	0x18, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4e,
	0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x6d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x04, 0x63, 0x68,
	0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x72, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x95, 0x01, 0x0a,
	0x15, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x68,
	0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x69, 0x73, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x94, 0x03, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x17,
	0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x5f, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x5f, 0x70, 0x65,
	0x72, 0x6d, 0x61, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x6c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x61,
	0x6e, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x1c,
	0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xb8, 0x02, 0x0a, 0x1e,
	0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x35,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76,
	0x6f, 0x6b, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x6e, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7d, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x7e, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xdd, 0x02, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x30, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x2a, 0x0a, 0x01, 0x71, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x71, 0x12, 0x1f, 0x0a,
	0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x9f, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0xae, 0x01, 0x0a, 0x28, 0x54, 0x4c, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65,
	0x6c, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x22, 0x9d, 0x03, 0x0a, 0x1e, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68,
	0x61, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x69,
	0x6e, 0x6b, 0x12, 0x3c, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x0b, 0x75, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x75, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x34,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x65,
	0x65, 0x64, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0xf7, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73,
	0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x54, 0x4c, 0x12, 0x35, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x74, 0x6c, 0x5f, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x74, 0x6c, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x90, 0x01, 0x0a, 0x25, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x73, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x34,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x7f, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x32, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x66,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x65, 0x6c, 0x66, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x40, 0x0a, 0x12, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x64,
	0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x23, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x43, 0x0a, 0x15,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x22, 0x52, 0x0a, 0x1b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x43, 0x68, 0x61, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x4e, 0x0a, 0x19, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x4e, 0x0a, 0x19, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x52, 0x05,
	0x64, 0x61, 0x74, 0x61, 0x73, 0x2a, 0xea, 0x0c, 0x0a, 0x0d, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x17, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x10, 0xde, 0xfa, 0xb9, 0xa0, 0xfa, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x1d, 0x0a, 0x10, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x10, 0xa7, 0xa3, 0xd7, 0xdb, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x21, 0x0a, 0x14, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x50, 0x65, 0x65, 0x6b, 0x10, 0xee, 0xc4, 0x8f, 0xe7, 0xfa, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x1c, 0x0a, 0x14, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xa4, 0xe4, 0x99, 0x80, 0x05,
	0x12, 0x28, 0x0a, 0x20, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x10, 0xd4, 0xf8, 0xb8, 0xe3, 0x01, 0x12, 0x20, 0x0a, 0x18, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x10, 0xf6, 0xa3, 0xc1, 0x90, 0x07, 0x12, 0x21, 0x0a, 0x19,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x10, 0xd2, 0xcb, 0xb0, 0xe1, 0x02, 0x12,
	0x2b, 0x0a, 0x1e, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x10, 0xb9, 0xea, 0x83, 0xba, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x1a,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x42, 0x79, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x10, 0xc8, 0xb4, 0xdc, 0xcd, 0x04,
	0x12, 0x23, 0x0a, 0x16, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x32, 0x10, 0xd2, 0x91, 0xd1, 0xbb, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1d, 0x0a, 0x15, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x10, 0x9e,
	0xd8, 0xc7, 0xe8, 0x06, 0x12, 0x20, 0x0a, 0x19, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x10, 0xd5, 0x9f, 0x9c, 0x59, 0x12, 0x25, 0x0a, 0x18, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x10, 0xa7, 0xbd, 0x96, 0xae, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a,
	0x18, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x10, 0xf8, 0xf8, 0xcd, 0xe3, 0x05, 0x12,
	0x20, 0x0a, 0x18, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x10, 0xe8, 0xcc, 0x8a, 0xae,
	0x04, 0x12, 0x20, 0x0a, 0x18, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x10, 0xec, 0xcb,
	0x97, 0xc8, 0x01, 0x12, 0x2e, 0x0a, 0x26, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x10, 0x87, 0xcd,
	0xd2, 0xd1, 0x05, 0x12, 0x23, 0x0a, 0x16, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x10, 0xe8, 0x82,
	0xd5, 0xaa, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x42, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x10, 0x8b, 0xcf, 0x98, 0x93,
	0xfa, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x28, 0x0a, 0x1b, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4e, 0x6f, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x10, 0xf9, 0xd5, 0xd4, 0xac, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x23, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x10, 0xdf, 0xd5, 0xfe, 0x41, 0x12, 0x2b, 0x0a, 0x23, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xa9, 0xc5, 0xd8,
	0x94, 0x03, 0x12, 0x25, 0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61, 0x74, 0x49, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x10, 0xcc, 0xd6, 0xda, 0xf9, 0x02, 0x12, 0x25, 0x0a, 0x18, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x68, 0x61,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x88, 0xd9, 0xd5, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x28, 0x0a, 0x1b, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10,
	0xcb, 0x80, 0xbe, 0xae, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69,
	0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x10, 0xd2, 0x83,
	0xa9, 0x97, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2d, 0x0a, 0x20, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0xd0, 0xe4, 0xa8,
	0xef, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2e, 0x0a, 0x21, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x10, 0xf6, 0xb1, 0xbc,
	0xa4, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x1a, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x8c, 0xe5, 0x9f, 0x9c, 0x07, 0x12, 0x23, 0x0a, 0x1b, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0xd4, 0xc1, 0x99, 0xc7, 0x05,
	0x12, 0x2e, 0x0a, 0x21, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x73, 0x10, 0xff, 0xaa, 0x99, 0xc2, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x2b, 0x0a, 0x23, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0xb8, 0x91, 0x8a, 0xb1, 0x05, 0x12, 0x38, 0x0a,
	0x2b, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x10, 0xe9, 0xc4, 0xc9,
	0x80, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2e, 0x0a, 0x21, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0xf6, 0x98, 0xe5,
	0xfc, 0xfa, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x31, 0x0a, 0x24, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10,
	0xf2, 0x92, 0xc2, 0xa6, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x18, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x54, 0x54, 0x4c, 0x10, 0x84, 0xc7, 0xed, 0xe7, 0x03, 0x12, 0x19, 0x0a, 0x11,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x10, 0xfb, 0xa9, 0x80, 0x8f, 0x02, 0x12, 0x35, 0x0a, 0x28, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x10, 0x98, 0xa1, 0xf0, 0xf6, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27,
	0x0a, 0x1f, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x64,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x73, 0x10, 0xd1, 0xd9, 0x94, 0xf5, 0x03, 0x12, 0x29, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x32, 0x10, 0xbf, 0xfb, 0xe4, 0xe6, 0xfd, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x32, 0x8f, 0x17, 0x0a, 0x07, 0x52, 0x50, 0x43, 0x43, 0x68, 0x61, 0x74, 0x12, 0x4b,
	0x0a, 0x13, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x18, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54,
	0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x42, 0x79, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x12, 0x1d,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x42, 0x79, 0x53, 0x65, 0x6c, 0x66, 0x49, 0x64, 0x1a, 0x14, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x32, 0x12, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x32, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x18, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22,
	0x00, 0x12, 0x4b, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x12,
	0x1b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65,
	0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x1a, 0x14, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x20, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x42, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x29,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x43, 0x68, 0x61, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x61, 0x6e,
	0x6e, 0x65, 0x64, 0x52, 0x69, 0x67, 0x68, 0x74, 0x73, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x43, 0x68, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x67, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x42,
	0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x42, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x4e, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1e, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x4e, 0x6f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x67, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x6d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5c,
	0x0a, 0x1d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x17,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54,
	0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x67, 0x65, 0x74, 0x4d, 0x79, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65,
	0x74, 0x4d, 0x79, 0x43, 0x68, 0x61, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x15, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x12, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x00, 0x12,
	0x64, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x22, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x73, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73,
	0x1a, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x43,
	0x68, 0x61, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1a, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65,
	0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x1b, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49,
	0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x1a, 0x1f, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x14, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54,
	0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x13, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x45, 0x78, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x15, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c,
	0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22, 0x00, 0x12, 0x66,
	0x0a, 0x1b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x73, 0x1a, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x72, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x1d, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54,
	0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x68, 0x0a, 0x25, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x76, 0x6f, 0x6b, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x1b, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43,
	0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x1a,
	0x1f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x1e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x27, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x14, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x54, 0x4c, 0x12, 0x1b, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x74, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x54, 0x4c, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x14, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x74, 0x22,
	0x00, 0x12, 0x75, 0x0a, 0x22, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2b, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54,
	0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x67, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x68, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54, 0x4c, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x43, 0x68, 0x61, 0x74, 0x4a, 0x6f, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x16, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x32, 0x12, 0x1f, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x54,
	0x4c, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x68, 0x61,
	0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x32, 0x1a, 0x18, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x22, 0x00, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d,
	0x67, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x62, 0x69, 0x7a, 0x2f, 0x63, 0x68, 0x61, 0x74,
	0x2f, 0x63, 0x68, 0x61, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_tl_proto_rawDescOnce sync.Once
	file_chat_tl_proto_rawDescData = file_chat_tl_proto_rawDesc
)

func file_chat_tl_proto_rawDescGZIP() []byte {
	file_chat_tl_proto_rawDescOnce.Do(func() {
		file_chat_tl_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_tl_proto_rawDescData)
	})
	return file_chat_tl_proto_rawDescData
}

var file_chat_tl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chat_tl_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_chat_tl_proto_goTypes = []interface{}{
	(TLConstructor)(0),                             // 0: chat.TLConstructor
	(*ChatInviteExt)(nil),                          // 1: chat.ChatInviteExt
	(*TLChatInviteAlready)(nil),                    // 2: chat.TL_chatInviteAlready
	(*TLChatInvite)(nil),                           // 3: chat.TL_chatInvite
	(*TLChatInvitePeek)(nil),                       // 4: chat.TL_chatInvitePeek
	(*ChatInviteImported)(nil),                     // 5: chat.ChatInviteImported
	(*TLChatInviteImported)(nil),                   // 6: chat.TL_chatInviteImported
	(*RecentChatInviteRequesters)(nil),             // 7: chat.RecentChatInviteRequesters
	(*TLRecentChatInviteRequesters)(nil),           // 8: chat.TL_recentChatInviteRequesters
	(*UserChatIdList)(nil),                         // 9: chat.UserChatIdList
	(*TLUserChatIdList)(nil),                       // 10: chat.TL_userChatIdList
	(*TLChatGetMutableChat)(nil),                   // 11: chat.TL_chat_getMutableChat
	(*TLChatGetChatListByIdList)(nil),              // 12: chat.TL_chat_getChatListByIdList
	(*TLChatGetChatBySelfId)(nil),                  // 13: chat.TL_chat_getChatBySelfId
	(*TLChatCreateChat2)(nil),                      // 14: chat.TL_chat_createChat2
	(*TLChatDeleteChat)(nil),                       // 15: chat.TL_chat_deleteChat
	(*TLChatDeleteChatUser)(nil),                   // 16: chat.TL_chat_deleteChatUser
	(*TLChatEditChatTitle)(nil),                    // 17: chat.TL_chat_editChatTitle
	(*TLChatEditChatAbout)(nil),                    // 18: chat.TL_chat_editChatAbout
	(*TLChatEditChatPhoto)(nil),                    // 19: chat.TL_chat_editChatPhoto
	(*TLChatEditChatAdmin)(nil),                    // 20: chat.TL_chat_editChatAdmin
	(*TLChatEditChatDefaultBannedRights)(nil),      // 21: chat.TL_chat_editChatDefaultBannedRights
	(*TLChatAddChatUser)(nil),                      // 22: chat.TL_chat_addChatUser
	(*TLChatGetMutableChatByLink)(nil),             // 23: chat.TL_chat_getMutableChatByLink
	(*TLChatToggleNoForwards)(nil),                 // 24: chat.TL_chat_toggleNoForwards
	(*TLChatMigratedToChannel)(nil),                // 25: chat.TL_chat_migratedToChannel
	(*TLChatGetChatParticipantIdList)(nil),         // 26: chat.TL_chat_getChatParticipantIdList
	(*TLChatGetUsersChatIdList)(nil),               // 27: chat.TL_chat_getUsersChatIdList
	(*TLChatGetMyChatList)(nil),                    // 28: chat.TL_chat_getMyChatList
	(*TLChatExportChatInvite)(nil),                 // 29: chat.TL_chat_exportChatInvite
	(*TLChatGetAdminsWithInvites)(nil),             // 30: chat.TL_chat_getAdminsWithInvites
	(*TLChatGetExportedChatInvite)(nil),            // 31: chat.TL_chat_getExportedChatInvite
	(*TLChatGetExportedChatInvites)(nil),           // 32: chat.TL_chat_getExportedChatInvites
	(*TLChatCheckChatInvite)(nil),                  // 33: chat.TL_chat_checkChatInvite
	(*TLChatImportChatInvite)(nil),                 // 34: chat.TL_chat_importChatInvite
	(*TLChatGetChatInviteImporters)(nil),           // 35: chat.TL_chat_getChatInviteImporters
	(*TLChatDeleteExportedChatInvite)(nil),         // 36: chat.TL_chat_deleteExportedChatInvite
	(*TLChatDeleteRevokedExportedChatInvites)(nil), // 37: chat.TL_chat_deleteRevokedExportedChatInvites
	(*TLChatEditExportedChatInvite)(nil),           // 38: chat.TL_chat_editExportedChatInvite
	(*TLChatSetChatAvailableReactions)(nil),        // 39: chat.TL_chat_setChatAvailableReactions
	(*TLChatSetHistoryTTL)(nil),                    // 40: chat.TL_chat_setHistoryTTL
	(*TLChatSearch)(nil),                           // 41: chat.TL_chat_search
	(*TLChatGetRecentChatInviteRequesters)(nil),    // 42: chat.TL_chat_getRecentChatInviteRequesters
	(*TLChatHideChatJoinRequests)(nil),             // 43: chat.TL_chat_hideChatJoinRequests
	(*TLChatImportChatInvite2)(nil),                // 44: chat.TL_chat_importChatInvite2
	(*Vector_MutableChat)(nil),                     // 45: chat.Vector_MutableChat
	(*Vector_Long)(nil),                            // 46: chat.Vector_Long
	(*Vector_UserChatIdList)(nil),                  // 47: chat.Vector_UserChatIdList
	(*Vector_ChatAdminWithInvites)(nil),            // 48: chat.Vector_ChatAdminWithInvites
	(*Vector_ExportedChatInvite)(nil),              // 49: chat.Vector_ExportedChatInvite
	(*Vector_ChatInviteImporter)(nil),              // 50: chat.Vector_ChatInviteImporter
	(*mtproto.MutableChat)(nil),                    // 51: mtproto.MutableChat
	(*wrapperspb.StringValue)(nil),                 // 52: google.protobuf.StringValue
	(*mtproto.Photo)(nil),                          // 53: mtproto.Photo
	(*mtproto.Bool)(nil),                           // 54: mtproto.Bool
	(*mtproto.ChatBannedRights)(nil),               // 55: mtproto.ChatBannedRights
	(*wrapperspb.Int32Value)(nil),                  // 56: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),                  // 57: google.protobuf.Int64Value
	(*mtproto.ChatAdminWithInvites)(nil),           // 58: mtproto.ChatAdminWithInvites
	(*mtproto.ExportedChatInvite)(nil),             // 59: mtproto.ExportedChatInvite
	(*mtproto.ChatInviteImporter)(nil),             // 60: mtproto.ChatInviteImporter
}
var file_chat_tl_proto_depIdxs = []int32{
	0,   // 0: chat.ChatInviteExt.constructor:type_name -> chat.TLConstructor
	51,  // 1: chat.ChatInviteExt.chat:type_name -> mtproto.MutableChat
	52,  // 2: chat.ChatInviteExt.about:type_name -> google.protobuf.StringValue
	53,  // 3: chat.ChatInviteExt.photo:type_name -> mtproto.Photo
	1,   // 4: chat.TL_chatInviteAlready.data2:type_name -> chat.ChatInviteExt
	1,   // 5: chat.TL_chatInvite.data2:type_name -> chat.ChatInviteExt
	1,   // 6: chat.TL_chatInvitePeek.data2:type_name -> chat.ChatInviteExt
	0,   // 7: chat.ChatInviteImported.constructor:type_name -> chat.TLConstructor
	51,  // 8: chat.ChatInviteImported.chat:type_name -> mtproto.MutableChat
	7,   // 9: chat.ChatInviteImported.requesters:type_name -> chat.RecentChatInviteRequesters
	5,   // 10: chat.TL_chatInviteImported.data2:type_name -> chat.ChatInviteImported
	0,   // 11: chat.RecentChatInviteRequesters.constructor:type_name -> chat.TLConstructor
	7,   // 12: chat.TL_recentChatInviteRequesters.data2:type_name -> chat.RecentChatInviteRequesters
	0,   // 13: chat.UserChatIdList.constructor:type_name -> chat.TLConstructor
	9,   // 14: chat.TL_userChatIdList.data2:type_name -> chat.UserChatIdList
	0,   // 15: chat.TL_chat_getMutableChat.constructor:type_name -> chat.TLConstructor
	0,   // 16: chat.TL_chat_getChatListByIdList.constructor:type_name -> chat.TLConstructor
	0,   // 17: chat.TL_chat_getChatBySelfId.constructor:type_name -> chat.TLConstructor
	0,   // 18: chat.TL_chat_createChat2.constructor:type_name -> chat.TLConstructor
	0,   // 19: chat.TL_chat_deleteChat.constructor:type_name -> chat.TLConstructor
	0,   // 20: chat.TL_chat_deleteChatUser.constructor:type_name -> chat.TLConstructor
	0,   // 21: chat.TL_chat_editChatTitle.constructor:type_name -> chat.TLConstructor
	0,   // 22: chat.TL_chat_editChatAbout.constructor:type_name -> chat.TLConstructor
	0,   // 23: chat.TL_chat_editChatPhoto.constructor:type_name -> chat.TLConstructor
	53,  // 24: chat.TL_chat_editChatPhoto.chat_photo:type_name -> mtproto.Photo
	0,   // 25: chat.TL_chat_editChatAdmin.constructor:type_name -> chat.TLConstructor
	54,  // 26: chat.TL_chat_editChatAdmin.is_admin:type_name -> mtproto.Bool
	0,   // 27: chat.TL_chat_editChatDefaultBannedRights.constructor:type_name -> chat.TLConstructor
	55,  // 28: chat.TL_chat_editChatDefaultBannedRights.banned_rights:type_name -> mtproto.ChatBannedRights
	0,   // 29: chat.TL_chat_addChatUser.constructor:type_name -> chat.TLConstructor
	0,   // 30: chat.TL_chat_getMutableChatByLink.constructor:type_name -> chat.TLConstructor
	0,   // 31: chat.TL_chat_toggleNoForwards.constructor:type_name -> chat.TLConstructor
	54,  // 32: chat.TL_chat_toggleNoForwards.enabled:type_name -> mtproto.Bool
	0,   // 33: chat.TL_chat_migratedToChannel.constructor:type_name -> chat.TLConstructor
	51,  // 34: chat.TL_chat_migratedToChannel.chat:type_name -> mtproto.MutableChat
	0,   // 35: chat.TL_chat_getChatParticipantIdList.constructor:type_name -> chat.TLConstructor
	0,   // 36: chat.TL_chat_getUsersChatIdList.constructor:type_name -> chat.TLConstructor
	0,   // 37: chat.TL_chat_getMyChatList.constructor:type_name -> chat.TLConstructor
	54,  // 38: chat.TL_chat_getMyChatList.is_creator:type_name -> mtproto.Bool
	0,   // 39: chat.TL_chat_exportChatInvite.constructor:type_name -> chat.TLConstructor
	56,  // 40: chat.TL_chat_exportChatInvite.expire_date:type_name -> google.protobuf.Int32Value
	56,  // 41: chat.TL_chat_exportChatInvite.usage_limit:type_name -> google.protobuf.Int32Value
	52,  // 42: chat.TL_chat_exportChatInvite.title:type_name -> google.protobuf.StringValue
	0,   // 43: chat.TL_chat_getAdminsWithInvites.constructor:type_name -> chat.TLConstructor
	0,   // 44: chat.TL_chat_getExportedChatInvite.constructor:type_name -> chat.TLConstructor
	0,   // 45: chat.TL_chat_getExportedChatInvites.constructor:type_name -> chat.TLConstructor
	56,  // 46: chat.TL_chat_getExportedChatInvites.offset_date:type_name -> google.protobuf.Int32Value
	52,  // 47: chat.TL_chat_getExportedChatInvites.offset_link:type_name -> google.protobuf.StringValue
	0,   // 48: chat.TL_chat_checkChatInvite.constructor:type_name -> chat.TLConstructor
	0,   // 49: chat.TL_chat_importChatInvite.constructor:type_name -> chat.TLConstructor
	0,   // 50: chat.TL_chat_getChatInviteImporters.constructor:type_name -> chat.TLConstructor
	52,  // 51: chat.TL_chat_getChatInviteImporters.link:type_name -> google.protobuf.StringValue
	52,  // 52: chat.TL_chat_getChatInviteImporters.q:type_name -> google.protobuf.StringValue
	0,   // 53: chat.TL_chat_deleteExportedChatInvite.constructor:type_name -> chat.TLConstructor
	0,   // 54: chat.TL_chat_deleteRevokedExportedChatInvites.constructor:type_name -> chat.TLConstructor
	0,   // 55: chat.TL_chat_editExportedChatInvite.constructor:type_name -> chat.TLConstructor
	56,  // 56: chat.TL_chat_editExportedChatInvite.expire_date:type_name -> google.protobuf.Int32Value
	56,  // 57: chat.TL_chat_editExportedChatInvite.usage_limit:type_name -> google.protobuf.Int32Value
	54,  // 58: chat.TL_chat_editExportedChatInvite.request_needed:type_name -> mtproto.Bool
	52,  // 59: chat.TL_chat_editExportedChatInvite.title:type_name -> google.protobuf.StringValue
	0,   // 60: chat.TL_chat_setChatAvailableReactions.constructor:type_name -> chat.TLConstructor
	0,   // 61: chat.TL_chat_setHistoryTTL.constructor:type_name -> chat.TLConstructor
	0,   // 62: chat.TL_chat_search.constructor:type_name -> chat.TLConstructor
	0,   // 63: chat.TL_chat_getRecentChatInviteRequesters.constructor:type_name -> chat.TLConstructor
	0,   // 64: chat.TL_chat_hideChatJoinRequests.constructor:type_name -> chat.TLConstructor
	52,  // 65: chat.TL_chat_hideChatJoinRequests.link:type_name -> google.protobuf.StringValue
	57,  // 66: chat.TL_chat_hideChatJoinRequests.user_id:type_name -> google.protobuf.Int64Value
	0,   // 67: chat.TL_chat_importChatInvite2.constructor:type_name -> chat.TLConstructor
	51,  // 68: chat.Vector_MutableChat.datas:type_name -> mtproto.MutableChat
	9,   // 69: chat.Vector_UserChatIdList.datas:type_name -> chat.UserChatIdList
	58,  // 70: chat.Vector_ChatAdminWithInvites.datas:type_name -> mtproto.ChatAdminWithInvites
	59,  // 71: chat.Vector_ExportedChatInvite.datas:type_name -> mtproto.ExportedChatInvite
	60,  // 72: chat.Vector_ChatInviteImporter.datas:type_name -> mtproto.ChatInviteImporter
	11,  // 73: chat.RPCChat.chat_getMutableChat:input_type -> chat.TL_chat_getMutableChat
	12,  // 74: chat.RPCChat.chat_getChatListByIdList:input_type -> chat.TL_chat_getChatListByIdList
	13,  // 75: chat.RPCChat.chat_getChatBySelfId:input_type -> chat.TL_chat_getChatBySelfId
	14,  // 76: chat.RPCChat.chat_createChat2:input_type -> chat.TL_chat_createChat2
	15,  // 77: chat.RPCChat.chat_deleteChat:input_type -> chat.TL_chat_deleteChat
	16,  // 78: chat.RPCChat.chat_deleteChatUser:input_type -> chat.TL_chat_deleteChatUser
	17,  // 79: chat.RPCChat.chat_editChatTitle:input_type -> chat.TL_chat_editChatTitle
	18,  // 80: chat.RPCChat.chat_editChatAbout:input_type -> chat.TL_chat_editChatAbout
	19,  // 81: chat.RPCChat.chat_editChatPhoto:input_type -> chat.TL_chat_editChatPhoto
	20,  // 82: chat.RPCChat.chat_editChatAdmin:input_type -> chat.TL_chat_editChatAdmin
	21,  // 83: chat.RPCChat.chat_editChatDefaultBannedRights:input_type -> chat.TL_chat_editChatDefaultBannedRights
	22,  // 84: chat.RPCChat.chat_addChatUser:input_type -> chat.TL_chat_addChatUser
	23,  // 85: chat.RPCChat.chat_getMutableChatByLink:input_type -> chat.TL_chat_getMutableChatByLink
	24,  // 86: chat.RPCChat.chat_toggleNoForwards:input_type -> chat.TL_chat_toggleNoForwards
	25,  // 87: chat.RPCChat.chat_migratedToChannel:input_type -> chat.TL_chat_migratedToChannel
	26,  // 88: chat.RPCChat.chat_getChatParticipantIdList:input_type -> chat.TL_chat_getChatParticipantIdList
	27,  // 89: chat.RPCChat.chat_getUsersChatIdList:input_type -> chat.TL_chat_getUsersChatIdList
	28,  // 90: chat.RPCChat.chat_getMyChatList:input_type -> chat.TL_chat_getMyChatList
	29,  // 91: chat.RPCChat.chat_exportChatInvite:input_type -> chat.TL_chat_exportChatInvite
	30,  // 92: chat.RPCChat.chat_getAdminsWithInvites:input_type -> chat.TL_chat_getAdminsWithInvites
	31,  // 93: chat.RPCChat.chat_getExportedChatInvite:input_type -> chat.TL_chat_getExportedChatInvite
	32,  // 94: chat.RPCChat.chat_getExportedChatInvites:input_type -> chat.TL_chat_getExportedChatInvites
	33,  // 95: chat.RPCChat.chat_checkChatInvite:input_type -> chat.TL_chat_checkChatInvite
	34,  // 96: chat.RPCChat.chat_importChatInvite:input_type -> chat.TL_chat_importChatInvite
	35,  // 97: chat.RPCChat.chat_getChatInviteImporters:input_type -> chat.TL_chat_getChatInviteImporters
	36,  // 98: chat.RPCChat.chat_deleteExportedChatInvite:input_type -> chat.TL_chat_deleteExportedChatInvite
	37,  // 99: chat.RPCChat.chat_deleteRevokedExportedChatInvites:input_type -> chat.TL_chat_deleteRevokedExportedChatInvites
	38,  // 100: chat.RPCChat.chat_editExportedChatInvite:input_type -> chat.TL_chat_editExportedChatInvite
	39,  // 101: chat.RPCChat.chat_setChatAvailableReactions:input_type -> chat.TL_chat_setChatAvailableReactions
	40,  // 102: chat.RPCChat.chat_setHistoryTTL:input_type -> chat.TL_chat_setHistoryTTL
	41,  // 103: chat.RPCChat.chat_search:input_type -> chat.TL_chat_search
	42,  // 104: chat.RPCChat.chat_getRecentChatInviteRequesters:input_type -> chat.TL_chat_getRecentChatInviteRequesters
	43,  // 105: chat.RPCChat.chat_hideChatJoinRequests:input_type -> chat.TL_chat_hideChatJoinRequests
	44,  // 106: chat.RPCChat.chat_importChatInvite2:input_type -> chat.TL_chat_importChatInvite2
	51,  // 107: chat.RPCChat.chat_getMutableChat:output_type -> mtproto.MutableChat
	45,  // 108: chat.RPCChat.chat_getChatListByIdList:output_type -> chat.Vector_MutableChat
	51,  // 109: chat.RPCChat.chat_getChatBySelfId:output_type -> mtproto.MutableChat
	51,  // 110: chat.RPCChat.chat_createChat2:output_type -> mtproto.MutableChat
	51,  // 111: chat.RPCChat.chat_deleteChat:output_type -> mtproto.MutableChat
	51,  // 112: chat.RPCChat.chat_deleteChatUser:output_type -> mtproto.MutableChat
	51,  // 113: chat.RPCChat.chat_editChatTitle:output_type -> mtproto.MutableChat
	51,  // 114: chat.RPCChat.chat_editChatAbout:output_type -> mtproto.MutableChat
	51,  // 115: chat.RPCChat.chat_editChatPhoto:output_type -> mtproto.MutableChat
	51,  // 116: chat.RPCChat.chat_editChatAdmin:output_type -> mtproto.MutableChat
	51,  // 117: chat.RPCChat.chat_editChatDefaultBannedRights:output_type -> mtproto.MutableChat
	51,  // 118: chat.RPCChat.chat_addChatUser:output_type -> mtproto.MutableChat
	51,  // 119: chat.RPCChat.chat_getMutableChatByLink:output_type -> mtproto.MutableChat
	51,  // 120: chat.RPCChat.chat_toggleNoForwards:output_type -> mtproto.MutableChat
	54,  // 121: chat.RPCChat.chat_migratedToChannel:output_type -> mtproto.Bool
	46,  // 122: chat.RPCChat.chat_getChatParticipantIdList:output_type -> chat.Vector_Long
	47,  // 123: chat.RPCChat.chat_getUsersChatIdList:output_type -> chat.Vector_UserChatIdList
	45,  // 124: chat.RPCChat.chat_getMyChatList:output_type -> chat.Vector_MutableChat
	59,  // 125: chat.RPCChat.chat_exportChatInvite:output_type -> mtproto.ExportedChatInvite
	48,  // 126: chat.RPCChat.chat_getAdminsWithInvites:output_type -> chat.Vector_ChatAdminWithInvites
	59,  // 127: chat.RPCChat.chat_getExportedChatInvite:output_type -> mtproto.ExportedChatInvite
	49,  // 128: chat.RPCChat.chat_getExportedChatInvites:output_type -> chat.Vector_ExportedChatInvite
	1,   // 129: chat.RPCChat.chat_checkChatInvite:output_type -> chat.ChatInviteExt
	51,  // 130: chat.RPCChat.chat_importChatInvite:output_type -> mtproto.MutableChat
	50,  // 131: chat.RPCChat.chat_getChatInviteImporters:output_type -> chat.Vector_ChatInviteImporter
	54,  // 132: chat.RPCChat.chat_deleteExportedChatInvite:output_type -> mtproto.Bool
	54,  // 133: chat.RPCChat.chat_deleteRevokedExportedChatInvites:output_type -> mtproto.Bool
	49,  // 134: chat.RPCChat.chat_editExportedChatInvite:output_type -> chat.Vector_ExportedChatInvite
	51,  // 135: chat.RPCChat.chat_setChatAvailableReactions:output_type -> mtproto.MutableChat
	51,  // 136: chat.RPCChat.chat_setHistoryTTL:output_type -> mtproto.MutableChat
	45,  // 137: chat.RPCChat.chat_search:output_type -> chat.Vector_MutableChat
	7,   // 138: chat.RPCChat.chat_getRecentChatInviteRequesters:output_type -> chat.RecentChatInviteRequesters
	7,   // 139: chat.RPCChat.chat_hideChatJoinRequests:output_type -> chat.RecentChatInviteRequesters
	5,   // 140: chat.RPCChat.chat_importChatInvite2:output_type -> chat.ChatInviteImported
	107, // [107:141] is the sub-list for method output_type
	73,  // [73:107] is the sub-list for method input_type
	73,  // [73:73] is the sub-list for extension type_name
	73,  // [73:73] is the sub-list for extension extendee
	0,   // [0:73] is the sub-list for field type_name
}

func init() { file_chat_tl_proto_init() }
func file_chat_tl_proto_init() {
	if File_chat_tl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_tl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatInviteExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatInviteAlready); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatInvitePeek); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatInviteImported); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatInviteImported); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentChatInviteRequesters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLRecentChatInviteRequesters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserChatIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUserChatIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatGetMutableChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatGetChatListByIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatGetChatBySelfId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatCreateChat2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatDeleteChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatDeleteChatUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatEditChatTitle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatEditChatAbout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatEditChatPhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatEditChatAdmin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatEditChatDefaultBannedRights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatAddChatUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatGetMutableChatByLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatToggleNoForwards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatMigratedToChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatGetChatParticipantIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatGetUsersChatIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatGetMyChatList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatExportChatInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatGetAdminsWithInvites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatGetExportedChatInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatGetExportedChatInvites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatCheckChatInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatImportChatInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatGetChatInviteImporters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatDeleteExportedChatInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatDeleteRevokedExportedChatInvites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatEditExportedChatInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatSetChatAvailableReactions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatSetHistoryTTL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatGetRecentChatInviteRequesters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatHideChatJoinRequests); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLChatImportChatInvite2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_MutableChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_Long); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_UserChatIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_ChatAdminWithInvites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_ExportedChatInvite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_tl_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_ChatInviteImporter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_tl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_tl_proto_goTypes,
		DependencyIndexes: file_chat_tl_proto_depIdxs,
		EnumInfos:         file_chat_tl_proto_enumTypes,
		MessageInfos:      file_chat_tl_proto_msgTypes,
	}.Build()
	File_chat_tl_proto = out.File
	file_chat_tl_proto_rawDesc = nil
	file_chat_tl_proto_goTypes = nil
	file_chat_tl_proto_depIdxs = nil
}
