//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: user.tl.proto

package user

import (
	mtproto "github.com/teamgram/proto/mtproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLConstructor int32

const (
	TLConstructor_CRC32_UNKNOWN                           TLConstructor = 0
	TLConstructor_CRC32_userImportedContacts              TLConstructor = 1256160192
	TLConstructor_CRC32_usersDataFound                    TLConstructor = 1067703239
	TLConstructor_CRC32_usersIdFound                      TLConstructor = -2134594054
	TLConstructor_CRC32_peerPeerNotifySettings            TLConstructor = 1894399913
	TLConstructor_CRC32_lastSeenData                      TLConstructor = -1280204321
	TLConstructor_CRC32_user_getLastSeens                 TLConstructor = 2090958337
	TLConstructor_CRC32_user_updateLastSeen               TLConstructor = -46114259
	TLConstructor_CRC32_user_getLastSeen                  TLConstructor = -1860581154
	TLConstructor_CRC32_user_getImmutableUser             TLConstructor = 929720132
	TLConstructor_CRC32_user_getMutableUsers              TLConstructor = -1657068585
	TLConstructor_CRC32_user_getImmutableUserByPhone      TLConstructor = -373067804
	TLConstructor_CRC32_user_getImmutableUserByToken      TLConstructor = -12709005
	TLConstructor_CRC32_user_setAccountDaysTTL            TLConstructor = -766178484
	TLConstructor_CRC32_user_getAccountDaysTTL            TLConstructor = -1299956000
	TLConstructor_CRC32_user_getNotifySettings            TLConstructor = 1085028198
	TLConstructor_CRC32_user_getNotifySettingsList        TLConstructor = -463137380
	TLConstructor_CRC32_user_setNotifySettings            TLConstructor = -907188763
	TLConstructor_CRC32_user_resetNotifySettings          TLConstructor = 235380084
	TLConstructor_CRC32_user_getAllNotifySettings         TLConstructor = 1435658357
	TLConstructor_CRC32_user_getGlobalPrivacySettings     TLConstructor = 2012672274
	TLConstructor_CRC32_user_setGlobalPrivacySettings     TLConstructor = -1934257490
	TLConstructor_CRC32_user_getPrivacy                   TLConstructor = -1656708172
	TLConstructor_CRC32_user_setPrivacy                   TLConstructor = -2007650929
	TLConstructor_CRC32_user_checkPrivacy                 TLConstructor = -982638934
	TLConstructor_CRC32_user_addPeerSettings              TLConstructor = -891148445
	TLConstructor_CRC32_user_getPeerSettings              TLConstructor = 218296167
	TLConstructor_CRC32_user_deletePeerSettings           TLConstructor = 1586043239
	TLConstructor_CRC32_user_changePhone                  TLConstructor = -8759461
	TLConstructor_CRC32_user_createNewUser                TLConstructor = 2044729473
	TLConstructor_CRC32_user_deleteUser                   TLConstructor = 2132777160
	TLConstructor_CRC32_user_blockPeer                    TLConstructor = -2130301264
	TLConstructor_CRC32_user_unBlockPeer                  TLConstructor = -555280883
	TLConstructor_CRC32_user_blockedByUser                TLConstructor = -1147140722
	TLConstructor_CRC32_user_isBlockedByUser              TLConstructor = -1934708257
	TLConstructor_CRC32_user_checkBlockUserList           TLConstructor = -1006800656
	TLConstructor_CRC32_user_getBlockedList               TLConstructor = 603964232
	TLConstructor_CRC32_user_getContactSignUpNotification TLConstructor = -456010794
	TLConstructor_CRC32_user_setContactSignUpNotification TLConstructor = -2053016735
	TLConstructor_CRC32_user_getContentSettings           TLConstructor = -1799115361
	TLConstructor_CRC32_user_setContentSettings           TLConstructor = -1654391189
	TLConstructor_CRC32_user_deleteContact                TLConstructor = -972979687
	TLConstructor_CRC32_user_getContactList               TLConstructor = -951332511
	TLConstructor_CRC32_user_getContactIdList             TLConstructor = -237135810
	TLConstructor_CRC32_user_getContact                   TLConstructor = -613250077
	TLConstructor_CRC32_user_addContact                   TLConstructor = 2042936590
	TLConstructor_CRC32_user_checkContact                 TLConstructor = -2102962012
	TLConstructor_CRC32_user_getImportersByPhone          TLConstructor = 1202356754
	TLConstructor_CRC32_user_deleteImportersByPhone       TLConstructor = 390978644
	TLConstructor_CRC32_user_importContacts               TLConstructor = -1711212654
	TLConstructor_CRC32_user_getCountryCode               TLConstructor = 302016562
	TLConstructor_CRC32_user_updateAbout                  TLConstructor = -620695161
	TLConstructor_CRC32_user_updateFirstAndLastName       TLConstructor = -882473492
	TLConstructor_CRC32_user_updateVerified               TLConstructor = 617163107
	TLConstructor_CRC32_user_updateUsername               TLConstructor = -179495311
	TLConstructor_CRC32_user_updateProfilePhoto           TLConstructor = 997461895
	TLConstructor_CRC32_user_deleteProfilePhotos          TLConstructor = 736322062
	TLConstructor_CRC32_user_getProfilePhotos             TLConstructor = -597245626
	TLConstructor_CRC32_user_setBotCommands               TLConstructor = 1966844182
	TLConstructor_CRC32_user_isBot                        TLConstructor = -948779026
	TLConstructor_CRC32_user_getBotInfo                   TLConstructor = 879114000
	TLConstructor_CRC32_user_checkBots                    TLConstructor = 1935999169
	TLConstructor_CRC32_user_getFullUser                  TLConstructor = -49225414
	TLConstructor_CRC32_user_updateEmojiStatus            TLConstructor = -121062696
	TLConstructor_CRC32_user_getUserDataById              TLConstructor = 62615811
	TLConstructor_CRC32_user_getUserDataListByIdList      TLConstructor = -2121142279
	TLConstructor_CRC32_user_getUserDataByToken           TLConstructor = 1057580446
	TLConstructor_CRC32_user_search                       TLConstructor = 1882568397
	TLConstructor_CRC32_user_updateBotData                TLConstructor = -1174586898
	TLConstructor_CRC32_user_getImmutableUserV2           TLConstructor = 806009420
	TLConstructor_CRC32_user_getMutableUsersV2            TLConstructor = -1795585240
	TLConstructor_CRC32_user_createNewTestUser            TLConstructor = 1282329771
	TLConstructor_CRC32_user_editCloseFriends             TLConstructor = -2044429563
	TLConstructor_CRC32_user_setStoriesMaxId              TLConstructor = 1391834736
	TLConstructor_CRC32_user_setColor                     TLConstructor = 586812791
	TLConstructor_CRC32_user_updateBirthday               TLConstructor = 1484434322
	TLConstructor_CRC32_user_getBirthdays                 TLConstructor = -24199258
	TLConstructor_CRC32_user_setStoriesHidden             TLConstructor = -138012584
	TLConstructor_CRC32_user_updatePersonalChannel        TLConstructor = -940065072
	TLConstructor_CRC32_user_getUserIdByPhone             TLConstructor = -72645694
)

// Enum value maps for TLConstructor.
var (
	TLConstructor_name = map[int32]string{
		0:           "CRC32_UNKNOWN",
		1256160192:  "CRC32_userImportedContacts",
		1067703239:  "CRC32_usersDataFound",
		-2134594054: "CRC32_usersIdFound",
		1894399913:  "CRC32_peerPeerNotifySettings",
		-1280204321: "CRC32_lastSeenData",
		2090958337:  "CRC32_user_getLastSeens",
		-46114259:   "CRC32_user_updateLastSeen",
		-1860581154: "CRC32_user_getLastSeen",
		929720132:   "CRC32_user_getImmutableUser",
		-1657068585: "CRC32_user_getMutableUsers",
		-373067804:  "CRC32_user_getImmutableUserByPhone",
		-12709005:   "CRC32_user_getImmutableUserByToken",
		-766178484:  "CRC32_user_setAccountDaysTTL",
		-1299956000: "CRC32_user_getAccountDaysTTL",
		1085028198:  "CRC32_user_getNotifySettings",
		-463137380:  "CRC32_user_getNotifySettingsList",
		-907188763:  "CRC32_user_setNotifySettings",
		235380084:   "CRC32_user_resetNotifySettings",
		1435658357:  "CRC32_user_getAllNotifySettings",
		2012672274:  "CRC32_user_getGlobalPrivacySettings",
		-1934257490: "CRC32_user_setGlobalPrivacySettings",
		-1656708172: "CRC32_user_getPrivacy",
		-2007650929: "CRC32_user_setPrivacy",
		-982638934:  "CRC32_user_checkPrivacy",
		-891148445:  "CRC32_user_addPeerSettings",
		218296167:   "CRC32_user_getPeerSettings",
		1586043239:  "CRC32_user_deletePeerSettings",
		-8759461:    "CRC32_user_changePhone",
		2044729473:  "CRC32_user_createNewUser",
		2132777160:  "CRC32_user_deleteUser",
		-2130301264: "CRC32_user_blockPeer",
		-555280883:  "CRC32_user_unBlockPeer",
		-1147140722: "CRC32_user_blockedByUser",
		-1934708257: "CRC32_user_isBlockedByUser",
		-1006800656: "CRC32_user_checkBlockUserList",
		603964232:   "CRC32_user_getBlockedList",
		-456010794:  "CRC32_user_getContactSignUpNotification",
		-2053016735: "CRC32_user_setContactSignUpNotification",
		-1799115361: "CRC32_user_getContentSettings",
		-1654391189: "CRC32_user_setContentSettings",
		-972979687:  "CRC32_user_deleteContact",
		-951332511:  "CRC32_user_getContactList",
		-237135810:  "CRC32_user_getContactIdList",
		-613250077:  "CRC32_user_getContact",
		2042936590:  "CRC32_user_addContact",
		-2102962012: "CRC32_user_checkContact",
		1202356754:  "CRC32_user_getImportersByPhone",
		390978644:   "CRC32_user_deleteImportersByPhone",
		-1711212654: "CRC32_user_importContacts",
		302016562:   "CRC32_user_getCountryCode",
		-620695161:  "CRC32_user_updateAbout",
		-882473492:  "CRC32_user_updateFirstAndLastName",
		617163107:   "CRC32_user_updateVerified",
		-179495311:  "CRC32_user_updateUsername",
		997461895:   "CRC32_user_updateProfilePhoto",
		736322062:   "CRC32_user_deleteProfilePhotos",
		-597245626:  "CRC32_user_getProfilePhotos",
		1966844182:  "CRC32_user_setBotCommands",
		-948779026:  "CRC32_user_isBot",
		879114000:   "CRC32_user_getBotInfo",
		1935999169:  "CRC32_user_checkBots",
		-49225414:   "CRC32_user_getFullUser",
		-121062696:  "CRC32_user_updateEmojiStatus",
		62615811:    "CRC32_user_getUserDataById",
		-2121142279: "CRC32_user_getUserDataListByIdList",
		1057580446:  "CRC32_user_getUserDataByToken",
		1882568397:  "CRC32_user_search",
		-1174586898: "CRC32_user_updateBotData",
		806009420:   "CRC32_user_getImmutableUserV2",
		-1795585240: "CRC32_user_getMutableUsersV2",
		1282329771:  "CRC32_user_createNewTestUser",
		-2044429563: "CRC32_user_editCloseFriends",
		1391834736:  "CRC32_user_setStoriesMaxId",
		586812791:   "CRC32_user_setColor",
		1484434322:  "CRC32_user_updateBirthday",
		-24199258:   "CRC32_user_getBirthdays",
		-138012584:  "CRC32_user_setStoriesHidden",
		-940065072:  "CRC32_user_updatePersonalChannel",
		-72645694:   "CRC32_user_getUserIdByPhone",
	}
	TLConstructor_value = map[string]int32{
		"CRC32_UNKNOWN":                           0,
		"CRC32_userImportedContacts":              1256160192,
		"CRC32_usersDataFound":                    1067703239,
		"CRC32_usersIdFound":                      -2134594054,
		"CRC32_peerPeerNotifySettings":            1894399913,
		"CRC32_lastSeenData":                      -1280204321,
		"CRC32_user_getLastSeens":                 2090958337,
		"CRC32_user_updateLastSeen":               -46114259,
		"CRC32_user_getLastSeen":                  -1860581154,
		"CRC32_user_getImmutableUser":             929720132,
		"CRC32_user_getMutableUsers":              -1657068585,
		"CRC32_user_getImmutableUserByPhone":      -373067804,
		"CRC32_user_getImmutableUserByToken":      -12709005,
		"CRC32_user_setAccountDaysTTL":            -766178484,
		"CRC32_user_getAccountDaysTTL":            -1299956000,
		"CRC32_user_getNotifySettings":            1085028198,
		"CRC32_user_getNotifySettingsList":        -463137380,
		"CRC32_user_setNotifySettings":            -907188763,
		"CRC32_user_resetNotifySettings":          235380084,
		"CRC32_user_getAllNotifySettings":         1435658357,
		"CRC32_user_getGlobalPrivacySettings":     2012672274,
		"CRC32_user_setGlobalPrivacySettings":     -1934257490,
		"CRC32_user_getPrivacy":                   -1656708172,
		"CRC32_user_setPrivacy":                   -2007650929,
		"CRC32_user_checkPrivacy":                 -982638934,
		"CRC32_user_addPeerSettings":              -891148445,
		"CRC32_user_getPeerSettings":              218296167,
		"CRC32_user_deletePeerSettings":           1586043239,
		"CRC32_user_changePhone":                  -8759461,
		"CRC32_user_createNewUser":                2044729473,
		"CRC32_user_deleteUser":                   2132777160,
		"CRC32_user_blockPeer":                    -2130301264,
		"CRC32_user_unBlockPeer":                  -555280883,
		"CRC32_user_blockedByUser":                -1147140722,
		"CRC32_user_isBlockedByUser":              -1934708257,
		"CRC32_user_checkBlockUserList":           -1006800656,
		"CRC32_user_getBlockedList":               603964232,
		"CRC32_user_getContactSignUpNotification": -456010794,
		"CRC32_user_setContactSignUpNotification": -2053016735,
		"CRC32_user_getContentSettings":           -1799115361,
		"CRC32_user_setContentSettings":           -1654391189,
		"CRC32_user_deleteContact":                -972979687,
		"CRC32_user_getContactList":               -951332511,
		"CRC32_user_getContactIdList":             -237135810,
		"CRC32_user_getContact":                   -613250077,
		"CRC32_user_addContact":                   2042936590,
		"CRC32_user_checkContact":                 -2102962012,
		"CRC32_user_getImportersByPhone":          1202356754,
		"CRC32_user_deleteImportersByPhone":       390978644,
		"CRC32_user_importContacts":               -1711212654,
		"CRC32_user_getCountryCode":               302016562,
		"CRC32_user_updateAbout":                  -620695161,
		"CRC32_user_updateFirstAndLastName":       -882473492,
		"CRC32_user_updateVerified":               617163107,
		"CRC32_user_updateUsername":               -179495311,
		"CRC32_user_updateProfilePhoto":           997461895,
		"CRC32_user_deleteProfilePhotos":          736322062,
		"CRC32_user_getProfilePhotos":             -597245626,
		"CRC32_user_setBotCommands":               1966844182,
		"CRC32_user_isBot":                        -948779026,
		"CRC32_user_getBotInfo":                   879114000,
		"CRC32_user_checkBots":                    1935999169,
		"CRC32_user_getFullUser":                  -49225414,
		"CRC32_user_updateEmojiStatus":            -121062696,
		"CRC32_user_getUserDataById":              62615811,
		"CRC32_user_getUserDataListByIdList":      -2121142279,
		"CRC32_user_getUserDataByToken":           1057580446,
		"CRC32_user_search":                       1882568397,
		"CRC32_user_updateBotData":                -1174586898,
		"CRC32_user_getImmutableUserV2":           806009420,
		"CRC32_user_getMutableUsersV2":            -1795585240,
		"CRC32_user_createNewTestUser":            1282329771,
		"CRC32_user_editCloseFriends":             -2044429563,
		"CRC32_user_setStoriesMaxId":              1391834736,
		"CRC32_user_setColor":                     586812791,
		"CRC32_user_updateBirthday":               1484434322,
		"CRC32_user_getBirthdays":                 -24199258,
		"CRC32_user_setStoriesHidden":             -138012584,
		"CRC32_user_updatePersonalChannel":        -940065072,
		"CRC32_user_getUserIdByPhone":             -72645694,
	}
)

func (x TLConstructor) Enum() *TLConstructor {
	p := new(TLConstructor)
	*p = x
	return p
}

func (x TLConstructor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLConstructor) Descriptor() protoreflect.EnumDescriptor {
	return file_user_tl_proto_enumTypes[0].Descriptor()
}

func (TLConstructor) Type() protoreflect.EnumType {
	return &file_user_tl_proto_enumTypes[0]
}

func (x TLConstructor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLConstructor.Descriptor instead.
func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{0}
}

// LastSeenData <--
//   - TL_lastSeenData
type LastSeenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId        int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LastSeenAt    int64         `protobuf:"varint,4,opt,name=last_seen_at,json=lastSeenAt,proto3" json:"last_seen_at,omitempty"`
	Expires       int32         `protobuf:"varint,5,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (x *LastSeenData) Reset() {
	*x = LastSeenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LastSeenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LastSeenData) ProtoMessage() {}

func (x *LastSeenData) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LastSeenData.ProtoReflect.Descriptor instead.
func (*LastSeenData) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{0}
}

func (x *LastSeenData) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *LastSeenData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *LastSeenData) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *LastSeenData) GetLastSeenAt() int64 {
	if x != nil {
		return x.LastSeenAt
	}
	return 0
}

func (x *LastSeenData) GetExpires() int32 {
	if x != nil {
		return x.Expires
	}
	return 0
}

type TLLastSeenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *LastSeenData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLLastSeenData) Reset() {
	*x = TLLastSeenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLLastSeenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLLastSeenData) ProtoMessage() {}

func (x *TLLastSeenData) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLLastSeenData.ProtoReflect.Descriptor instead.
func (*TLLastSeenData) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{1}
}

func (x *TLLastSeenData) GetData2() *LastSeenData {
	if x != nil {
		return x.Data2
	}
	return nil
}

// PeerPeerNotifySettings <--
//   - TL_peerPeerNotifySettings
type PeerPeerNotifySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string                      `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor               `protobuf:"varint,2,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	PeerType      int32                       `protobuf:"varint,3,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId        int64                       `protobuf:"varint,4,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Settings      *mtproto.PeerNotifySettings `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *PeerPeerNotifySettings) Reset() {
	*x = PeerPeerNotifySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerPeerNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerPeerNotifySettings) ProtoMessage() {}

func (x *PeerPeerNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerPeerNotifySettings.ProtoReflect.Descriptor instead.
func (*PeerPeerNotifySettings) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{2}
}

func (x *PeerPeerNotifySettings) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *PeerPeerNotifySettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *PeerPeerNotifySettings) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *PeerPeerNotifySettings) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *PeerPeerNotifySettings) GetSettings() *mtproto.PeerNotifySettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type TLPeerPeerNotifySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *PeerPeerNotifySettings `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLPeerPeerNotifySettings) Reset() {
	*x = TLPeerPeerNotifySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLPeerPeerNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLPeerPeerNotifySettings) ProtoMessage() {}

func (x *TLPeerPeerNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLPeerPeerNotifySettings.ProtoReflect.Descriptor instead.
func (*TLPeerPeerNotifySettings) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{3}
}

func (x *TLPeerPeerNotifySettings) GetData2() *PeerPeerNotifySettings {
	if x != nil {
		return x.Data2
	}
	return nil
}

// UserImportedContacts <--
//   - TL_userImportedContacts
type UserImportedContacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName  string                     `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor    TLConstructor              `protobuf:"varint,2,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Imported       []*mtproto.ImportedContact `protobuf:"bytes,3,rep,name=imported,proto3" json:"imported,omitempty"`
	PopularInvites []*mtproto.PopularContact  `protobuf:"bytes,4,rep,name=popular_invites,json=popularInvites,proto3" json:"popular_invites,omitempty"`
	RetryContacts  []int64                    `protobuf:"varint,5,rep,packed,name=retry_contacts,json=retryContacts,proto3" json:"retry_contacts,omitempty"`
	Users          []*mtproto.User            `protobuf:"bytes,6,rep,name=users,proto3" json:"users,omitempty"`
	UpdateIdList   []int64                    `protobuf:"varint,7,rep,packed,name=update_id_list,json=updateIdList,proto3" json:"update_id_list,omitempty"`
}

func (x *UserImportedContacts) Reset() {
	*x = UserImportedContacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserImportedContacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserImportedContacts) ProtoMessage() {}

func (x *UserImportedContacts) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserImportedContacts.ProtoReflect.Descriptor instead.
func (*UserImportedContacts) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{4}
}

func (x *UserImportedContacts) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *UserImportedContacts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *UserImportedContacts) GetImported() []*mtproto.ImportedContact {
	if x != nil {
		return x.Imported
	}
	return nil
}

func (x *UserImportedContacts) GetPopularInvites() []*mtproto.PopularContact {
	if x != nil {
		return x.PopularInvites
	}
	return nil
}

func (x *UserImportedContacts) GetRetryContacts() []int64 {
	if x != nil {
		return x.RetryContacts
	}
	return nil
}

func (x *UserImportedContacts) GetUsers() []*mtproto.User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *UserImportedContacts) GetUpdateIdList() []int64 {
	if x != nil {
		return x.UpdateIdList
	}
	return nil
}

type TLUserImportedContacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *UserImportedContacts `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLUserImportedContacts) Reset() {
	*x = TLUserImportedContacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserImportedContacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserImportedContacts) ProtoMessage() {}

func (x *TLUserImportedContacts) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserImportedContacts.ProtoReflect.Descriptor instead.
func (*TLUserImportedContacts) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{5}
}

func (x *TLUserImportedContacts) GetData2() *UserImportedContacts {
	if x != nil {
		return x.Data2
	}
	return nil
}

// UsersFound <--
//   - TL_usersDataFound
//   - TL_usersIdFound
type UsersFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string              `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor       `protobuf:"varint,2,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Count         int32               `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
	Users         []*mtproto.UserData `protobuf:"bytes,4,rep,name=users,proto3" json:"users,omitempty"`
	NextOffset    string              `protobuf:"bytes,5,opt,name=next_offset,json=nextOffset,proto3" json:"next_offset,omitempty"`
	IdList        []int64             `protobuf:"varint,6,rep,packed,name=id_list,json=idList,proto3" json:"id_list,omitempty"`
}

func (x *UsersFound) Reset() {
	*x = UsersFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersFound) ProtoMessage() {}

func (x *UsersFound) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersFound.ProtoReflect.Descriptor instead.
func (*UsersFound) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{6}
}

func (x *UsersFound) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *UsersFound) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *UsersFound) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *UsersFound) GetUsers() []*mtproto.UserData {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *UsersFound) GetNextOffset() string {
	if x != nil {
		return x.NextOffset
	}
	return ""
}

func (x *UsersFound) GetIdList() []int64 {
	if x != nil {
		return x.IdList
	}
	return nil
}

type TLUsersDataFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *UsersFound `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLUsersDataFound) Reset() {
	*x = TLUsersDataFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsersDataFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsersDataFound) ProtoMessage() {}

func (x *TLUsersDataFound) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsersDataFound.ProtoReflect.Descriptor instead.
func (*TLUsersDataFound) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{7}
}

func (x *TLUsersDataFound) GetData2() *UsersFound {
	if x != nil {
		return x.Data2
	}
	return nil
}

type TLUsersIdFound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *UsersFound `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLUsersIdFound) Reset() {
	*x = TLUsersIdFound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsersIdFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsersIdFound) ProtoMessage() {}

func (x *TLUsersIdFound) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsersIdFound.ProtoReflect.Descriptor instead.
func (*TLUsersIdFound) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{8}
}

func (x *TLUsersIdFound) GetData2() *UsersFound {
	if x != nil {
		return x.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserGetLastSeens struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id          []int64       `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *TLUserGetLastSeens) Reset() {
	*x = TLUserGetLastSeens{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetLastSeens) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetLastSeens) ProtoMessage() {}

func (x *TLUserGetLastSeens) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetLastSeens.ProtoReflect.Descriptor instead.
func (*TLUserGetLastSeens) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{9}
}

func (x *TLUserGetLastSeens) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetLastSeens) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserUpdateLastSeen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id          int64         `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	LastSeenAt  int64         `protobuf:"varint,4,opt,name=last_seen_at,json=lastSeenAt,proto3" json:"last_seen_at,omitempty"`
	Expires     int32         `protobuf:"varint,5,opt,name=expires,proto3" json:"expires,omitempty"`
}

func (x *TLUserUpdateLastSeen) Reset() {
	*x = TLUserUpdateLastSeen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserUpdateLastSeen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserUpdateLastSeen) ProtoMessage() {}

func (x *TLUserUpdateLastSeen) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserUpdateLastSeen.ProtoReflect.Descriptor instead.
func (*TLUserUpdateLastSeen) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{10}
}

func (x *TLUserUpdateLastSeen) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserUpdateLastSeen) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLUserUpdateLastSeen) GetLastSeenAt() int64 {
	if x != nil {
		return x.LastSeenAt
	}
	return 0
}

func (x *TLUserUpdateLastSeen) GetExpires() int32 {
	if x != nil {
		return x.Expires
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetLastSeen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id          int64         `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TLUserGetLastSeen) Reset() {
	*x = TLUserGetLastSeen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetLastSeen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetLastSeen) ProtoMessage() {}

func (x *TLUserGetLastSeen) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetLastSeen.ProtoReflect.Descriptor instead.
func (*TLUserGetLastSeen) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{11}
}

func (x *TLUserGetLastSeen) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetLastSeen) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetImmutableUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id          int64         `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Privacy     bool          `protobuf:"varint,4,opt,name=privacy,proto3" json:"privacy,omitempty"`
	Contacts    []int64       `protobuf:"varint,5,rep,packed,name=contacts,proto3" json:"contacts,omitempty"`
}

func (x *TLUserGetImmutableUser) Reset() {
	*x = TLUserGetImmutableUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetImmutableUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetImmutableUser) ProtoMessage() {}

func (x *TLUserGetImmutableUser) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetImmutableUser.ProtoReflect.Descriptor instead.
func (*TLUserGetImmutableUser) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{12}
}

func (x *TLUserGetImmutableUser) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetImmutableUser) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLUserGetImmutableUser) GetPrivacy() bool {
	if x != nil {
		return x.Privacy
	}
	return false
}

func (x *TLUserGetImmutableUser) GetContacts() []int64 {
	if x != nil {
		return x.Contacts
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserGetMutableUsers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id          []int64       `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
	To          []int64       `protobuf:"varint,4,rep,packed,name=to,proto3" json:"to,omitempty"`
}

func (x *TLUserGetMutableUsers) Reset() {
	*x = TLUserGetMutableUsers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetMutableUsers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetMutableUsers) ProtoMessage() {}

func (x *TLUserGetMutableUsers) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetMutableUsers.ProtoReflect.Descriptor instead.
func (*TLUserGetMutableUsers) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{13}
}

func (x *TLUserGetMutableUsers) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetMutableUsers) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLUserGetMutableUsers) GetTo() []int64 {
	if x != nil {
		return x.To
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserGetImmutableUserByPhone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Phone       string        `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *TLUserGetImmutableUserByPhone) Reset() {
	*x = TLUserGetImmutableUserByPhone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetImmutableUserByPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetImmutableUserByPhone) ProtoMessage() {}

func (x *TLUserGetImmutableUserByPhone) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetImmutableUserByPhone.ProtoReflect.Descriptor instead.
func (*TLUserGetImmutableUserByPhone) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{14}
}

func (x *TLUserGetImmutableUserByPhone) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetImmutableUserByPhone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUserGetImmutableUserByToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Token       string        `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *TLUserGetImmutableUserByToken) Reset() {
	*x = TLUserGetImmutableUserByToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetImmutableUserByToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetImmutableUserByToken) ProtoMessage() {}

func (x *TLUserGetImmutableUserByToken) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetImmutableUserByToken.ProtoReflect.Descriptor instead.
func (*TLUserGetImmutableUserByToken) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{15}
}

func (x *TLUserGetImmutableUserByToken) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetImmutableUserByToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUserSetAccountDaysTTL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ttl         int32         `protobuf:"varint,4,opt,name=ttl,proto3" json:"ttl,omitempty"`
}

func (x *TLUserSetAccountDaysTTL) Reset() {
	*x = TLUserSetAccountDaysTTL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserSetAccountDaysTTL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserSetAccountDaysTTL) ProtoMessage() {}

func (x *TLUserSetAccountDaysTTL) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserSetAccountDaysTTL.ProtoReflect.Descriptor instead.
func (*TLUserSetAccountDaysTTL) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{16}
}

func (x *TLUserSetAccountDaysTTL) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserSetAccountDaysTTL) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserSetAccountDaysTTL) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetAccountDaysTTL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLUserGetAccountDaysTTL) Reset() {
	*x = TLUserGetAccountDaysTTL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetAccountDaysTTL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetAccountDaysTTL) ProtoMessage() {}

func (x *TLUserGetAccountDaysTTL) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetAccountDaysTTL.ProtoReflect.Descriptor instead.
func (*TLUserGetAccountDaysTTL) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{17}
}

func (x *TLUserGetAccountDaysTTL) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetAccountDaysTTL) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetNotifySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLUserGetNotifySettings) Reset() {
	*x = TLUserGetNotifySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetNotifySettings) ProtoMessage() {}

func (x *TLUserGetNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetNotifySettings.ProtoReflect.Descriptor instead.
func (*TLUserGetNotifySettings) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{18}
}

func (x *TLUserGetNotifySettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetNotifySettings) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserGetNotifySettings) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLUserGetNotifySettings) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetNotifySettingsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64               `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Peers       []*mtproto.PeerUtil `protobuf:"bytes,4,rep,name=peers,proto3" json:"peers,omitempty"`
}

func (x *TLUserGetNotifySettingsList) Reset() {
	*x = TLUserGetNotifySettingsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetNotifySettingsList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetNotifySettingsList) ProtoMessage() {}

func (x *TLUserGetNotifySettingsList) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetNotifySettingsList.ProtoReflect.Descriptor instead.
func (*TLUserGetNotifySettingsList) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{19}
}

func (x *TLUserGetNotifySettingsList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetNotifySettingsList) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserGetNotifySettingsList) GetPeers() []*mtproto.PeerUtil {
	if x != nil {
		return x.Peers
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserSetNotifySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor               `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64                       `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32                       `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64                       `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Settings    *mtproto.PeerNotifySettings `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *TLUserSetNotifySettings) Reset() {
	*x = TLUserSetNotifySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserSetNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserSetNotifySettings) ProtoMessage() {}

func (x *TLUserSetNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserSetNotifySettings.ProtoReflect.Descriptor instead.
func (*TLUserSetNotifySettings) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{20}
}

func (x *TLUserSetNotifySettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserSetNotifySettings) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserSetNotifySettings) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLUserSetNotifySettings) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLUserSetNotifySettings) GetSettings() *mtproto.PeerNotifySettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserResetNotifySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLUserResetNotifySettings) Reset() {
	*x = TLUserResetNotifySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserResetNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserResetNotifySettings) ProtoMessage() {}

func (x *TLUserResetNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserResetNotifySettings.ProtoReflect.Descriptor instead.
func (*TLUserResetNotifySettings) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{21}
}

func (x *TLUserResetNotifySettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserResetNotifySettings) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetAllNotifySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLUserGetAllNotifySettings) Reset() {
	*x = TLUserGetAllNotifySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetAllNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetAllNotifySettings) ProtoMessage() {}

func (x *TLUserGetAllNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetAllNotifySettings.ProtoReflect.Descriptor instead.
func (*TLUserGetAllNotifySettings) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{22}
}

func (x *TLUserGetAllNotifySettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetAllNotifySettings) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetGlobalPrivacySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLUserGetGlobalPrivacySettings) Reset() {
	*x = TLUserGetGlobalPrivacySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetGlobalPrivacySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetGlobalPrivacySettings) ProtoMessage() {}

func (x *TLUserGetGlobalPrivacySettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetGlobalPrivacySettings.ProtoReflect.Descriptor instead.
func (*TLUserGetGlobalPrivacySettings) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{23}
}

func (x *TLUserGetGlobalPrivacySettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetGlobalPrivacySettings) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserSetGlobalPrivacySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor                  `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64                          `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Settings    *mtproto.GlobalPrivacySettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *TLUserSetGlobalPrivacySettings) Reset() {
	*x = TLUserSetGlobalPrivacySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserSetGlobalPrivacySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserSetGlobalPrivacySettings) ProtoMessage() {}

func (x *TLUserSetGlobalPrivacySettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserSetGlobalPrivacySettings.ProtoReflect.Descriptor instead.
func (*TLUserSetGlobalPrivacySettings) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{24}
}

func (x *TLUserSetGlobalPrivacySettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserSetGlobalPrivacySettings) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserSetGlobalPrivacySettings) GetSettings() *mtproto.GlobalPrivacySettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserGetPrivacy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyType     int32         `protobuf:"varint,4,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
}

func (x *TLUserGetPrivacy) Reset() {
	*x = TLUserGetPrivacy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetPrivacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetPrivacy) ProtoMessage() {}

func (x *TLUserGetPrivacy) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetPrivacy.ProtoReflect.Descriptor instead.
func (*TLUserGetPrivacy) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{25}
}

func (x *TLUserGetPrivacy) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetPrivacy) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserGetPrivacy) GetKeyType() int32 {
	if x != nil {
		return x.KeyType
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserSetPrivacy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64                  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyType     int32                  `protobuf:"varint,4,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	Rules       []*mtproto.PrivacyRule `protobuf:"bytes,5,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *TLUserSetPrivacy) Reset() {
	*x = TLUserSetPrivacy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserSetPrivacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserSetPrivacy) ProtoMessage() {}

func (x *TLUserSetPrivacy) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserSetPrivacy.ProtoReflect.Descriptor instead.
func (*TLUserSetPrivacy) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{26}
}

func (x *TLUserSetPrivacy) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserSetPrivacy) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserSetPrivacy) GetKeyType() int32 {
	if x != nil {
		return x.KeyType
	}
	return 0
}

func (x *TLUserSetPrivacy) GetRules() []*mtproto.PrivacyRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserCheckPrivacy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	KeyType     int32         `protobuf:"varint,4,opt,name=key_type,json=keyType,proto3" json:"key_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLUserCheckPrivacy) Reset() {
	*x = TLUserCheckPrivacy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserCheckPrivacy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserCheckPrivacy) ProtoMessage() {}

func (x *TLUserCheckPrivacy) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserCheckPrivacy.ProtoReflect.Descriptor instead.
func (*TLUserCheckPrivacy) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{27}
}

func (x *TLUserCheckPrivacy) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserCheckPrivacy) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserCheckPrivacy) GetKeyType() int32 {
	if x != nil {
		return x.KeyType
	}
	return 0
}

func (x *TLUserCheckPrivacy) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserAddPeerSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor         `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64                 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32                 `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64                 `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Settings    *mtproto.PeerSettings `protobuf:"bytes,6,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *TLUserAddPeerSettings) Reset() {
	*x = TLUserAddPeerSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserAddPeerSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserAddPeerSettings) ProtoMessage() {}

func (x *TLUserAddPeerSettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserAddPeerSettings.ProtoReflect.Descriptor instead.
func (*TLUserAddPeerSettings) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{28}
}

func (x *TLUserAddPeerSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserAddPeerSettings) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserAddPeerSettings) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLUserAddPeerSettings) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLUserAddPeerSettings) GetSettings() *mtproto.PeerSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserGetPeerSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLUserGetPeerSettings) Reset() {
	*x = TLUserGetPeerSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetPeerSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetPeerSettings) ProtoMessage() {}

func (x *TLUserGetPeerSettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetPeerSettings.ProtoReflect.Descriptor instead.
func (*TLUserGetPeerSettings) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{29}
}

func (x *TLUserGetPeerSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetPeerSettings) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserGetPeerSettings) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLUserGetPeerSettings) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserDeletePeerSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLUserDeletePeerSettings) Reset() {
	*x = TLUserDeletePeerSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserDeletePeerSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserDeletePeerSettings) ProtoMessage() {}

func (x *TLUserDeletePeerSettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserDeletePeerSettings.ProtoReflect.Descriptor instead.
func (*TLUserDeletePeerSettings) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{30}
}

func (x *TLUserDeletePeerSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserDeletePeerSettings) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserDeletePeerSettings) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLUserDeletePeerSettings) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserChangePhone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Phone       string        `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *TLUserChangePhone) Reset() {
	*x = TLUserChangePhone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserChangePhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserChangePhone) ProtoMessage() {}

func (x *TLUserChangePhone) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserChangePhone.ProtoReflect.Descriptor instead.
func (*TLUserChangePhone) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{31}
}

func (x *TLUserChangePhone) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserChangePhone) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserChangePhone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUserCreateNewUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	SecretKeyId int64         `protobuf:"varint,3,opt,name=secret_key_id,json=secretKeyId,proto3" json:"secret_key_id,omitempty"`
	Phone       string        `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	CountryCode string        `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	FirstName   string        `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName    string        `protobuf:"bytes,7,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (x *TLUserCreateNewUser) Reset() {
	*x = TLUserCreateNewUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserCreateNewUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserCreateNewUser) ProtoMessage() {}

func (x *TLUserCreateNewUser) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserCreateNewUser.ProtoReflect.Descriptor instead.
func (*TLUserCreateNewUser) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{32}
}

func (x *TLUserCreateNewUser) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserCreateNewUser) GetSecretKeyId() int64 {
	if x != nil {
		return x.SecretKeyId
	}
	return 0
}

func (x *TLUserCreateNewUser) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *TLUserCreateNewUser) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *TLUserCreateNewUser) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *TLUserCreateNewUser) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUserDeleteUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Reason      string        `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *TLUserDeleteUser) Reset() {
	*x = TLUserDeleteUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserDeleteUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserDeleteUser) ProtoMessage() {}

func (x *TLUserDeleteUser) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserDeleteUser.ProtoReflect.Descriptor instead.
func (*TLUserDeleteUser) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{33}
}

func (x *TLUserDeleteUser) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserDeleteUser) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserDeleteUser) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUserBlockPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLUserBlockPeer) Reset() {
	*x = TLUserBlockPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserBlockPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserBlockPeer) ProtoMessage() {}

func (x *TLUserBlockPeer) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserBlockPeer.ProtoReflect.Descriptor instead.
func (*TLUserBlockPeer) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{34}
}

func (x *TLUserBlockPeer) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserBlockPeer) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserBlockPeer) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLUserBlockPeer) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserUnBlockPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLUserUnBlockPeer) Reset() {
	*x = TLUserUnBlockPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserUnBlockPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserUnBlockPeer) ProtoMessage() {}

func (x *TLUserUnBlockPeer) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserUnBlockPeer.ProtoReflect.Descriptor instead.
func (*TLUserUnBlockPeer) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{35}
}

func (x *TLUserUnBlockPeer) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserUnBlockPeer) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserUnBlockPeer) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLUserUnBlockPeer) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserBlockedByUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerUserId  int64         `protobuf:"varint,4,opt,name=peer_user_id,json=peerUserId,proto3" json:"peer_user_id,omitempty"`
}

func (x *TLUserBlockedByUser) Reset() {
	*x = TLUserBlockedByUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserBlockedByUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserBlockedByUser) ProtoMessage() {}

func (x *TLUserBlockedByUser) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserBlockedByUser.ProtoReflect.Descriptor instead.
func (*TLUserBlockedByUser) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{36}
}

func (x *TLUserBlockedByUser) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserBlockedByUser) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserBlockedByUser) GetPeerUserId() int64 {
	if x != nil {
		return x.PeerUserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserIsBlockedByUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerUserId  int64         `protobuf:"varint,4,opt,name=peer_user_id,json=peerUserId,proto3" json:"peer_user_id,omitempty"`
}

func (x *TLUserIsBlockedByUser) Reset() {
	*x = TLUserIsBlockedByUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserIsBlockedByUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserIsBlockedByUser) ProtoMessage() {}

func (x *TLUserIsBlockedByUser) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserIsBlockedByUser.ProtoReflect.Descriptor instead.
func (*TLUserIsBlockedByUser) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{37}
}

func (x *TLUserIsBlockedByUser) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserIsBlockedByUser) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserIsBlockedByUser) GetPeerUserId() int64 {
	if x != nil {
		return x.PeerUserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserCheckBlockUserList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id          []int64       `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *TLUserCheckBlockUserList) Reset() {
	*x = TLUserCheckBlockUserList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserCheckBlockUserList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserCheckBlockUserList) ProtoMessage() {}

func (x *TLUserCheckBlockUserList) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserCheckBlockUserList.ProtoReflect.Descriptor instead.
func (*TLUserCheckBlockUserList) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{38}
}

func (x *TLUserCheckBlockUserList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserCheckBlockUserList) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserCheckBlockUserList) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserGetBlockedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Offset      int32         `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int32         `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TLUserGetBlockedList) Reset() {
	*x = TLUserGetBlockedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetBlockedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetBlockedList) ProtoMessage() {}

func (x *TLUserGetBlockedList) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetBlockedList.ProtoReflect.Descriptor instead.
func (*TLUserGetBlockedList) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{39}
}

func (x *TLUserGetBlockedList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetBlockedList) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserGetBlockedList) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TLUserGetBlockedList) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetContactSignUpNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLUserGetContactSignUpNotification) Reset() {
	*x = TLUserGetContactSignUpNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetContactSignUpNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetContactSignUpNotification) ProtoMessage() {}

func (x *TLUserGetContactSignUpNotification) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetContactSignUpNotification.ProtoReflect.Descriptor instead.
func (*TLUserGetContactSignUpNotification) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{40}
}

func (x *TLUserGetContactSignUpNotification) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetContactSignUpNotification) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserSetContactSignUpNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Silent      *mtproto.Bool `protobuf:"bytes,4,opt,name=silent,proto3" json:"silent,omitempty"`
}

func (x *TLUserSetContactSignUpNotification) Reset() {
	*x = TLUserSetContactSignUpNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserSetContactSignUpNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserSetContactSignUpNotification) ProtoMessage() {}

func (x *TLUserSetContactSignUpNotification) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserSetContactSignUpNotification.ProtoReflect.Descriptor instead.
func (*TLUserSetContactSignUpNotification) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{41}
}

func (x *TLUserSetContactSignUpNotification) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserSetContactSignUpNotification) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserSetContactSignUpNotification) GetSilent() *mtproto.Bool {
	if x != nil {
		return x.Silent
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserGetContentSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLUserGetContentSettings) Reset() {
	*x = TLUserGetContentSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetContentSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetContentSettings) ProtoMessage() {}

func (x *TLUserGetContentSettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetContentSettings.ProtoReflect.Descriptor instead.
func (*TLUserGetContentSettings) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{42}
}

func (x *TLUserGetContentSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetContentSettings) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserSetContentSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor      TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId           int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SensitiveEnabled bool          `protobuf:"varint,4,opt,name=sensitive_enabled,json=sensitiveEnabled,proto3" json:"sensitive_enabled,omitempty"`
}

func (x *TLUserSetContentSettings) Reset() {
	*x = TLUserSetContentSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserSetContentSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserSetContentSettings) ProtoMessage() {}

func (x *TLUserSetContentSettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserSetContentSettings.ProtoReflect.Descriptor instead.
func (*TLUserSetContentSettings) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{43}
}

func (x *TLUserSetContentSettings) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserSetContentSettings) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserSetContentSettings) GetSensitiveEnabled() bool {
	if x != nil {
		return x.SensitiveEnabled
	}
	return false
}

// --------------------------------------------------------------------------------------------
type TLUserDeleteContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id          int64         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TLUserDeleteContact) Reset() {
	*x = TLUserDeleteContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserDeleteContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserDeleteContact) ProtoMessage() {}

func (x *TLUserDeleteContact) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserDeleteContact.ProtoReflect.Descriptor instead.
func (*TLUserDeleteContact) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{44}
}

func (x *TLUserDeleteContact) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserDeleteContact) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserDeleteContact) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetContactList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLUserGetContactList) Reset() {
	*x = TLUserGetContactList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetContactList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetContactList) ProtoMessage() {}

func (x *TLUserGetContactList) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetContactList.ProtoReflect.Descriptor instead.
func (*TLUserGetContactList) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{45}
}

func (x *TLUserGetContactList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetContactList) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetContactIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLUserGetContactIdList) Reset() {
	*x = TLUserGetContactIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetContactIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetContactIdList) ProtoMessage() {}

func (x *TLUserGetContactIdList) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetContactIdList.ProtoReflect.Descriptor instead.
func (*TLUserGetContactIdList) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{46}
}

func (x *TLUserGetContactIdList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetContactIdList) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id          int64         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TLUserGetContact) Reset() {
	*x = TLUserGetContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetContact) ProtoMessage() {}

func (x *TLUserGetContact) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetContact.ProtoReflect.Descriptor instead.
func (*TLUserGetContact) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{47}
}

func (x *TLUserGetContact) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetContact) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserGetContact) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserAddContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor              TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId                   int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AddPhonePrivacyException *mtproto.Bool `protobuf:"bytes,4,opt,name=add_phone_privacy_exception,json=addPhonePrivacyException,proto3" json:"add_phone_privacy_exception,omitempty"`
	Id                       int64         `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	FirstName                string        `protobuf:"bytes,6,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName                 string        `protobuf:"bytes,7,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Phone                    string        `protobuf:"bytes,8,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *TLUserAddContact) Reset() {
	*x = TLUserAddContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserAddContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserAddContact) ProtoMessage() {}

func (x *TLUserAddContact) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserAddContact.ProtoReflect.Descriptor instead.
func (*TLUserAddContact) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{48}
}

func (x *TLUserAddContact) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserAddContact) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserAddContact) GetAddPhonePrivacyException() *mtproto.Bool {
	if x != nil {
		return x.AddPhonePrivacyException
	}
	return nil
}

func (x *TLUserAddContact) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLUserAddContact) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *TLUserAddContact) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *TLUserAddContact) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUserCheckContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id          int64         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TLUserCheckContact) Reset() {
	*x = TLUserCheckContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserCheckContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserCheckContact) ProtoMessage() {}

func (x *TLUserCheckContact) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserCheckContact.ProtoReflect.Descriptor instead.
func (*TLUserCheckContact) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{49}
}

func (x *TLUserCheckContact) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserCheckContact) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserCheckContact) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetImportersByPhone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Phone       string        `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *TLUserGetImportersByPhone) Reset() {
	*x = TLUserGetImportersByPhone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetImportersByPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetImportersByPhone) ProtoMessage() {}

func (x *TLUserGetImportersByPhone) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetImportersByPhone.ProtoReflect.Descriptor instead.
func (*TLUserGetImportersByPhone) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{50}
}

func (x *TLUserGetImportersByPhone) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetImportersByPhone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUserDeleteImportersByPhone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Phone       string        `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *TLUserDeleteImportersByPhone) Reset() {
	*x = TLUserDeleteImportersByPhone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserDeleteImportersByPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserDeleteImportersByPhone) ProtoMessage() {}

func (x *TLUserDeleteImportersByPhone) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserDeleteImportersByPhone.ProtoReflect.Descriptor instead.
func (*TLUserDeleteImportersByPhone) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{51}
}

func (x *TLUserDeleteImportersByPhone) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserDeleteImportersByPhone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUserImportContacts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64                   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Contacts    []*mtproto.InputContact `protobuf:"bytes,4,rep,name=contacts,proto3" json:"contacts,omitempty"`
}

func (x *TLUserImportContacts) Reset() {
	*x = TLUserImportContacts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserImportContacts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserImportContacts) ProtoMessage() {}

func (x *TLUserImportContacts) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserImportContacts.ProtoReflect.Descriptor instead.
func (*TLUserImportContacts) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{52}
}

func (x *TLUserImportContacts) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserImportContacts) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserImportContacts) GetContacts() []*mtproto.InputContact {
	if x != nil {
		return x.Contacts
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserGetCountryCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLUserGetCountryCode) Reset() {
	*x = TLUserGetCountryCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetCountryCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetCountryCode) ProtoMessage() {}

func (x *TLUserGetCountryCode) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetCountryCode.ProtoReflect.Descriptor instead.
func (*TLUserGetCountryCode) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{53}
}

func (x *TLUserGetCountryCode) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetCountryCode) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserUpdateAbout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	About       string        `protobuf:"bytes,4,opt,name=about,proto3" json:"about,omitempty"`
}

func (x *TLUserUpdateAbout) Reset() {
	*x = TLUserUpdateAbout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserUpdateAbout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserUpdateAbout) ProtoMessage() {}

func (x *TLUserUpdateAbout) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserUpdateAbout.ProtoReflect.Descriptor instead.
func (*TLUserUpdateAbout) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{54}
}

func (x *TLUserUpdateAbout) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserUpdateAbout) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserUpdateAbout) GetAbout() string {
	if x != nil {
		return x.About
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUserUpdateFirstAndLastName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	FirstName   string        `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName    string        `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
}

func (x *TLUserUpdateFirstAndLastName) Reset() {
	*x = TLUserUpdateFirstAndLastName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserUpdateFirstAndLastName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserUpdateFirstAndLastName) ProtoMessage() {}

func (x *TLUserUpdateFirstAndLastName) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserUpdateFirstAndLastName.ProtoReflect.Descriptor instead.
func (*TLUserUpdateFirstAndLastName) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{55}
}

func (x *TLUserUpdateFirstAndLastName) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserUpdateFirstAndLastName) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserUpdateFirstAndLastName) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *TLUserUpdateFirstAndLastName) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUserUpdateVerified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Verified    *mtproto.Bool `protobuf:"bytes,4,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *TLUserUpdateVerified) Reset() {
	*x = TLUserUpdateVerified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserUpdateVerified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserUpdateVerified) ProtoMessage() {}

func (x *TLUserUpdateVerified) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserUpdateVerified.ProtoReflect.Descriptor instead.
func (*TLUserUpdateVerified) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{56}
}

func (x *TLUserUpdateVerified) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserUpdateVerified) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserUpdateVerified) GetVerified() *mtproto.Bool {
	if x != nil {
		return x.Verified
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserUpdateUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username    string        `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *TLUserUpdateUsername) Reset() {
	*x = TLUserUpdateUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserUpdateUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserUpdateUsername) ProtoMessage() {}

func (x *TLUserUpdateUsername) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserUpdateUsername.ProtoReflect.Descriptor instead.
func (*TLUserUpdateUsername) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{57}
}

func (x *TLUserUpdateUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserUpdateUsername) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserUpdateUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUserUpdateProfilePhoto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id          int64         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TLUserUpdateProfilePhoto) Reset() {
	*x = TLUserUpdateProfilePhoto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserUpdateProfilePhoto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserUpdateProfilePhoto) ProtoMessage() {}

func (x *TLUserUpdateProfilePhoto) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserUpdateProfilePhoto.ProtoReflect.Descriptor instead.
func (*TLUserUpdateProfilePhoto) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{58}
}

func (x *TLUserUpdateProfilePhoto) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserUpdateProfilePhoto) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserUpdateProfilePhoto) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserDeleteProfilePhotos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id          []int64       `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *TLUserDeleteProfilePhotos) Reset() {
	*x = TLUserDeleteProfilePhotos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserDeleteProfilePhotos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserDeleteProfilePhotos) ProtoMessage() {}

func (x *TLUserDeleteProfilePhotos) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserDeleteProfilePhotos.ProtoReflect.Descriptor instead.
func (*TLUserDeleteProfilePhotos) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{59}
}

func (x *TLUserDeleteProfilePhotos) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserDeleteProfilePhotos) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserDeleteProfilePhotos) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserGetProfilePhotos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLUserGetProfilePhotos) Reset() {
	*x = TLUserGetProfilePhotos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetProfilePhotos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetProfilePhotos) ProtoMessage() {}

func (x *TLUserGetProfilePhotos) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetProfilePhotos.ProtoReflect.Descriptor instead.
func (*TLUserGetProfilePhotos) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{60}
}

func (x *TLUserGetProfilePhotos) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetProfilePhotos) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserSetBotCommands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor         `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64                 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BotId       int64                 `protobuf:"varint,4,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	Commands    []*mtproto.BotCommand `protobuf:"bytes,5,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *TLUserSetBotCommands) Reset() {
	*x = TLUserSetBotCommands{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserSetBotCommands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserSetBotCommands) ProtoMessage() {}

func (x *TLUserSetBotCommands) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserSetBotCommands.ProtoReflect.Descriptor instead.
func (*TLUserSetBotCommands) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{61}
}

func (x *TLUserSetBotCommands) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserSetBotCommands) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserSetBotCommands) GetBotId() int64 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *TLUserSetBotCommands) GetCommands() []*mtproto.BotCommand {
	if x != nil {
		return x.Commands
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserIsBot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id          int64         `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TLUserIsBot) Reset() {
	*x = TLUserIsBot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserIsBot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserIsBot) ProtoMessage() {}

func (x *TLUserIsBot) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserIsBot.ProtoReflect.Descriptor instead.
func (*TLUserIsBot) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{62}
}

func (x *TLUserIsBot) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserIsBot) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetBotInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	BotId       int64         `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
}

func (x *TLUserGetBotInfo) Reset() {
	*x = TLUserGetBotInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetBotInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetBotInfo) ProtoMessage() {}

func (x *TLUserGetBotInfo) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetBotInfo.ProtoReflect.Descriptor instead.
func (*TLUserGetBotInfo) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{63}
}

func (x *TLUserGetBotInfo) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetBotInfo) GetBotId() int64 {
	if x != nil {
		return x.BotId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserCheckBots struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id          []int64       `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *TLUserCheckBots) Reset() {
	*x = TLUserCheckBots{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserCheckBots) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserCheckBots) ProtoMessage() {}

func (x *TLUserCheckBots) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserCheckBots.ProtoReflect.Descriptor instead.
func (*TLUserCheckBots) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{64}
}

func (x *TLUserCheckBots) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserCheckBots) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserGetFullUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	SelfUserId  int64         `protobuf:"varint,3,opt,name=self_user_id,json=selfUserId,proto3" json:"self_user_id,omitempty"`
	Id          int64         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TLUserGetFullUser) Reset() {
	*x = TLUserGetFullUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetFullUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetFullUser) ProtoMessage() {}

func (x *TLUserGetFullUser) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetFullUser.ProtoReflect.Descriptor instead.
func (*TLUserGetFullUser) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{65}
}

func (x *TLUserGetFullUser) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetFullUser) GetSelfUserId() int64 {
	if x != nil {
		return x.SelfUserId
	}
	return 0
}

func (x *TLUserGetFullUser) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserUpdateEmojiStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor           TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId                int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	EmojiStatusDocumentId int64         `protobuf:"varint,4,opt,name=emoji_status_document_id,json=emojiStatusDocumentId,proto3" json:"emoji_status_document_id,omitempty"`
	EmojiStatusUntil      int32         `protobuf:"varint,5,opt,name=emoji_status_until,json=emojiStatusUntil,proto3" json:"emoji_status_until,omitempty"`
}

func (x *TLUserUpdateEmojiStatus) Reset() {
	*x = TLUserUpdateEmojiStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserUpdateEmojiStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserUpdateEmojiStatus) ProtoMessage() {}

func (x *TLUserUpdateEmojiStatus) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserUpdateEmojiStatus.ProtoReflect.Descriptor instead.
func (*TLUserUpdateEmojiStatus) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{66}
}

func (x *TLUserUpdateEmojiStatus) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserUpdateEmojiStatus) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserUpdateEmojiStatus) GetEmojiStatusDocumentId() int64 {
	if x != nil {
		return x.EmojiStatusDocumentId
	}
	return 0
}

func (x *TLUserUpdateEmojiStatus) GetEmojiStatusUntil() int32 {
	if x != nil {
		return x.EmojiStatusUntil
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetUserDataById struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLUserGetUserDataById) Reset() {
	*x = TLUserGetUserDataById{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetUserDataById) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetUserDataById) ProtoMessage() {}

func (x *TLUserGetUserDataById) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetUserDataById.ProtoReflect.Descriptor instead.
func (*TLUserGetUserDataById) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{67}
}

func (x *TLUserGetUserDataById) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetUserDataById) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetUserDataListByIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserIdList  []int64       `protobuf:"varint,3,rep,packed,name=user_id_list,json=userIdList,proto3" json:"user_id_list,omitempty"`
}

func (x *TLUserGetUserDataListByIdList) Reset() {
	*x = TLUserGetUserDataListByIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetUserDataListByIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetUserDataListByIdList) ProtoMessage() {}

func (x *TLUserGetUserDataListByIdList) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetUserDataListByIdList.ProtoReflect.Descriptor instead.
func (*TLUserGetUserDataListByIdList) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{68}
}

func (x *TLUserGetUserDataListByIdList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetUserDataListByIdList) GetUserIdList() []int64 {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserGetUserDataByToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Token       string        `protobuf:"bytes,3,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *TLUserGetUserDataByToken) Reset() {
	*x = TLUserGetUserDataByToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetUserDataByToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetUserDataByToken) ProtoMessage() {}

func (x *TLUserGetUserDataByToken) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetUserDataByToken.ProtoReflect.Descriptor instead.
func (*TLUserGetUserDataByToken) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{69}
}

func (x *TLUserGetUserDataByToken) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetUserDataByToken) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUserSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor      TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Q                string        `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	ExcludedContacts []int64       `protobuf:"varint,4,rep,packed,name=excluded_contacts,json=excludedContacts,proto3" json:"excluded_contacts,omitempty"`
	Offset           int64         `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit            int32         `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TLUserSearch) Reset() {
	*x = TLUserSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserSearch) ProtoMessage() {}

func (x *TLUserSearch) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserSearch.ProtoReflect.Descriptor instead.
func (*TLUserSearch) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{70}
}

func (x *TLUserSearch) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserSearch) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TLUserSearch) GetExcludedContacts() []int64 {
	if x != nil {
		return x.ExcludedContacts
	}
	return nil
}

func (x *TLUserSearch) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TLUserSearch) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserUpdateBotData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor          TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	BotId                int64         `protobuf:"varint,3,opt,name=bot_id,json=botId,proto3" json:"bot_id,omitempty"`
	BotChatHistory       *mtproto.Bool `protobuf:"bytes,4,opt,name=bot_chat_history,json=botChatHistory,proto3" json:"bot_chat_history,omitempty"`
	BotNochats           *mtproto.Bool `protobuf:"bytes,5,opt,name=bot_nochats,json=botNochats,proto3" json:"bot_nochats,omitempty"`
	BotInlineGeo         *mtproto.Bool `protobuf:"bytes,6,opt,name=bot_inline_geo,json=botInlineGeo,proto3" json:"bot_inline_geo,omitempty"`
	BotAttachMenu        *mtproto.Bool `protobuf:"bytes,7,opt,name=bot_attach_menu,json=botAttachMenu,proto3" json:"bot_attach_menu,omitempty"`
	BotInlinePlaceholder *mtproto.Bool `protobuf:"bytes,8,opt,name=bot_inline_placeholder,json=botInlinePlaceholder,proto3" json:"bot_inline_placeholder,omitempty"`
}

func (x *TLUserUpdateBotData) Reset() {
	*x = TLUserUpdateBotData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserUpdateBotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserUpdateBotData) ProtoMessage() {}

func (x *TLUserUpdateBotData) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserUpdateBotData.ProtoReflect.Descriptor instead.
func (*TLUserUpdateBotData) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{71}
}

func (x *TLUserUpdateBotData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserUpdateBotData) GetBotId() int64 {
	if x != nil {
		return x.BotId
	}
	return 0
}

func (x *TLUserUpdateBotData) GetBotChatHistory() *mtproto.Bool {
	if x != nil {
		return x.BotChatHistory
	}
	return nil
}

func (x *TLUserUpdateBotData) GetBotNochats() *mtproto.Bool {
	if x != nil {
		return x.BotNochats
	}
	return nil
}

func (x *TLUserUpdateBotData) GetBotInlineGeo() *mtproto.Bool {
	if x != nil {
		return x.BotInlineGeo
	}
	return nil
}

func (x *TLUserUpdateBotData) GetBotAttachMenu() *mtproto.Bool {
	if x != nil {
		return x.BotAttachMenu
	}
	return nil
}

func (x *TLUserUpdateBotData) GetBotInlinePlaceholder() *mtproto.Bool {
	if x != nil {
		return x.BotInlinePlaceholder
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserGetImmutableUserV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id          int64         `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Privacy     bool          `protobuf:"varint,4,opt,name=privacy,proto3" json:"privacy,omitempty"`
	HasTo       bool          `protobuf:"varint,5,opt,name=has_to,json=hasTo,proto3" json:"has_to,omitempty"`
	To          []int64       `protobuf:"varint,6,rep,packed,name=to,proto3" json:"to,omitempty"`
}

func (x *TLUserGetImmutableUserV2) Reset() {
	*x = TLUserGetImmutableUserV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetImmutableUserV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetImmutableUserV2) ProtoMessage() {}

func (x *TLUserGetImmutableUserV2) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetImmutableUserV2.ProtoReflect.Descriptor instead.
func (*TLUserGetImmutableUserV2) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{72}
}

func (x *TLUserGetImmutableUserV2) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetImmutableUserV2) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLUserGetImmutableUserV2) GetPrivacy() bool {
	if x != nil {
		return x.Privacy
	}
	return false
}

func (x *TLUserGetImmutableUserV2) GetHasTo() bool {
	if x != nil {
		return x.HasTo
	}
	return false
}

func (x *TLUserGetImmutableUserV2) GetTo() []int64 {
	if x != nil {
		return x.To
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserGetMutableUsersV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Id          []int64       `protobuf:"varint,3,rep,packed,name=id,proto3" json:"id,omitempty"`
	Privacy     bool          `protobuf:"varint,4,opt,name=privacy,proto3" json:"privacy,omitempty"`
	HasTo       bool          `protobuf:"varint,5,opt,name=has_to,json=hasTo,proto3" json:"has_to,omitempty"`
	To          []int64       `protobuf:"varint,6,rep,packed,name=to,proto3" json:"to,omitempty"`
}

func (x *TLUserGetMutableUsersV2) Reset() {
	*x = TLUserGetMutableUsersV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetMutableUsersV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetMutableUsersV2) ProtoMessage() {}

func (x *TLUserGetMutableUsersV2) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetMutableUsersV2.ProtoReflect.Descriptor instead.
func (*TLUserGetMutableUsersV2) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{73}
}

func (x *TLUserGetMutableUsersV2) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetMutableUsersV2) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TLUserGetMutableUsersV2) GetPrivacy() bool {
	if x != nil {
		return x.Privacy
	}
	return false
}

func (x *TLUserGetMutableUsersV2) GetHasTo() bool {
	if x != nil {
		return x.HasTo
	}
	return false
}

func (x *TLUserGetMutableUsersV2) GetTo() []int64 {
	if x != nil {
		return x.To
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserCreateNewTestUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	SecretKeyId int64         `protobuf:"varint,3,opt,name=secret_key_id,json=secretKeyId,proto3" json:"secret_key_id,omitempty"`
	MinId       int64         `protobuf:"varint,4,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	MaxId       int64         `protobuf:"varint,5,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
}

func (x *TLUserCreateNewTestUser) Reset() {
	*x = TLUserCreateNewTestUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserCreateNewTestUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserCreateNewTestUser) ProtoMessage() {}

func (x *TLUserCreateNewTestUser) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserCreateNewTestUser.ProtoReflect.Descriptor instead.
func (*TLUserCreateNewTestUser) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{74}
}

func (x *TLUserCreateNewTestUser) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserCreateNewTestUser) GetSecretKeyId() int64 {
	if x != nil {
		return x.SecretKeyId
	}
	return 0
}

func (x *TLUserCreateNewTestUser) GetMinId() int64 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *TLUserCreateNewTestUser) GetMaxId() int64 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserEditCloseFriends struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id          []int64       `protobuf:"varint,4,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *TLUserEditCloseFriends) Reset() {
	*x = TLUserEditCloseFriends{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserEditCloseFriends) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserEditCloseFriends) ProtoMessage() {}

func (x *TLUserEditCloseFriends) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserEditCloseFriends.ProtoReflect.Descriptor instead.
func (*TLUserEditCloseFriends) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{75}
}

func (x *TLUserEditCloseFriends) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserEditCloseFriends) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserEditCloseFriends) GetId() []int64 {
	if x != nil {
		return x.Id
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserSetStoriesMaxId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id          int32         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TLUserSetStoriesMaxId) Reset() {
	*x = TLUserSetStoriesMaxId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserSetStoriesMaxId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserSetStoriesMaxId) ProtoMessage() {}

func (x *TLUserSetStoriesMaxId) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserSetStoriesMaxId.ProtoReflect.Descriptor instead.
func (*TLUserSetStoriesMaxId) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{76}
}

func (x *TLUserSetStoriesMaxId) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserSetStoriesMaxId) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserSetStoriesMaxId) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserSetColor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor       TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId            int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ForProfile        bool          `protobuf:"varint,4,opt,name=for_profile,json=forProfile,proto3" json:"for_profile,omitempty"`
	Color             int32         `protobuf:"varint,5,opt,name=color,proto3" json:"color,omitempty"`
	BackgroundEmojiId int64         `protobuf:"varint,6,opt,name=background_emoji_id,json=backgroundEmojiId,proto3" json:"background_emoji_id,omitempty"`
}

func (x *TLUserSetColor) Reset() {
	*x = TLUserSetColor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserSetColor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserSetColor) ProtoMessage() {}

func (x *TLUserSetColor) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserSetColor.ProtoReflect.Descriptor instead.
func (*TLUserSetColor) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{77}
}

func (x *TLUserSetColor) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserSetColor) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserSetColor) GetForProfile() bool {
	if x != nil {
		return x.ForProfile
	}
	return false
}

func (x *TLUserSetColor) GetColor() int32 {
	if x != nil {
		return x.Color
	}
	return 0
}

func (x *TLUserSetColor) GetBackgroundEmojiId() int64 {
	if x != nil {
		return x.BackgroundEmojiId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserUpdateBirthday struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor     `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64             `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Birthday    *mtproto.Birthday `protobuf:"bytes,4,opt,name=birthday,proto3" json:"birthday,omitempty"`
}

func (x *TLUserUpdateBirthday) Reset() {
	*x = TLUserUpdateBirthday{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserUpdateBirthday) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserUpdateBirthday) ProtoMessage() {}

func (x *TLUserUpdateBirthday) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserUpdateBirthday.ProtoReflect.Descriptor instead.
func (*TLUserUpdateBirthday) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{78}
}

func (x *TLUserUpdateBirthday) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserUpdateBirthday) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserUpdateBirthday) GetBirthday() *mtproto.Birthday {
	if x != nil {
		return x.Birthday
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserGetBirthdays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLUserGetBirthdays) Reset() {
	*x = TLUserGetBirthdays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetBirthdays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetBirthdays) ProtoMessage() {}

func (x *TLUserGetBirthdays) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetBirthdays.ProtoReflect.Descriptor instead.
func (*TLUserGetBirthdays) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{79}
}

func (x *TLUserGetBirthdays) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetBirthdays) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserSetStoriesHidden struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id          int64         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
	Hidden      *mtproto.Bool `protobuf:"bytes,5,opt,name=hidden,proto3" json:"hidden,omitempty"`
}

func (x *TLUserSetStoriesHidden) Reset() {
	*x = TLUserSetStoriesHidden{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserSetStoriesHidden) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserSetStoriesHidden) ProtoMessage() {}

func (x *TLUserSetStoriesHidden) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserSetStoriesHidden.ProtoReflect.Descriptor instead.
func (*TLUserSetStoriesHidden) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{80}
}

func (x *TLUserSetStoriesHidden) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserSetStoriesHidden) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserSetStoriesHidden) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLUserSetStoriesHidden) GetHidden() *mtproto.Bool {
	if x != nil {
		return x.Hidden
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUserUpdatePersonalChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId   int64         `protobuf:"varint,4,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *TLUserUpdatePersonalChannel) Reset() {
	*x = TLUserUpdatePersonalChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserUpdatePersonalChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserUpdatePersonalChannel) ProtoMessage() {}

func (x *TLUserUpdatePersonalChannel) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserUpdatePersonalChannel.ProtoReflect.Descriptor instead.
func (*TLUserUpdatePersonalChannel) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{81}
}

func (x *TLUserUpdatePersonalChannel) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserUpdatePersonalChannel) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUserUpdatePersonalChannel) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUserGetUserIdByPhone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=user.TLConstructor" json:"constructor,omitempty"`
	Phone       string        `protobuf:"bytes,3,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *TLUserGetUserIdByPhone) Reset() {
	*x = TLUserGetUserIdByPhone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUserGetUserIdByPhone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUserGetUserIdByPhone) ProtoMessage() {}

func (x *TLUserGetUserIdByPhone) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUserGetUserIdByPhone.ProtoReflect.Descriptor instead.
func (*TLUserGetUserIdByPhone) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{82}
}

func (x *TLUserGetUserIdByPhone) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUserGetUserIdByPhone) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

// --------------------------------------------------------------------------------------------
// Vector api result type
type Vector_LastSeenData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*LastSeenData `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_LastSeenData) Reset() {
	*x = Vector_LastSeenData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_LastSeenData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_LastSeenData) ProtoMessage() {}

func (x *Vector_LastSeenData) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_LastSeenData.ProtoReflect.Descriptor instead.
func (*Vector_LastSeenData) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{83}
}

func (x *Vector_LastSeenData) GetDatas() []*LastSeenData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_ImmutableUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*mtproto.ImmutableUser `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_ImmutableUser) Reset() {
	*x = Vector_ImmutableUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_ImmutableUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_ImmutableUser) ProtoMessage() {}

func (x *Vector_ImmutableUser) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_ImmutableUser.ProtoReflect.Descriptor instead.
func (*Vector_ImmutableUser) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{84}
}

func (x *Vector_ImmutableUser) GetDatas() []*mtproto.ImmutableUser {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_PeerPeerNotifySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*PeerPeerNotifySettings `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_PeerPeerNotifySettings) Reset() {
	*x = Vector_PeerPeerNotifySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_PeerPeerNotifySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_PeerPeerNotifySettings) ProtoMessage() {}

func (x *Vector_PeerPeerNotifySettings) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_PeerPeerNotifySettings.ProtoReflect.Descriptor instead.
func (*Vector_PeerPeerNotifySettings) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{85}
}

func (x *Vector_PeerPeerNotifySettings) GetDatas() []*PeerPeerNotifySettings {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_PrivacyRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*mtproto.PrivacyRule `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_PrivacyRule) Reset() {
	*x = Vector_PrivacyRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_PrivacyRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_PrivacyRule) ProtoMessage() {}

func (x *Vector_PrivacyRule) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_PrivacyRule.ProtoReflect.Descriptor instead.
func (*Vector_PrivacyRule) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{86}
}

func (x *Vector_PrivacyRule) GetDatas() []*mtproto.PrivacyRule {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_Long struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []int64 `protobuf:"varint,1,rep,packed,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_Long) Reset() {
	*x = Vector_Long{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_Long) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_Long) ProtoMessage() {}

func (x *Vector_Long) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_Long.ProtoReflect.Descriptor instead.
func (*Vector_Long) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{87}
}

func (x *Vector_Long) GetDatas() []int64 {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_PeerBlocked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*mtproto.PeerBlocked `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_PeerBlocked) Reset() {
	*x = Vector_PeerBlocked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_PeerBlocked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_PeerBlocked) ProtoMessage() {}

func (x *Vector_PeerBlocked) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_PeerBlocked.ProtoReflect.Descriptor instead.
func (*Vector_PeerBlocked) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{88}
}

func (x *Vector_PeerBlocked) GetDatas() []*mtproto.PeerBlocked {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_ContactData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*mtproto.ContactData `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_ContactData) Reset() {
	*x = Vector_ContactData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_ContactData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_ContactData) ProtoMessage() {}

func (x *Vector_ContactData) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_ContactData.ProtoReflect.Descriptor instead.
func (*Vector_ContactData) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{89}
}

func (x *Vector_ContactData) GetDatas() []*mtproto.ContactData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_InputContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*mtproto.InputContact `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_InputContact) Reset() {
	*x = Vector_InputContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_InputContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_InputContact) ProtoMessage() {}

func (x *Vector_InputContact) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_InputContact.ProtoReflect.Descriptor instead.
func (*Vector_InputContact) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{90}
}

func (x *Vector_InputContact) GetDatas() []*mtproto.InputContact {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_UserData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*mtproto.UserData `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_UserData) Reset() {
	*x = Vector_UserData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_UserData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_UserData) ProtoMessage() {}

func (x *Vector_UserData) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_UserData.ProtoReflect.Descriptor instead.
func (*Vector_UserData) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{91}
}

func (x *Vector_UserData) GetDatas() []*mtproto.UserData {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_ContactBirthday struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*mtproto.ContactBirthday `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_ContactBirthday) Reset() {
	*x = Vector_ContactBirthday{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_tl_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_ContactBirthday) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_ContactBirthday) ProtoMessage() {}

func (x *Vector_ContactBirthday) ProtoReflect() protoreflect.Message {
	mi := &file_user_tl_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_ContactBirthday.ProtoReflect.Descriptor instead.
func (*Vector_ContactBirthday) Descriptor() ([]byte, []int) {
	return file_user_tl_proto_rawDescGZIP(), []int{92}
}

func (x *Vector_ContactBirthday) GetDatas() []*mtproto.ContactBirthday {
	if x != nil {
		return x.Datas
	}
	return nil
}

var File_user_tl_proto protoreflect.FileDescriptor

var file_user_tl_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x74, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc1, 0x01, 0x0a, 0x0c, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x0f, 0x54, 0x4c, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x32, 0x22, 0xe5, 0x01, 0x0a, 0x16, 0x50, 0x65, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x4f, 0x0a, 0x19, 0x54,
	0x4c, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0xde, 0x02, 0x0a,
	0x14, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x08, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x08, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x0f, 0x70, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x0e, 0x70, 0x6f, 0x70,
	0x75, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52,
	0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4b, 0x0a,
	0x17, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0xe3, 0x01, 0x0a, 0x0a, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x3b, 0x0a, 0x11, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0x39, 0x0a,
	0x0f, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x49, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x26, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0x5d, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x73,
	0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65,
	0x65, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x41, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x13, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x97, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x67, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x22, 0x70, 0x0a,
	0x17, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6f, 0x22,
	0x6e, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22,
	0x6e, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x7d, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x73, 0x54, 0x54, 0x4c, 0x12, 0x35, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x74, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x22, 0x6b,
	0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x73, 0x54, 0x54, 0x4c, 0x12, 0x35, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa1, 0x01, 0x0a, 0x19,
	0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x98, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x55,
	0x74, 0x69, 0x6c, 0x52, 0x05, 0x70, 0x65, 0x65, 0x72, 0x73, 0x22, 0xda, 0x01, 0x0a, 0x19, 0x54,
	0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x6d, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x72, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xae, 0x01, 0x0a, 0x20, 0x54,
	0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x3a, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x7f, 0x0a, 0x12, 0x54,
	0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63,
	0x79, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xab, 0x01, 0x0a,
	0x12, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a,
	0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x54,
	0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x63, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x9f, 0x01, 0x0a,
	0x17, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa2,
	0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x13, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x22, 0xe7, 0x01, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x12, 0x54, 0x4c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x54, 0x4c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x12, 0x35,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x9b, 0x01, 0x0a, 0x13, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x75, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x8b,
	0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x1a,
	0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x16, 0x54,
	0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x76, 0x0a, 0x24, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x24,
	0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x22, 0x6c, 0x0a, 0x1a, 0x54,
	0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x99, 0x01, 0x0a, 0x1a, 0x54, 0x4c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x77, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x35,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x68,
	0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x12, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x94, 0x02, 0x0a, 0x12, 0x54,
	0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x4c, 0x0a, 0x1b, 0x61, 0x64, 0x64, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x18, 0x61, 0x64, 0x64, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x22, 0x76, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6a, 0x0a, 0x1b, 0x54, 0x4c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72,
	0x73, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x6d, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73,
	0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12,
	0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x31, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x73, 0x22, 0x68, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x13,
	0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x62,
	0x6f, 0x75, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x1e, 0x54, 0x4c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x73,
	0x74, 0x41, 0x6e, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x84,
	0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7c, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x7d, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74,
	0x6f, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x6a, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x35,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb0,
	0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64,
	0x12, 0x2f, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x73, 0x22, 0x56, 0x0a, 0x0d, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x42,
	0x6f, 0x74, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x12, 0x54, 0x4c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x5a, 0x0a,
	0x11, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6f,
	0x74, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7e, 0x0a, 0x13, 0x54, 0x4c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x66, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73,
	0x65, 0x6c, 0x66, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x19, 0x54, 0x4c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x6f, 0x6a,
	0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6d, 0x6f, 0x6a, 0x69, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6d,
	0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x22, 0x69,
	0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x1f, 0x54, 0x4c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x69, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xb0, 0x01, 0x0a, 0x0e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x78, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0xff, 0x02, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x10, 0x62,
	0x6f, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0e, 0x62, 0x6f, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x0b, 0x62, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x63, 0x68,
	0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0a, 0x62, 0x6f, 0x74, 0x4e, 0x6f, 0x63,
	0x68, 0x61, 0x74, 0x73, 0x12, 0x33, 0x0a, 0x0e, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x67, 0x65, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0c, 0x62, 0x6f, 0x74,
	0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x47, 0x65, 0x6f, 0x12, 0x35, 0x0a, 0x0f, 0x62, 0x6f, 0x74,
	0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x0d, 0x62, 0x6f, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4d, 0x65, 0x6e, 0x75,
	0x12, 0x43, 0x0a, 0x16, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70,
	0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x14, 0x62, 0x6f, 0x74, 0x49, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x68,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0xa4, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x56, 0x32, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x5f, 0x74, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x68, 0x61, 0x73, 0x54, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x74, 0x6f, 0x22, 0xa3, 0x01, 0x0a,
	0x19, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x56, 0x32, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x68,
	0x61, 0x73, 0x5f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x68, 0x61, 0x73,
	0x54, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x03, 0x28, 0x03, 0x52, 0x02,
	0x74, 0x6f, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6d, 0x69, 0x6e,
	0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x22, 0x7a, 0x0a, 0x18, 0x54, 0x4c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x79, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xc9, 0x01, 0x0a, 0x10, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x13,
	0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x65, 0x6d, 0x6f, 0x6a, 0x69,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x49, 0x64, 0x22, 0x97, 0x01, 0x0a,
	0x16, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42,
	0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x52, 0x08, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x22, 0x66, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x73, 0x12, 0x35,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa1,
	0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x68,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x35, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x3f, 0x0a, 0x13,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x28, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65,
	0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x44, 0x0a,
	0x14, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x22, 0x53, 0x0a, 0x1d, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x50, 0x65,
	0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x50,
	0x65, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x40, 0x0a, 0x12, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2a,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x23, 0x0a, 0x0b, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22,
	0x40, 0x0a, 0x12, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x50, 0x65, 0x65, 0x72, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50,
	0x65, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x73, 0x22, 0x40, 0x0a, 0x12, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x22, 0x42, 0x0a, 0x13, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x3a, 0x0a, 0x0f, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x22, 0x48, 0x0a, 0x16, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x2e, 0x0a,
	0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x2a, 0xb5, 0x18,
	0x0a, 0x0d, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x22, 0x0a, 0x1a, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x10, 0xc0, 0xf7, 0xfd, 0xd6, 0x04, 0x12, 0x1c, 0x0a, 0x14, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xc7,
	0xb7, 0x8f, 0xfd, 0x03, 0x12, 0x1f, 0x0a, 0x12, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x49, 0x64, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xfa, 0xdb, 0x92, 0x86, 0xf8,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x70,
	0x65, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0xa9, 0xff, 0xa8, 0x87, 0x07, 0x12, 0x1f, 0x0a, 0x12, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x10, 0xdf, 0xc3, 0xc6, 0x9d, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x17,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x73, 0x10, 0x81, 0xfc, 0x85, 0xe5, 0x07, 0x12, 0x26, 0x0a,
	0x19, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x10, 0xad, 0xb4, 0x81, 0xea, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x10,
	0xde, 0x91, 0xe7, 0x88, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x1b, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x10, 0xc4, 0xce, 0xa9, 0xbb, 0x03, 0x12,
	0x27, 0x0a, 0x1a, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65,
	0x74, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x10, 0xd7, 0xc7,
	0xec, 0xe9, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2f, 0x0a, 0x22, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0xe4,
	0xdf, 0x8d, 0xce, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2f, 0x0a, 0x22, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10,
	0xf3, 0xa6, 0xf8, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x29, 0x0a, 0x1c, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x73, 0x54, 0x54, 0x4c, 0x10, 0xcc, 0x96, 0xd4, 0x92, 0xfd,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x29, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61,
	0x79, 0x73, 0x54, 0x54, 0x4c, 0x10, 0xe0, 0xfd, 0x90, 0x94, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x24, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x10, 0xe6, 0xee, 0xb0, 0x85, 0x04, 0x12, 0x2d, 0x0a, 0x20, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x10, 0x9c, 0xab, 0x94, 0xa3, 0xfe,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x29, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0xe5, 0xcb, 0xb5, 0xcf, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x25, 0x0a, 0x1e, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x10, 0xf4, 0xba, 0x9e, 0x70, 0x12, 0x27, 0x0a, 0x1f, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0xf5, 0xd0, 0xc9, 0xac, 0x05,
	0x12, 0x2b, 0x0a, 0x23, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x92, 0xe2, 0xdb, 0xbf, 0x07, 0x12, 0x30, 0x0a,
	0x23, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x10, 0xae, 0xa5, 0xd6, 0xe5, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x22, 0x0a, 0x15, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x10, 0xb4, 0xc7, 0x82, 0xea, 0xf9, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x10, 0x8f, 0xdb, 0xd6,
	0xc2, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x17, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x10, 0xaa, 0xbd, 0xb8, 0xab, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a,
	0x1a, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x50,
	0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0xe3, 0xce, 0x88, 0xd7,
	0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x1a, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x10, 0xe7, 0xde, 0x8b, 0x68, 0x12, 0x25, 0x0a, 0x1d, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65,
	0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0xe7, 0xb2, 0xa4, 0xf4, 0x05,
	0x12, 0x23, 0x0a, 0x16, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0xdb, 0xae, 0xe9, 0xfb, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x20, 0x0a, 0x18, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65,
	0x72, 0x10, 0x81, 0xb1, 0x80, 0xcf, 0x07, 0x12, 0x1d, 0x0a, 0x15, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x10, 0xc8, 0xb1, 0xfe, 0xf8, 0x07, 0x12, 0x21, 0x0a, 0x14, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x10, 0xb0,
	0xdd, 0x98, 0x88, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a, 0x16, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50,
	0x65, 0x65, 0x72, 0x10, 0x8d, 0xac, 0x9c, 0xf7, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25,
	0x0a, 0x18, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x10, 0x8e, 0x8b, 0x80, 0xdd, 0xfb,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x10, 0xdf, 0xe3, 0xba, 0xe5, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2a,
	0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x10,
	0xf0, 0xe1, 0xf5, 0x9f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x19, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xc8, 0x86, 0xff, 0x9f, 0x02, 0x12, 0x34, 0x0a,
	0x27, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xd6, 0xa7, 0xc7, 0xa6, 0xfe, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x34, 0x0a, 0x27, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e,
	0x55, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xe1,
	0xe6, 0x85, 0xad, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2a, 0x0a, 0x1d, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0x9f, 0xdb, 0x8e, 0xa6, 0xf9,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2a, 0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x10, 0xeb, 0xfc, 0x8f, 0xeb, 0xf9, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x25, 0x0a, 0x18, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x10, 0x99, 0x84,
	0x86, 0xb0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x19, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xe1, 0xa2, 0xaf, 0xba, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01,
	0x12, 0x28, 0x0a, 0x1b, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x10,
	0xbe, 0xb0, 0xf6, 0x8e, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x10, 0xe3, 0x97, 0xca, 0xdb, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1d,
	0x0a, 0x15, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x10, 0x8e, 0xfa, 0x92, 0xce, 0x07, 0x12, 0x24, 0x0a,
	0x17, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x10, 0xa4, 0xb1, 0x9d, 0x95, 0xf8, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x1e, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x42, 0x79,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0x92, 0x84, 0xaa, 0xbd, 0x04, 0x12, 0x29, 0x0a, 0x21, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65,
	0x10, 0xd4, 0xb8, 0xb7, 0xba, 0x01, 0x12, 0x26, 0x0a, 0x19, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x73, 0x10, 0x92, 0xef, 0x83, 0xd0, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21,
	0x0a, 0x19, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x10, 0xb2, 0xd0, 0x81, 0x90,
	0x01, 0x12, 0x23, 0x0a, 0x16, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x10, 0x87, 0xe3, 0x83, 0xd8,
	0xfd, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2e, 0x0a, 0x21, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x41, 0x6e, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0xec, 0x8b, 0x9a, 0xdb,
	0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x19, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x10, 0xe3, 0xd2, 0xa4, 0xa6, 0x02, 0x12, 0x26, 0x0a, 0x19, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0xf1, 0xbc, 0xb4, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xff,
	0x01, 0x12, 0x25, 0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x10, 0x87, 0x9f, 0xd0, 0xdb, 0x03, 0x12, 0x26, 0x0a, 0x1e, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x10, 0x8e, 0xc4, 0x8d, 0xdf, 0x02,
	0x12, 0x28, 0x0a, 0x1b, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x10,
	0xc6, 0x82, 0x9b, 0xe3, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x19, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x10, 0x96, 0xd2, 0xee, 0xa9, 0x07, 0x12, 0x1d, 0x0a,
	0x10, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x42, 0x6f,
	0x74, 0x10, 0xee, 0x8f, 0xcb, 0xbb, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1d, 0x0a, 0x15,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x90, 0xee, 0x98, 0xa3, 0x03, 0x12, 0x1c, 0x0a, 0x14, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42,
	0x6f, 0x74, 0x73, 0x10, 0xc1, 0x81, 0x94, 0x9b, 0x07, 0x12, 0x23, 0x0a, 0x16, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x10, 0xba, 0xc2, 0xc3, 0xe8, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x29,
	0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x10, 0xd8,
	0xf5, 0xa2, 0xc6, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x1a, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x64, 0x10, 0x83, 0xe2, 0xed, 0x1d, 0x12, 0x2f, 0x0a, 0x22,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x10, 0xf9, 0xdf, 0xc7, 0x8c, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a,
	0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x9e,
	0xcb, 0xa5, 0xf8, 0x03, 0x12, 0x19, 0x0a, 0x11, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10, 0xcd, 0xed, 0xd6, 0x81, 0x07, 0x12,
	0x25, 0x0a, 0x18, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x10, 0xee, 0xf3, 0xf4, 0xcf,
	0xfb, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x25, 0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x32, 0x10, 0xcc, 0xf4, 0xaa, 0x80, 0x03, 0x12, 0x29, 0x0a,
	0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x56, 0x32, 0x10, 0xa8, 0x96,
	0xe6, 0xa7, 0xf9, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x24, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77,
	0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x10, 0xab, 0x99, 0xbb, 0xe3, 0x04, 0x12, 0x28,
	0x0a, 0x1b, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x64, 0x69,
	0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x73, 0x10, 0x85, 0xf6,
	0x91, 0xb1, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x1a, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x10, 0xf0, 0xec, 0xd6, 0x97, 0x05, 0x12, 0x1b, 0x0a, 0x13,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x10, 0xf7, 0x9a, 0xe8, 0x97, 0x02, 0x12, 0x21, 0x0a, 0x19, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x10, 0x92, 0xd7, 0xea, 0xc3, 0x05, 0x12, 0x24, 0x0a, 0x17,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x73, 0x10, 0xa6, 0xff, 0xba, 0xf4, 0xff, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x28, 0x0a, 0x1b, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65,
	0x6e, 0x10, 0xd8, 0xb0, 0x98, 0xbe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2d, 0x0a, 0x20,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x10, 0xd0, 0xfd, 0xde, 0xbf, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x28, 0x0a, 0x1b, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x10, 0xc2, 0x87, 0xae, 0xdd, 0xff,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x32, 0xf0, 0x2c, 0x0a, 0x07, 0x52, 0x50, 0x43, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x4c, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x53, 0x65, 0x65, 0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65,
	0x6e, 0x73, 0x1a, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12,
	0x44, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61,
	0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x65, 0x65, 0x6e, 0x12, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x1a, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x4c, 0x61, 0x73, 0x74,
	0x53, 0x65, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x15, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x53, 0x0a,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x1a, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x22, 0x00, 0x12, 0x5f, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x25, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x1c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x49,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x25, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x73, 0x54, 0x54, 0x4c, 0x12, 0x1f,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x73, 0x54, 0x54, 0x4c, 0x1a,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x54, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x73, 0x54, 0x54, 0x4c, 0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79, 0x73, 0x54, 0x54, 0x4c, 0x1a, 0x17, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x61, 0x79,
	0x73, 0x54, 0x54, 0x4c, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x1a, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00,
	0x12, 0x68, 0x0a, 0x1a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65,
	0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x5f, 0x50, 0x65, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x16, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x22, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x50, 0x65, 0x65, 0x72, 0x50, 0x65, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x26, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x1e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x1d, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79,
	0x1a, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12,
	0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x11, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x12,
	0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x63, 0x79, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x14,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74,
	0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1d, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x50,
	0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x15, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x3e, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x4b, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65,
	0x77, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12,
	0x3c, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x12,
	0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x75, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x12, 0x19, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x6e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x65, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x12, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x50, 0x65, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x21, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x21, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67,
	0x6e, 0x55, 0x70, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x17,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54,
	0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x20, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x12, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x1b, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x1a, 0x0d,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x18, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12,
	0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x65, 0x74, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x1a, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x00, 0x12,
	0x54, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x24,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x73, 0x42, 0x79, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x1a, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0x0f, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00,
	0x12, 0x3e, 0x0a, 0x10, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x62, 0x6f, 0x75, 0x74, 0x12, 0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x62, 0x6f, 0x75, 0x74, 0x1a,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x54, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x72, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x4c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1c, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x13,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x1a,
	0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x21, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73,
	0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x1e, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x11, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54,
	0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x73, 0x42, 0x6f, 0x74, 0x12, 0x13, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x73, 0x42, 0x6f, 0x74, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x18, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74,
	0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0e, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x6f, 0x74, 0x73, 0x12, 0x17, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x42, 0x6f, 0x74, 0x73, 0x1a, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4c, 0x6f, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x10, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x19, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67,
	0x65, 0x74, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x46,
	0x75, 0x6c, 0x6c, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x6f, 0x6a, 0x69, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5e, 0x0a,
	0x1c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x50, 0x0a,
	0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x42, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x11, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x14,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x1a, 0x10, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x17,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x32, 0x12, 0x20, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54,
	0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x56, 0x32, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x4d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x56, 0x32, 0x12, 0x1f, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74,
	0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x56, 0x32, 0x1a, 0x15,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1f, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x54, 0x65, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6d, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x15,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x72,
	0x69, 0x65, 0x6e, 0x64, 0x73, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x14, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x1d,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x74, 0x53, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x49, 0x64, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x38,
	0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12,
	0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12,
	0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x1a, 0x0d, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x4f,
	0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x79, 0x73, 0x12, 0x1a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x73, 0x1a,
	0x1c, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x22, 0x00, 0x12,
	0x48, 0x0a, 0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e,
	0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x48, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x1a, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54,
	0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x1a, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x15, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x54, 0x4c,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x42,
	0x79, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x00, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2f,
	0x74, 0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x61, 0x70, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x62, 0x69, 0x7a, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_user_tl_proto_rawDescOnce sync.Once
	file_user_tl_proto_rawDescData = file_user_tl_proto_rawDesc
)

func file_user_tl_proto_rawDescGZIP() []byte {
	file_user_tl_proto_rawDescOnce.Do(func() {
		file_user_tl_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_tl_proto_rawDescData)
	})
	return file_user_tl_proto_rawDescData
}

var file_user_tl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_user_tl_proto_msgTypes = make([]protoimpl.MessageInfo, 93)
var file_user_tl_proto_goTypes = []any{
	(TLConstructor)(0),                         // 0: user.TLConstructor
	(*LastSeenData)(nil),                       // 1: user.LastSeenData
	(*TLLastSeenData)(nil),                     // 2: user.TL_lastSeenData
	(*PeerPeerNotifySettings)(nil),             // 3: user.PeerPeerNotifySettings
	(*TLPeerPeerNotifySettings)(nil),           // 4: user.TL_peerPeerNotifySettings
	(*UserImportedContacts)(nil),               // 5: user.UserImportedContacts
	(*TLUserImportedContacts)(nil),             // 6: user.TL_userImportedContacts
	(*UsersFound)(nil),                         // 7: user.UsersFound
	(*TLUsersDataFound)(nil),                   // 8: user.TL_usersDataFound
	(*TLUsersIdFound)(nil),                     // 9: user.TL_usersIdFound
	(*TLUserGetLastSeens)(nil),                 // 10: user.TL_user_getLastSeens
	(*TLUserUpdateLastSeen)(nil),               // 11: user.TL_user_updateLastSeen
	(*TLUserGetLastSeen)(nil),                  // 12: user.TL_user_getLastSeen
	(*TLUserGetImmutableUser)(nil),             // 13: user.TL_user_getImmutableUser
	(*TLUserGetMutableUsers)(nil),              // 14: user.TL_user_getMutableUsers
	(*TLUserGetImmutableUserByPhone)(nil),      // 15: user.TL_user_getImmutableUserByPhone
	(*TLUserGetImmutableUserByToken)(nil),      // 16: user.TL_user_getImmutableUserByToken
	(*TLUserSetAccountDaysTTL)(nil),            // 17: user.TL_user_setAccountDaysTTL
	(*TLUserGetAccountDaysTTL)(nil),            // 18: user.TL_user_getAccountDaysTTL
	(*TLUserGetNotifySettings)(nil),            // 19: user.TL_user_getNotifySettings
	(*TLUserGetNotifySettingsList)(nil),        // 20: user.TL_user_getNotifySettingsList
	(*TLUserSetNotifySettings)(nil),            // 21: user.TL_user_setNotifySettings
	(*TLUserResetNotifySettings)(nil),          // 22: user.TL_user_resetNotifySettings
	(*TLUserGetAllNotifySettings)(nil),         // 23: user.TL_user_getAllNotifySettings
	(*TLUserGetGlobalPrivacySettings)(nil),     // 24: user.TL_user_getGlobalPrivacySettings
	(*TLUserSetGlobalPrivacySettings)(nil),     // 25: user.TL_user_setGlobalPrivacySettings
	(*TLUserGetPrivacy)(nil),                   // 26: user.TL_user_getPrivacy
	(*TLUserSetPrivacy)(nil),                   // 27: user.TL_user_setPrivacy
	(*TLUserCheckPrivacy)(nil),                 // 28: user.TL_user_checkPrivacy
	(*TLUserAddPeerSettings)(nil),              // 29: user.TL_user_addPeerSettings
	(*TLUserGetPeerSettings)(nil),              // 30: user.TL_user_getPeerSettings
	(*TLUserDeletePeerSettings)(nil),           // 31: user.TL_user_deletePeerSettings
	(*TLUserChangePhone)(nil),                  // 32: user.TL_user_changePhone
	(*TLUserCreateNewUser)(nil),                // 33: user.TL_user_createNewUser
	(*TLUserDeleteUser)(nil),                   // 34: user.TL_user_deleteUser
	(*TLUserBlockPeer)(nil),                    // 35: user.TL_user_blockPeer
	(*TLUserUnBlockPeer)(nil),                  // 36: user.TL_user_unBlockPeer
	(*TLUserBlockedByUser)(nil),                // 37: user.TL_user_blockedByUser
	(*TLUserIsBlockedByUser)(nil),              // 38: user.TL_user_isBlockedByUser
	(*TLUserCheckBlockUserList)(nil),           // 39: user.TL_user_checkBlockUserList
	(*TLUserGetBlockedList)(nil),               // 40: user.TL_user_getBlockedList
	(*TLUserGetContactSignUpNotification)(nil), // 41: user.TL_user_getContactSignUpNotification
	(*TLUserSetContactSignUpNotification)(nil), // 42: user.TL_user_setContactSignUpNotification
	(*TLUserGetContentSettings)(nil),           // 43: user.TL_user_getContentSettings
	(*TLUserSetContentSettings)(nil),           // 44: user.TL_user_setContentSettings
	(*TLUserDeleteContact)(nil),                // 45: user.TL_user_deleteContact
	(*TLUserGetContactList)(nil),               // 46: user.TL_user_getContactList
	(*TLUserGetContactIdList)(nil),             // 47: user.TL_user_getContactIdList
	(*TLUserGetContact)(nil),                   // 48: user.TL_user_getContact
	(*TLUserAddContact)(nil),                   // 49: user.TL_user_addContact
	(*TLUserCheckContact)(nil),                 // 50: user.TL_user_checkContact
	(*TLUserGetImportersByPhone)(nil),          // 51: user.TL_user_getImportersByPhone
	(*TLUserDeleteImportersByPhone)(nil),       // 52: user.TL_user_deleteImportersByPhone
	(*TLUserImportContacts)(nil),               // 53: user.TL_user_importContacts
	(*TLUserGetCountryCode)(nil),               // 54: user.TL_user_getCountryCode
	(*TLUserUpdateAbout)(nil),                  // 55: user.TL_user_updateAbout
	(*TLUserUpdateFirstAndLastName)(nil),       // 56: user.TL_user_updateFirstAndLastName
	(*TLUserUpdateVerified)(nil),               // 57: user.TL_user_updateVerified
	(*TLUserUpdateUsername)(nil),               // 58: user.TL_user_updateUsername
	(*TLUserUpdateProfilePhoto)(nil),           // 59: user.TL_user_updateProfilePhoto
	(*TLUserDeleteProfilePhotos)(nil),          // 60: user.TL_user_deleteProfilePhotos
	(*TLUserGetProfilePhotos)(nil),             // 61: user.TL_user_getProfilePhotos
	(*TLUserSetBotCommands)(nil),               // 62: user.TL_user_setBotCommands
	(*TLUserIsBot)(nil),                        // 63: user.TL_user_isBot
	(*TLUserGetBotInfo)(nil),                   // 64: user.TL_user_getBotInfo
	(*TLUserCheckBots)(nil),                    // 65: user.TL_user_checkBots
	(*TLUserGetFullUser)(nil),                  // 66: user.TL_user_getFullUser
	(*TLUserUpdateEmojiStatus)(nil),            // 67: user.TL_user_updateEmojiStatus
	(*TLUserGetUserDataById)(nil),              // 68: user.TL_user_getUserDataById
	(*TLUserGetUserDataListByIdList)(nil),      // 69: user.TL_user_getUserDataListByIdList
	(*TLUserGetUserDataByToken)(nil),           // 70: user.TL_user_getUserDataByToken
	(*TLUserSearch)(nil),                       // 71: user.TL_user_search
	(*TLUserUpdateBotData)(nil),                // 72: user.TL_user_updateBotData
	(*TLUserGetImmutableUserV2)(nil),           // 73: user.TL_user_getImmutableUserV2
	(*TLUserGetMutableUsersV2)(nil),            // 74: user.TL_user_getMutableUsersV2
	(*TLUserCreateNewTestUser)(nil),            // 75: user.TL_user_createNewTestUser
	(*TLUserEditCloseFriends)(nil),             // 76: user.TL_user_editCloseFriends
	(*TLUserSetStoriesMaxId)(nil),              // 77: user.TL_user_setStoriesMaxId
	(*TLUserSetColor)(nil),                     // 78: user.TL_user_setColor
	(*TLUserUpdateBirthday)(nil),               // 79: user.TL_user_updateBirthday
	(*TLUserGetBirthdays)(nil),                 // 80: user.TL_user_getBirthdays
	(*TLUserSetStoriesHidden)(nil),             // 81: user.TL_user_setStoriesHidden
	(*TLUserUpdatePersonalChannel)(nil),        // 82: user.TL_user_updatePersonalChannel
	(*TLUserGetUserIdByPhone)(nil),             // 83: user.TL_user_getUserIdByPhone
	(*Vector_LastSeenData)(nil),                // 84: user.Vector_LastSeenData
	(*Vector_ImmutableUser)(nil),               // 85: user.Vector_ImmutableUser
	(*Vector_PeerPeerNotifySettings)(nil),      // 86: user.Vector_PeerPeerNotifySettings
	(*Vector_PrivacyRule)(nil),                 // 87: user.Vector_PrivacyRule
	(*Vector_Long)(nil),                        // 88: user.Vector_Long
	(*Vector_PeerBlocked)(nil),                 // 89: user.Vector_PeerBlocked
	(*Vector_ContactData)(nil),                 // 90: user.Vector_ContactData
	(*Vector_InputContact)(nil),                // 91: user.Vector_InputContact
	(*Vector_UserData)(nil),                    // 92: user.Vector_UserData
	(*Vector_ContactBirthday)(nil),             // 93: user.Vector_ContactBirthday
	(*mtproto.PeerNotifySettings)(nil),         // 94: mtproto.PeerNotifySettings
	(*mtproto.ImportedContact)(nil),            // 95: mtproto.ImportedContact
	(*mtproto.PopularContact)(nil),             // 96: mtproto.PopularContact
	(*mtproto.User)(nil),                       // 97: mtproto.User
	(*mtproto.UserData)(nil),                   // 98: mtproto.UserData
	(*mtproto.PeerUtil)(nil),                   // 99: mtproto.PeerUtil
	(*mtproto.GlobalPrivacySettings)(nil),      // 100: mtproto.GlobalPrivacySettings
	(*mtproto.PrivacyRule)(nil),                // 101: mtproto.PrivacyRule
	(*mtproto.PeerSettings)(nil),               // 102: mtproto.PeerSettings
	(*mtproto.Bool)(nil),                       // 103: mtproto.Bool
	(*mtproto.InputContact)(nil),               // 104: mtproto.InputContact
	(*mtproto.BotCommand)(nil),                 // 105: mtproto.BotCommand
	(*mtproto.Birthday)(nil),                   // 106: mtproto.Birthday
	(*mtproto.ImmutableUser)(nil),              // 107: mtproto.ImmutableUser
	(*mtproto.PeerBlocked)(nil),                // 108: mtproto.PeerBlocked
	(*mtproto.ContactData)(nil),                // 109: mtproto.ContactData
	(*mtproto.ContactBirthday)(nil),            // 110: mtproto.ContactBirthday
	(*mtproto.AccountDaysTTL)(nil),             // 111: mtproto.AccountDaysTTL
	(*mtproto.Account_ContentSettings)(nil),    // 112: mtproto.account_ContentSettings
	(*mtproto.String)(nil),                     // 113: mtproto.String
	(*mtproto.Int64)(nil),                      // 114: mtproto.Int64
	(*mtproto.BotInfo)(nil),                    // 115: mtproto.BotInfo
	(*mtproto.Users_UserFull)(nil),             // 116: mtproto.users_UserFull
	(*mtproto.MutableUsers)(nil),               // 117: mtproto.MutableUsers
}
var file_user_tl_proto_depIdxs = []int32{
	0,   // 0: user.LastSeenData.constructor:type_name -> user.TLConstructor
	1,   // 1: user.TL_lastSeenData.data2:type_name -> user.LastSeenData
	0,   // 2: user.PeerPeerNotifySettings.constructor:type_name -> user.TLConstructor
	94,  // 3: user.PeerPeerNotifySettings.settings:type_name -> mtproto.PeerNotifySettings
	3,   // 4: user.TL_peerPeerNotifySettings.data2:type_name -> user.PeerPeerNotifySettings
	0,   // 5: user.UserImportedContacts.constructor:type_name -> user.TLConstructor
	95,  // 6: user.UserImportedContacts.imported:type_name -> mtproto.ImportedContact
	96,  // 7: user.UserImportedContacts.popular_invites:type_name -> mtproto.PopularContact
	97,  // 8: user.UserImportedContacts.users:type_name -> mtproto.User
	5,   // 9: user.TL_userImportedContacts.data2:type_name -> user.UserImportedContacts
	0,   // 10: user.UsersFound.constructor:type_name -> user.TLConstructor
	98,  // 11: user.UsersFound.users:type_name -> mtproto.UserData
	7,   // 12: user.TL_usersDataFound.data2:type_name -> user.UsersFound
	7,   // 13: user.TL_usersIdFound.data2:type_name -> user.UsersFound
	0,   // 14: user.TL_user_getLastSeens.constructor:type_name -> user.TLConstructor
	0,   // 15: user.TL_user_updateLastSeen.constructor:type_name -> user.TLConstructor
	0,   // 16: user.TL_user_getLastSeen.constructor:type_name -> user.TLConstructor
	0,   // 17: user.TL_user_getImmutableUser.constructor:type_name -> user.TLConstructor
	0,   // 18: user.TL_user_getMutableUsers.constructor:type_name -> user.TLConstructor
	0,   // 19: user.TL_user_getImmutableUserByPhone.constructor:type_name -> user.TLConstructor
	0,   // 20: user.TL_user_getImmutableUserByToken.constructor:type_name -> user.TLConstructor
	0,   // 21: user.TL_user_setAccountDaysTTL.constructor:type_name -> user.TLConstructor
	0,   // 22: user.TL_user_getAccountDaysTTL.constructor:type_name -> user.TLConstructor
	0,   // 23: user.TL_user_getNotifySettings.constructor:type_name -> user.TLConstructor
	0,   // 24: user.TL_user_getNotifySettingsList.constructor:type_name -> user.TLConstructor
	99,  // 25: user.TL_user_getNotifySettingsList.peers:type_name -> mtproto.PeerUtil
	0,   // 26: user.TL_user_setNotifySettings.constructor:type_name -> user.TLConstructor
	94,  // 27: user.TL_user_setNotifySettings.settings:type_name -> mtproto.PeerNotifySettings
	0,   // 28: user.TL_user_resetNotifySettings.constructor:type_name -> user.TLConstructor
	0,   // 29: user.TL_user_getAllNotifySettings.constructor:type_name -> user.TLConstructor
	0,   // 30: user.TL_user_getGlobalPrivacySettings.constructor:type_name -> user.TLConstructor
	0,   // 31: user.TL_user_setGlobalPrivacySettings.constructor:type_name -> user.TLConstructor
	100, // 32: user.TL_user_setGlobalPrivacySettings.settings:type_name -> mtproto.GlobalPrivacySettings
	0,   // 33: user.TL_user_getPrivacy.constructor:type_name -> user.TLConstructor
	0,   // 34: user.TL_user_setPrivacy.constructor:type_name -> user.TLConstructor
	101, // 35: user.TL_user_setPrivacy.rules:type_name -> mtproto.PrivacyRule
	0,   // 36: user.TL_user_checkPrivacy.constructor:type_name -> user.TLConstructor
	0,   // 37: user.TL_user_addPeerSettings.constructor:type_name -> user.TLConstructor
	102, // 38: user.TL_user_addPeerSettings.settings:type_name -> mtproto.PeerSettings
	0,   // 39: user.TL_user_getPeerSettings.constructor:type_name -> user.TLConstructor
	0,   // 40: user.TL_user_deletePeerSettings.constructor:type_name -> user.TLConstructor
	0,   // 41: user.TL_user_changePhone.constructor:type_name -> user.TLConstructor
	0,   // 42: user.TL_user_createNewUser.constructor:type_name -> user.TLConstructor
	0,   // 43: user.TL_user_deleteUser.constructor:type_name -> user.TLConstructor
	0,   // 44: user.TL_user_blockPeer.constructor:type_name -> user.TLConstructor
	0,   // 45: user.TL_user_unBlockPeer.constructor:type_name -> user.TLConstructor
	0,   // 46: user.TL_user_blockedByUser.constructor:type_name -> user.TLConstructor
	0,   // 47: user.TL_user_isBlockedByUser.constructor:type_name -> user.TLConstructor
	0,   // 48: user.TL_user_checkBlockUserList.constructor:type_name -> user.TLConstructor
	0,   // 49: user.TL_user_getBlockedList.constructor:type_name -> user.TLConstructor
	0,   // 50: user.TL_user_getContactSignUpNotification.constructor:type_name -> user.TLConstructor
	0,   // 51: user.TL_user_setContactSignUpNotification.constructor:type_name -> user.TLConstructor
	103, // 52: user.TL_user_setContactSignUpNotification.silent:type_name -> mtproto.Bool
	0,   // 53: user.TL_user_getContentSettings.constructor:type_name -> user.TLConstructor
	0,   // 54: user.TL_user_setContentSettings.constructor:type_name -> user.TLConstructor
	0,   // 55: user.TL_user_deleteContact.constructor:type_name -> user.TLConstructor
	0,   // 56: user.TL_user_getContactList.constructor:type_name -> user.TLConstructor
	0,   // 57: user.TL_user_getContactIdList.constructor:type_name -> user.TLConstructor
	0,   // 58: user.TL_user_getContact.constructor:type_name -> user.TLConstructor
	0,   // 59: user.TL_user_addContact.constructor:type_name -> user.TLConstructor
	103, // 60: user.TL_user_addContact.add_phone_privacy_exception:type_name -> mtproto.Bool
	0,   // 61: user.TL_user_checkContact.constructor:type_name -> user.TLConstructor
	0,   // 62: user.TL_user_getImportersByPhone.constructor:type_name -> user.TLConstructor
	0,   // 63: user.TL_user_deleteImportersByPhone.constructor:type_name -> user.TLConstructor
	0,   // 64: user.TL_user_importContacts.constructor:type_name -> user.TLConstructor
	104, // 65: user.TL_user_importContacts.contacts:type_name -> mtproto.InputContact
	0,   // 66: user.TL_user_getCountryCode.constructor:type_name -> user.TLConstructor
	0,   // 67: user.TL_user_updateAbout.constructor:type_name -> user.TLConstructor
	0,   // 68: user.TL_user_updateFirstAndLastName.constructor:type_name -> user.TLConstructor
	0,   // 69: user.TL_user_updateVerified.constructor:type_name -> user.TLConstructor
	103, // 70: user.TL_user_updateVerified.verified:type_name -> mtproto.Bool
	0,   // 71: user.TL_user_updateUsername.constructor:type_name -> user.TLConstructor
	0,   // 72: user.TL_user_updateProfilePhoto.constructor:type_name -> user.TLConstructor
	0,   // 73: user.TL_user_deleteProfilePhotos.constructor:type_name -> user.TLConstructor
	0,   // 74: user.TL_user_getProfilePhotos.constructor:type_name -> user.TLConstructor
	0,   // 75: user.TL_user_setBotCommands.constructor:type_name -> user.TLConstructor
	105, // 76: user.TL_user_setBotCommands.commands:type_name -> mtproto.BotCommand
	0,   // 77: user.TL_user_isBot.constructor:type_name -> user.TLConstructor
	0,   // 78: user.TL_user_getBotInfo.constructor:type_name -> user.TLConstructor
	0,   // 79: user.TL_user_checkBots.constructor:type_name -> user.TLConstructor
	0,   // 80: user.TL_user_getFullUser.constructor:type_name -> user.TLConstructor
	0,   // 81: user.TL_user_updateEmojiStatus.constructor:type_name -> user.TLConstructor
	0,   // 82: user.TL_user_getUserDataById.constructor:type_name -> user.TLConstructor
	0,   // 83: user.TL_user_getUserDataListByIdList.constructor:type_name -> user.TLConstructor
	0,   // 84: user.TL_user_getUserDataByToken.constructor:type_name -> user.TLConstructor
	0,   // 85: user.TL_user_search.constructor:type_name -> user.TLConstructor
	0,   // 86: user.TL_user_updateBotData.constructor:type_name -> user.TLConstructor
	103, // 87: user.TL_user_updateBotData.bot_chat_history:type_name -> mtproto.Bool
	103, // 88: user.TL_user_updateBotData.bot_nochats:type_name -> mtproto.Bool
	103, // 89: user.TL_user_updateBotData.bot_inline_geo:type_name -> mtproto.Bool
	103, // 90: user.TL_user_updateBotData.bot_attach_menu:type_name -> mtproto.Bool
	103, // 91: user.TL_user_updateBotData.bot_inline_placeholder:type_name -> mtproto.Bool
	0,   // 92: user.TL_user_getImmutableUserV2.constructor:type_name -> user.TLConstructor
	0,   // 93: user.TL_user_getMutableUsersV2.constructor:type_name -> user.TLConstructor
	0,   // 94: user.TL_user_createNewTestUser.constructor:type_name -> user.TLConstructor
	0,   // 95: user.TL_user_editCloseFriends.constructor:type_name -> user.TLConstructor
	0,   // 96: user.TL_user_setStoriesMaxId.constructor:type_name -> user.TLConstructor
	0,   // 97: user.TL_user_setColor.constructor:type_name -> user.TLConstructor
	0,   // 98: user.TL_user_updateBirthday.constructor:type_name -> user.TLConstructor
	106, // 99: user.TL_user_updateBirthday.birthday:type_name -> mtproto.Birthday
	0,   // 100: user.TL_user_getBirthdays.constructor:type_name -> user.TLConstructor
	0,   // 101: user.TL_user_setStoriesHidden.constructor:type_name -> user.TLConstructor
	103, // 102: user.TL_user_setStoriesHidden.hidden:type_name -> mtproto.Bool
	0,   // 103: user.TL_user_updatePersonalChannel.constructor:type_name -> user.TLConstructor
	0,   // 104: user.TL_user_getUserIdByPhone.constructor:type_name -> user.TLConstructor
	1,   // 105: user.Vector_LastSeenData.datas:type_name -> user.LastSeenData
	107, // 106: user.Vector_ImmutableUser.datas:type_name -> mtproto.ImmutableUser
	3,   // 107: user.Vector_PeerPeerNotifySettings.datas:type_name -> user.PeerPeerNotifySettings
	101, // 108: user.Vector_PrivacyRule.datas:type_name -> mtproto.PrivacyRule
	108, // 109: user.Vector_PeerBlocked.datas:type_name -> mtproto.PeerBlocked
	109, // 110: user.Vector_ContactData.datas:type_name -> mtproto.ContactData
	104, // 111: user.Vector_InputContact.datas:type_name -> mtproto.InputContact
	98,  // 112: user.Vector_UserData.datas:type_name -> mtproto.UserData
	110, // 113: user.Vector_ContactBirthday.datas:type_name -> mtproto.ContactBirthday
	10,  // 114: user.RPCUser.user_getLastSeens:input_type -> user.TL_user_getLastSeens
	11,  // 115: user.RPCUser.user_updateLastSeen:input_type -> user.TL_user_updateLastSeen
	12,  // 116: user.RPCUser.user_getLastSeen:input_type -> user.TL_user_getLastSeen
	13,  // 117: user.RPCUser.user_getImmutableUser:input_type -> user.TL_user_getImmutableUser
	14,  // 118: user.RPCUser.user_getMutableUsers:input_type -> user.TL_user_getMutableUsers
	15,  // 119: user.RPCUser.user_getImmutableUserByPhone:input_type -> user.TL_user_getImmutableUserByPhone
	16,  // 120: user.RPCUser.user_getImmutableUserByToken:input_type -> user.TL_user_getImmutableUserByToken
	17,  // 121: user.RPCUser.user_setAccountDaysTTL:input_type -> user.TL_user_setAccountDaysTTL
	18,  // 122: user.RPCUser.user_getAccountDaysTTL:input_type -> user.TL_user_getAccountDaysTTL
	19,  // 123: user.RPCUser.user_getNotifySettings:input_type -> user.TL_user_getNotifySettings
	20,  // 124: user.RPCUser.user_getNotifySettingsList:input_type -> user.TL_user_getNotifySettingsList
	21,  // 125: user.RPCUser.user_setNotifySettings:input_type -> user.TL_user_setNotifySettings
	22,  // 126: user.RPCUser.user_resetNotifySettings:input_type -> user.TL_user_resetNotifySettings
	23,  // 127: user.RPCUser.user_getAllNotifySettings:input_type -> user.TL_user_getAllNotifySettings
	24,  // 128: user.RPCUser.user_getGlobalPrivacySettings:input_type -> user.TL_user_getGlobalPrivacySettings
	25,  // 129: user.RPCUser.user_setGlobalPrivacySettings:input_type -> user.TL_user_setGlobalPrivacySettings
	26,  // 130: user.RPCUser.user_getPrivacy:input_type -> user.TL_user_getPrivacy
	27,  // 131: user.RPCUser.user_setPrivacy:input_type -> user.TL_user_setPrivacy
	28,  // 132: user.RPCUser.user_checkPrivacy:input_type -> user.TL_user_checkPrivacy
	29,  // 133: user.RPCUser.user_addPeerSettings:input_type -> user.TL_user_addPeerSettings
	30,  // 134: user.RPCUser.user_getPeerSettings:input_type -> user.TL_user_getPeerSettings
	31,  // 135: user.RPCUser.user_deletePeerSettings:input_type -> user.TL_user_deletePeerSettings
	32,  // 136: user.RPCUser.user_changePhone:input_type -> user.TL_user_changePhone
	33,  // 137: user.RPCUser.user_createNewUser:input_type -> user.TL_user_createNewUser
	34,  // 138: user.RPCUser.user_deleteUser:input_type -> user.TL_user_deleteUser
	35,  // 139: user.RPCUser.user_blockPeer:input_type -> user.TL_user_blockPeer
	36,  // 140: user.RPCUser.user_unBlockPeer:input_type -> user.TL_user_unBlockPeer
	37,  // 141: user.RPCUser.user_blockedByUser:input_type -> user.TL_user_blockedByUser
	38,  // 142: user.RPCUser.user_isBlockedByUser:input_type -> user.TL_user_isBlockedByUser
	39,  // 143: user.RPCUser.user_checkBlockUserList:input_type -> user.TL_user_checkBlockUserList
	40,  // 144: user.RPCUser.user_getBlockedList:input_type -> user.TL_user_getBlockedList
	41,  // 145: user.RPCUser.user_getContactSignUpNotification:input_type -> user.TL_user_getContactSignUpNotification
	42,  // 146: user.RPCUser.user_setContactSignUpNotification:input_type -> user.TL_user_setContactSignUpNotification
	43,  // 147: user.RPCUser.user_getContentSettings:input_type -> user.TL_user_getContentSettings
	44,  // 148: user.RPCUser.user_setContentSettings:input_type -> user.TL_user_setContentSettings
	45,  // 149: user.RPCUser.user_deleteContact:input_type -> user.TL_user_deleteContact
	46,  // 150: user.RPCUser.user_getContactList:input_type -> user.TL_user_getContactList
	47,  // 151: user.RPCUser.user_getContactIdList:input_type -> user.TL_user_getContactIdList
	48,  // 152: user.RPCUser.user_getContact:input_type -> user.TL_user_getContact
	49,  // 153: user.RPCUser.user_addContact:input_type -> user.TL_user_addContact
	50,  // 154: user.RPCUser.user_checkContact:input_type -> user.TL_user_checkContact
	51,  // 155: user.RPCUser.user_getImportersByPhone:input_type -> user.TL_user_getImportersByPhone
	52,  // 156: user.RPCUser.user_deleteImportersByPhone:input_type -> user.TL_user_deleteImportersByPhone
	53,  // 157: user.RPCUser.user_importContacts:input_type -> user.TL_user_importContacts
	54,  // 158: user.RPCUser.user_getCountryCode:input_type -> user.TL_user_getCountryCode
	55,  // 159: user.RPCUser.user_updateAbout:input_type -> user.TL_user_updateAbout
	56,  // 160: user.RPCUser.user_updateFirstAndLastName:input_type -> user.TL_user_updateFirstAndLastName
	57,  // 161: user.RPCUser.user_updateVerified:input_type -> user.TL_user_updateVerified
	58,  // 162: user.RPCUser.user_updateUsername:input_type -> user.TL_user_updateUsername
	59,  // 163: user.RPCUser.user_updateProfilePhoto:input_type -> user.TL_user_updateProfilePhoto
	60,  // 164: user.RPCUser.user_deleteProfilePhotos:input_type -> user.TL_user_deleteProfilePhotos
	61,  // 165: user.RPCUser.user_getProfilePhotos:input_type -> user.TL_user_getProfilePhotos
	62,  // 166: user.RPCUser.user_setBotCommands:input_type -> user.TL_user_setBotCommands
	63,  // 167: user.RPCUser.user_isBot:input_type -> user.TL_user_isBot
	64,  // 168: user.RPCUser.user_getBotInfo:input_type -> user.TL_user_getBotInfo
	65,  // 169: user.RPCUser.user_checkBots:input_type -> user.TL_user_checkBots
	66,  // 170: user.RPCUser.user_getFullUser:input_type -> user.TL_user_getFullUser
	67,  // 171: user.RPCUser.user_updateEmojiStatus:input_type -> user.TL_user_updateEmojiStatus
	68,  // 172: user.RPCUser.user_getUserDataById:input_type -> user.TL_user_getUserDataById
	69,  // 173: user.RPCUser.user_getUserDataListByIdList:input_type -> user.TL_user_getUserDataListByIdList
	70,  // 174: user.RPCUser.user_getUserDataByToken:input_type -> user.TL_user_getUserDataByToken
	71,  // 175: user.RPCUser.user_search:input_type -> user.TL_user_search
	72,  // 176: user.RPCUser.user_updateBotData:input_type -> user.TL_user_updateBotData
	73,  // 177: user.RPCUser.user_getImmutableUserV2:input_type -> user.TL_user_getImmutableUserV2
	74,  // 178: user.RPCUser.user_getMutableUsersV2:input_type -> user.TL_user_getMutableUsersV2
	75,  // 179: user.RPCUser.user_createNewTestUser:input_type -> user.TL_user_createNewTestUser
	76,  // 180: user.RPCUser.user_editCloseFriends:input_type -> user.TL_user_editCloseFriends
	77,  // 181: user.RPCUser.user_setStoriesMaxId:input_type -> user.TL_user_setStoriesMaxId
	78,  // 182: user.RPCUser.user_setColor:input_type -> user.TL_user_setColor
	79,  // 183: user.RPCUser.user_updateBirthday:input_type -> user.TL_user_updateBirthday
	80,  // 184: user.RPCUser.user_getBirthdays:input_type -> user.TL_user_getBirthdays
	81,  // 185: user.RPCUser.user_setStoriesHidden:input_type -> user.TL_user_setStoriesHidden
	82,  // 186: user.RPCUser.user_updatePersonalChannel:input_type -> user.TL_user_updatePersonalChannel
	83,  // 187: user.RPCUser.user_getUserIdByPhone:input_type -> user.TL_user_getUserIdByPhone
	84,  // 188: user.RPCUser.user_getLastSeens:output_type -> user.Vector_LastSeenData
	103, // 189: user.RPCUser.user_updateLastSeen:output_type -> mtproto.Bool
	1,   // 190: user.RPCUser.user_getLastSeen:output_type -> user.LastSeenData
	107, // 191: user.RPCUser.user_getImmutableUser:output_type -> mtproto.ImmutableUser
	85,  // 192: user.RPCUser.user_getMutableUsers:output_type -> user.Vector_ImmutableUser
	107, // 193: user.RPCUser.user_getImmutableUserByPhone:output_type -> mtproto.ImmutableUser
	107, // 194: user.RPCUser.user_getImmutableUserByToken:output_type -> mtproto.ImmutableUser
	103, // 195: user.RPCUser.user_setAccountDaysTTL:output_type -> mtproto.Bool
	111, // 196: user.RPCUser.user_getAccountDaysTTL:output_type -> mtproto.AccountDaysTTL
	94,  // 197: user.RPCUser.user_getNotifySettings:output_type -> mtproto.PeerNotifySettings
	86,  // 198: user.RPCUser.user_getNotifySettingsList:output_type -> user.Vector_PeerPeerNotifySettings
	103, // 199: user.RPCUser.user_setNotifySettings:output_type -> mtproto.Bool
	103, // 200: user.RPCUser.user_resetNotifySettings:output_type -> mtproto.Bool
	86,  // 201: user.RPCUser.user_getAllNotifySettings:output_type -> user.Vector_PeerPeerNotifySettings
	100, // 202: user.RPCUser.user_getGlobalPrivacySettings:output_type -> mtproto.GlobalPrivacySettings
	103, // 203: user.RPCUser.user_setGlobalPrivacySettings:output_type -> mtproto.Bool
	87,  // 204: user.RPCUser.user_getPrivacy:output_type -> user.Vector_PrivacyRule
	103, // 205: user.RPCUser.user_setPrivacy:output_type -> mtproto.Bool
	103, // 206: user.RPCUser.user_checkPrivacy:output_type -> mtproto.Bool
	103, // 207: user.RPCUser.user_addPeerSettings:output_type -> mtproto.Bool
	102, // 208: user.RPCUser.user_getPeerSettings:output_type -> mtproto.PeerSettings
	103, // 209: user.RPCUser.user_deletePeerSettings:output_type -> mtproto.Bool
	103, // 210: user.RPCUser.user_changePhone:output_type -> mtproto.Bool
	107, // 211: user.RPCUser.user_createNewUser:output_type -> mtproto.ImmutableUser
	103, // 212: user.RPCUser.user_deleteUser:output_type -> mtproto.Bool
	103, // 213: user.RPCUser.user_blockPeer:output_type -> mtproto.Bool
	103, // 214: user.RPCUser.user_unBlockPeer:output_type -> mtproto.Bool
	103, // 215: user.RPCUser.user_blockedByUser:output_type -> mtproto.Bool
	103, // 216: user.RPCUser.user_isBlockedByUser:output_type -> mtproto.Bool
	88,  // 217: user.RPCUser.user_checkBlockUserList:output_type -> user.Vector_Long
	89,  // 218: user.RPCUser.user_getBlockedList:output_type -> user.Vector_PeerBlocked
	103, // 219: user.RPCUser.user_getContactSignUpNotification:output_type -> mtproto.Bool
	103, // 220: user.RPCUser.user_setContactSignUpNotification:output_type -> mtproto.Bool
	112, // 221: user.RPCUser.user_getContentSettings:output_type -> mtproto.account_ContentSettings
	103, // 222: user.RPCUser.user_setContentSettings:output_type -> mtproto.Bool
	103, // 223: user.RPCUser.user_deleteContact:output_type -> mtproto.Bool
	90,  // 224: user.RPCUser.user_getContactList:output_type -> user.Vector_ContactData
	88,  // 225: user.RPCUser.user_getContactIdList:output_type -> user.Vector_Long
	109, // 226: user.RPCUser.user_getContact:output_type -> mtproto.ContactData
	103, // 227: user.RPCUser.user_addContact:output_type -> mtproto.Bool
	103, // 228: user.RPCUser.user_checkContact:output_type -> mtproto.Bool
	91,  // 229: user.RPCUser.user_getImportersByPhone:output_type -> user.Vector_InputContact
	103, // 230: user.RPCUser.user_deleteImportersByPhone:output_type -> mtproto.Bool
	5,   // 231: user.RPCUser.user_importContacts:output_type -> user.UserImportedContacts
	113, // 232: user.RPCUser.user_getCountryCode:output_type -> mtproto.String
	103, // 233: user.RPCUser.user_updateAbout:output_type -> mtproto.Bool
	103, // 234: user.RPCUser.user_updateFirstAndLastName:output_type -> mtproto.Bool
	103, // 235: user.RPCUser.user_updateVerified:output_type -> mtproto.Bool
	103, // 236: user.RPCUser.user_updateUsername:output_type -> mtproto.Bool
	114, // 237: user.RPCUser.user_updateProfilePhoto:output_type -> mtproto.Int64
	114, // 238: user.RPCUser.user_deleteProfilePhotos:output_type -> mtproto.Int64
	88,  // 239: user.RPCUser.user_getProfilePhotos:output_type -> user.Vector_Long
	103, // 240: user.RPCUser.user_setBotCommands:output_type -> mtproto.Bool
	103, // 241: user.RPCUser.user_isBot:output_type -> mtproto.Bool
	115, // 242: user.RPCUser.user_getBotInfo:output_type -> mtproto.BotInfo
	88,  // 243: user.RPCUser.user_checkBots:output_type -> user.Vector_Long
	116, // 244: user.RPCUser.user_getFullUser:output_type -> mtproto.users_UserFull
	103, // 245: user.RPCUser.user_updateEmojiStatus:output_type -> mtproto.Bool
	98,  // 246: user.RPCUser.user_getUserDataById:output_type -> mtproto.UserData
	92,  // 247: user.RPCUser.user_getUserDataListByIdList:output_type -> user.Vector_UserData
	98,  // 248: user.RPCUser.user_getUserDataByToken:output_type -> mtproto.UserData
	7,   // 249: user.RPCUser.user_search:output_type -> user.UsersFound
	103, // 250: user.RPCUser.user_updateBotData:output_type -> mtproto.Bool
	107, // 251: user.RPCUser.user_getImmutableUserV2:output_type -> mtproto.ImmutableUser
	117, // 252: user.RPCUser.user_getMutableUsersV2:output_type -> mtproto.MutableUsers
	107, // 253: user.RPCUser.user_createNewTestUser:output_type -> mtproto.ImmutableUser
	103, // 254: user.RPCUser.user_editCloseFriends:output_type -> mtproto.Bool
	103, // 255: user.RPCUser.user_setStoriesMaxId:output_type -> mtproto.Bool
	103, // 256: user.RPCUser.user_setColor:output_type -> mtproto.Bool
	103, // 257: user.RPCUser.user_updateBirthday:output_type -> mtproto.Bool
	93,  // 258: user.RPCUser.user_getBirthdays:output_type -> user.Vector_ContactBirthday
	103, // 259: user.RPCUser.user_setStoriesHidden:output_type -> mtproto.Bool
	103, // 260: user.RPCUser.user_updatePersonalChannel:output_type -> mtproto.Bool
	114, // 261: user.RPCUser.user_getUserIdByPhone:output_type -> mtproto.Int64
	188, // [188:262] is the sub-list for method output_type
	114, // [114:188] is the sub-list for method input_type
	114, // [114:114] is the sub-list for extension type_name
	114, // [114:114] is the sub-list for extension extendee
	0,   // [0:114] is the sub-list for field type_name
}

func init() { file_user_tl_proto_init() }
func file_user_tl_proto_init() {
	if File_user_tl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_user_tl_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*LastSeenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TLLastSeenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*PeerPeerNotifySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TLPeerPeerNotifySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UserImportedContacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserImportedContacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UsersFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TLUsersDataFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*TLUsersIdFound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetLastSeens); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserUpdateLastSeen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetLastSeen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetImmutableUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetMutableUsers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetImmutableUserByPhone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetImmutableUserByToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserSetAccountDaysTTL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetAccountDaysTTL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetNotifySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetNotifySettingsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserSetNotifySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserResetNotifySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetAllNotifySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetGlobalPrivacySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserSetGlobalPrivacySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetPrivacy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserSetPrivacy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserCheckPrivacy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserAddPeerSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetPeerSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserDeletePeerSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserChangePhone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserCreateNewUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserDeleteUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserBlockPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserUnBlockPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserBlockedByUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserIsBlockedByUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserCheckBlockUserList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetBlockedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetContactSignUpNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserSetContactSignUpNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetContentSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserSetContentSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserDeleteContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetContactList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetContactIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserAddContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserCheckContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetImportersByPhone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserDeleteImportersByPhone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserImportContacts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetCountryCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserUpdateAbout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserUpdateFirstAndLastName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserUpdateVerified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserUpdateUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserUpdateProfilePhoto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserDeleteProfilePhotos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetProfilePhotos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserSetBotCommands); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserIsBot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetBotInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserCheckBots); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetFullUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserUpdateEmojiStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetUserDataById); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetUserDataListByIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetUserDataByToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserUpdateBotData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetImmutableUserV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetMutableUsersV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserCreateNewTestUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserEditCloseFriends); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserSetStoriesMaxId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserSetColor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserUpdateBirthday); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetBirthdays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserSetStoriesHidden); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserUpdatePersonalChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*TLUserGetUserIdByPhone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*Vector_LastSeenData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*Vector_ImmutableUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*Vector_PeerPeerNotifySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[86].Exporter = func(v any, i int) any {
			switch v := v.(*Vector_PrivacyRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[87].Exporter = func(v any, i int) any {
			switch v := v.(*Vector_Long); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[88].Exporter = func(v any, i int) any {
			switch v := v.(*Vector_PeerBlocked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[89].Exporter = func(v any, i int) any {
			switch v := v.(*Vector_ContactData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[90].Exporter = func(v any, i int) any {
			switch v := v.(*Vector_InputContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[91].Exporter = func(v any, i int) any {
			switch v := v.(*Vector_UserData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_tl_proto_msgTypes[92].Exporter = func(v any, i int) any {
			switch v := v.(*Vector_ContactBirthday); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_tl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   93,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_tl_proto_goTypes,
		DependencyIndexes: file_user_tl_proto_depIdxs,
		EnumInfos:         file_user_tl_proto_enumTypes,
		MessageInfos:      file_user_tl_proto_msgTypes,
	}.Build()
	File_user_tl_proto = out.File
	file_user_tl_proto_rawDesc = nil
	file_user_tl_proto_goTypes = nil
	file_user_tl_proto_depIdxs = nil
}
