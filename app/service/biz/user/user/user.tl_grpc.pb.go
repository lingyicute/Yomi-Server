//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: user.tl.proto

package user

import (
	context "context"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPCUser_UserGetLastSeens_FullMethodName                 = "/user.RPCUser/user_getLastSeens"
	RPCUser_UserUpdateLastSeen_FullMethodName               = "/user.RPCUser/user_updateLastSeen"
	RPCUser_UserGetLastSeen_FullMethodName                  = "/user.RPCUser/user_getLastSeen"
	RPCUser_UserGetImmutableUser_FullMethodName             = "/user.RPCUser/user_getImmutableUser"
	RPCUser_UserGetMutableUsers_FullMethodName              = "/user.RPCUser/user_getMutableUsers"
	RPCUser_UserGetImmutableUserByPhone_FullMethodName      = "/user.RPCUser/user_getImmutableUserByPhone"
	RPCUser_UserGetImmutableUserByToken_FullMethodName      = "/user.RPCUser/user_getImmutableUserByToken"
	RPCUser_UserSetAccountDaysTTL_FullMethodName            = "/user.RPCUser/user_setAccountDaysTTL"
	RPCUser_UserGetAccountDaysTTL_FullMethodName            = "/user.RPCUser/user_getAccountDaysTTL"
	RPCUser_UserGetNotifySettings_FullMethodName            = "/user.RPCUser/user_getNotifySettings"
	RPCUser_UserGetNotifySettingsList_FullMethodName        = "/user.RPCUser/user_getNotifySettingsList"
	RPCUser_UserSetNotifySettings_FullMethodName            = "/user.RPCUser/user_setNotifySettings"
	RPCUser_UserResetNotifySettings_FullMethodName          = "/user.RPCUser/user_resetNotifySettings"
	RPCUser_UserGetAllNotifySettings_FullMethodName         = "/user.RPCUser/user_getAllNotifySettings"
	RPCUser_UserGetGlobalPrivacySettings_FullMethodName     = "/user.RPCUser/user_getGlobalPrivacySettings"
	RPCUser_UserSetGlobalPrivacySettings_FullMethodName     = "/user.RPCUser/user_setGlobalPrivacySettings"
	RPCUser_UserGetPrivacy_FullMethodName                   = "/user.RPCUser/user_getPrivacy"
	RPCUser_UserSetPrivacy_FullMethodName                   = "/user.RPCUser/user_setPrivacy"
	RPCUser_UserCheckPrivacy_FullMethodName                 = "/user.RPCUser/user_checkPrivacy"
	RPCUser_UserAddPeerSettings_FullMethodName              = "/user.RPCUser/user_addPeerSettings"
	RPCUser_UserGetPeerSettings_FullMethodName              = "/user.RPCUser/user_getPeerSettings"
	RPCUser_UserDeletePeerSettings_FullMethodName           = "/user.RPCUser/user_deletePeerSettings"
	RPCUser_UserChangePhone_FullMethodName                  = "/user.RPCUser/user_changePhone"
	RPCUser_UserCreateNewUser_FullMethodName                = "/user.RPCUser/user_createNewUser"
	RPCUser_UserDeleteUser_FullMethodName                   = "/user.RPCUser/user_deleteUser"
	RPCUser_UserBlockPeer_FullMethodName                    = "/user.RPCUser/user_blockPeer"
	RPCUser_UserUnBlockPeer_FullMethodName                  = "/user.RPCUser/user_unBlockPeer"
	RPCUser_UserBlockedByUser_FullMethodName                = "/user.RPCUser/user_blockedByUser"
	RPCUser_UserIsBlockedByUser_FullMethodName              = "/user.RPCUser/user_isBlockedByUser"
	RPCUser_UserCheckBlockUserList_FullMethodName           = "/user.RPCUser/user_checkBlockUserList"
	RPCUser_UserGetBlockedList_FullMethodName               = "/user.RPCUser/user_getBlockedList"
	RPCUser_UserGetContactSignUpNotification_FullMethodName = "/user.RPCUser/user_getContactSignUpNotification"
	RPCUser_UserSetContactSignUpNotification_FullMethodName = "/user.RPCUser/user_setContactSignUpNotification"
	RPCUser_UserGetContentSettings_FullMethodName           = "/user.RPCUser/user_getContentSettings"
	RPCUser_UserSetContentSettings_FullMethodName           = "/user.RPCUser/user_setContentSettings"
	RPCUser_UserDeleteContact_FullMethodName                = "/user.RPCUser/user_deleteContact"
	RPCUser_UserGetContactList_FullMethodName               = "/user.RPCUser/user_getContactList"
	RPCUser_UserGetContactIdList_FullMethodName             = "/user.RPCUser/user_getContactIdList"
	RPCUser_UserGetContact_FullMethodName                   = "/user.RPCUser/user_getContact"
	RPCUser_UserAddContact_FullMethodName                   = "/user.RPCUser/user_addContact"
	RPCUser_UserCheckContact_FullMethodName                 = "/user.RPCUser/user_checkContact"
	RPCUser_UserGetImportersByPhone_FullMethodName          = "/user.RPCUser/user_getImportersByPhone"
	RPCUser_UserDeleteImportersByPhone_FullMethodName       = "/user.RPCUser/user_deleteImportersByPhone"
	RPCUser_UserImportContacts_FullMethodName               = "/user.RPCUser/user_importContacts"
	RPCUser_UserGetCountryCode_FullMethodName               = "/user.RPCUser/user_getCountryCode"
	RPCUser_UserUpdateAbout_FullMethodName                  = "/user.RPCUser/user_updateAbout"
	RPCUser_UserUpdateFirstAndLastName_FullMethodName       = "/user.RPCUser/user_updateFirstAndLastName"
	RPCUser_UserUpdateVerified_FullMethodName               = "/user.RPCUser/user_updateVerified"
	RPCUser_UserUpdateUsername_FullMethodName               = "/user.RPCUser/user_updateUsername"
	RPCUser_UserUpdateProfilePhoto_FullMethodName           = "/user.RPCUser/user_updateProfilePhoto"
	RPCUser_UserDeleteProfilePhotos_FullMethodName          = "/user.RPCUser/user_deleteProfilePhotos"
	RPCUser_UserGetProfilePhotos_FullMethodName             = "/user.RPCUser/user_getProfilePhotos"
	RPCUser_UserSetBotCommands_FullMethodName               = "/user.RPCUser/user_setBotCommands"
	RPCUser_UserIsBot_FullMethodName                        = "/user.RPCUser/user_isBot"
	RPCUser_UserGetBotInfo_FullMethodName                   = "/user.RPCUser/user_getBotInfo"
	RPCUser_UserCheckBots_FullMethodName                    = "/user.RPCUser/user_checkBots"
	RPCUser_UserGetFullUser_FullMethodName                  = "/user.RPCUser/user_getFullUser"
	RPCUser_UserUpdateEmojiStatus_FullMethodName            = "/user.RPCUser/user_updateEmojiStatus"
	RPCUser_UserGetUserDataById_FullMethodName              = "/user.RPCUser/user_getUserDataById"
	RPCUser_UserGetUserDataListByIdList_FullMethodName      = "/user.RPCUser/user_getUserDataListByIdList"
	RPCUser_UserGetUserDataByToken_FullMethodName           = "/user.RPCUser/user_getUserDataByToken"
	RPCUser_UserSearch_FullMethodName                       = "/user.RPCUser/user_search"
	RPCUser_UserUpdateBotData_FullMethodName                = "/user.RPCUser/user_updateBotData"
	RPCUser_UserGetImmutableUserV2_FullMethodName           = "/user.RPCUser/user_getImmutableUserV2"
	RPCUser_UserGetMutableUsersV2_FullMethodName            = "/user.RPCUser/user_getMutableUsersV2"
	RPCUser_UserCreateNewTestUser_FullMethodName            = "/user.RPCUser/user_createNewTestUser"
	RPCUser_UserEditCloseFriends_FullMethodName             = "/user.RPCUser/user_editCloseFriends"
	RPCUser_UserSetStoriesMaxId_FullMethodName              = "/user.RPCUser/user_setStoriesMaxId"
	RPCUser_UserSetColor_FullMethodName                     = "/user.RPCUser/user_setColor"
	RPCUser_UserUpdateBirthday_FullMethodName               = "/user.RPCUser/user_updateBirthday"
	RPCUser_UserGetBirthdays_FullMethodName                 = "/user.RPCUser/user_getBirthdays"
	RPCUser_UserSetStoriesHidden_FullMethodName             = "/user.RPCUser/user_setStoriesHidden"
	RPCUser_UserUpdatePersonalChannel_FullMethodName        = "/user.RPCUser/user_updatePersonalChannel"
	RPCUser_UserGetUserIdByPhone_FullMethodName             = "/user.RPCUser/user_getUserIdByPhone"
)

// RPCUserClient is the client API for RPCUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCUserClient interface {
	UserGetLastSeens(ctx context.Context, in *TLUserGetLastSeens, opts ...grpc.CallOption) (*Vector_LastSeenData, error)
	UserUpdateLastSeen(ctx context.Context, in *TLUserUpdateLastSeen, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetLastSeen(ctx context.Context, in *TLUserGetLastSeen, opts ...grpc.CallOption) (*LastSeenData, error)
	UserGetImmutableUser(ctx context.Context, in *TLUserGetImmutableUser, opts ...grpc.CallOption) (*mtproto.ImmutableUser, error)
	UserGetMutableUsers(ctx context.Context, in *TLUserGetMutableUsers, opts ...grpc.CallOption) (*Vector_ImmutableUser, error)
	UserGetImmutableUserByPhone(ctx context.Context, in *TLUserGetImmutableUserByPhone, opts ...grpc.CallOption) (*mtproto.ImmutableUser, error)
	UserGetImmutableUserByToken(ctx context.Context, in *TLUserGetImmutableUserByToken, opts ...grpc.CallOption) (*mtproto.ImmutableUser, error)
	UserSetAccountDaysTTL(ctx context.Context, in *TLUserSetAccountDaysTTL, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetAccountDaysTTL(ctx context.Context, in *TLUserGetAccountDaysTTL, opts ...grpc.CallOption) (*mtproto.AccountDaysTTL, error)
	UserGetNotifySettings(ctx context.Context, in *TLUserGetNotifySettings, opts ...grpc.CallOption) (*mtproto.PeerNotifySettings, error)
	UserGetNotifySettingsList(ctx context.Context, in *TLUserGetNotifySettingsList, opts ...grpc.CallOption) (*Vector_PeerPeerNotifySettings, error)
	UserSetNotifySettings(ctx context.Context, in *TLUserSetNotifySettings, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserResetNotifySettings(ctx context.Context, in *TLUserResetNotifySettings, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetAllNotifySettings(ctx context.Context, in *TLUserGetAllNotifySettings, opts ...grpc.CallOption) (*Vector_PeerPeerNotifySettings, error)
	UserGetGlobalPrivacySettings(ctx context.Context, in *TLUserGetGlobalPrivacySettings, opts ...grpc.CallOption) (*mtproto.GlobalPrivacySettings, error)
	UserSetGlobalPrivacySettings(ctx context.Context, in *TLUserSetGlobalPrivacySettings, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetPrivacy(ctx context.Context, in *TLUserGetPrivacy, opts ...grpc.CallOption) (*Vector_PrivacyRule, error)
	UserSetPrivacy(ctx context.Context, in *TLUserSetPrivacy, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserCheckPrivacy(ctx context.Context, in *TLUserCheckPrivacy, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserAddPeerSettings(ctx context.Context, in *TLUserAddPeerSettings, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetPeerSettings(ctx context.Context, in *TLUserGetPeerSettings, opts ...grpc.CallOption) (*mtproto.PeerSettings, error)
	UserDeletePeerSettings(ctx context.Context, in *TLUserDeletePeerSettings, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserChangePhone(ctx context.Context, in *TLUserChangePhone, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserCreateNewUser(ctx context.Context, in *TLUserCreateNewUser, opts ...grpc.CallOption) (*mtproto.ImmutableUser, error)
	UserDeleteUser(ctx context.Context, in *TLUserDeleteUser, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserBlockPeer(ctx context.Context, in *TLUserBlockPeer, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserUnBlockPeer(ctx context.Context, in *TLUserUnBlockPeer, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserBlockedByUser(ctx context.Context, in *TLUserBlockedByUser, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserIsBlockedByUser(ctx context.Context, in *TLUserIsBlockedByUser, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserCheckBlockUserList(ctx context.Context, in *TLUserCheckBlockUserList, opts ...grpc.CallOption) (*Vector_Long, error)
	UserGetBlockedList(ctx context.Context, in *TLUserGetBlockedList, opts ...grpc.CallOption) (*Vector_PeerBlocked, error)
	UserGetContactSignUpNotification(ctx context.Context, in *TLUserGetContactSignUpNotification, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserSetContactSignUpNotification(ctx context.Context, in *TLUserSetContactSignUpNotification, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetContentSettings(ctx context.Context, in *TLUserGetContentSettings, opts ...grpc.CallOption) (*mtproto.Account_ContentSettings, error)
	UserSetContentSettings(ctx context.Context, in *TLUserSetContentSettings, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserDeleteContact(ctx context.Context, in *TLUserDeleteContact, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetContactList(ctx context.Context, in *TLUserGetContactList, opts ...grpc.CallOption) (*Vector_ContactData, error)
	UserGetContactIdList(ctx context.Context, in *TLUserGetContactIdList, opts ...grpc.CallOption) (*Vector_Long, error)
	UserGetContact(ctx context.Context, in *TLUserGetContact, opts ...grpc.CallOption) (*mtproto.ContactData, error)
	UserAddContact(ctx context.Context, in *TLUserAddContact, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserCheckContact(ctx context.Context, in *TLUserCheckContact, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetImportersByPhone(ctx context.Context, in *TLUserGetImportersByPhone, opts ...grpc.CallOption) (*Vector_InputContact, error)
	UserDeleteImportersByPhone(ctx context.Context, in *TLUserDeleteImportersByPhone, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserImportContacts(ctx context.Context, in *TLUserImportContacts, opts ...grpc.CallOption) (*UserImportedContacts, error)
	UserGetCountryCode(ctx context.Context, in *TLUserGetCountryCode, opts ...grpc.CallOption) (*mtproto.String, error)
	UserUpdateAbout(ctx context.Context, in *TLUserUpdateAbout, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserUpdateFirstAndLastName(ctx context.Context, in *TLUserUpdateFirstAndLastName, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserUpdateVerified(ctx context.Context, in *TLUserUpdateVerified, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserUpdateUsername(ctx context.Context, in *TLUserUpdateUsername, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserUpdateProfilePhoto(ctx context.Context, in *TLUserUpdateProfilePhoto, opts ...grpc.CallOption) (*mtproto.Int64, error)
	UserDeleteProfilePhotos(ctx context.Context, in *TLUserDeleteProfilePhotos, opts ...grpc.CallOption) (*mtproto.Int64, error)
	UserGetProfilePhotos(ctx context.Context, in *TLUserGetProfilePhotos, opts ...grpc.CallOption) (*Vector_Long, error)
	UserSetBotCommands(ctx context.Context, in *TLUserSetBotCommands, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserIsBot(ctx context.Context, in *TLUserIsBot, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetBotInfo(ctx context.Context, in *TLUserGetBotInfo, opts ...grpc.CallOption) (*mtproto.BotInfo, error)
	UserCheckBots(ctx context.Context, in *TLUserCheckBots, opts ...grpc.CallOption) (*Vector_Long, error)
	UserGetFullUser(ctx context.Context, in *TLUserGetFullUser, opts ...grpc.CallOption) (*mtproto.Users_UserFull, error)
	UserUpdateEmojiStatus(ctx context.Context, in *TLUserUpdateEmojiStatus, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetUserDataById(ctx context.Context, in *TLUserGetUserDataById, opts ...grpc.CallOption) (*mtproto.UserData, error)
	UserGetUserDataListByIdList(ctx context.Context, in *TLUserGetUserDataListByIdList, opts ...grpc.CallOption) (*Vector_UserData, error)
	UserGetUserDataByToken(ctx context.Context, in *TLUserGetUserDataByToken, opts ...grpc.CallOption) (*mtproto.UserData, error)
	UserSearch(ctx context.Context, in *TLUserSearch, opts ...grpc.CallOption) (*UsersFound, error)
	UserUpdateBotData(ctx context.Context, in *TLUserUpdateBotData, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetImmutableUserV2(ctx context.Context, in *TLUserGetImmutableUserV2, opts ...grpc.CallOption) (*mtproto.ImmutableUser, error)
	UserGetMutableUsersV2(ctx context.Context, in *TLUserGetMutableUsersV2, opts ...grpc.CallOption) (*mtproto.MutableUsers, error)
	UserCreateNewTestUser(ctx context.Context, in *TLUserCreateNewTestUser, opts ...grpc.CallOption) (*mtproto.ImmutableUser, error)
	UserEditCloseFriends(ctx context.Context, in *TLUserEditCloseFriends, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserSetStoriesMaxId(ctx context.Context, in *TLUserSetStoriesMaxId, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserSetColor(ctx context.Context, in *TLUserSetColor, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserUpdateBirthday(ctx context.Context, in *TLUserUpdateBirthday, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetBirthdays(ctx context.Context, in *TLUserGetBirthdays, opts ...grpc.CallOption) (*Vector_ContactBirthday, error)
	UserSetStoriesHidden(ctx context.Context, in *TLUserSetStoriesHidden, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserUpdatePersonalChannel(ctx context.Context, in *TLUserUpdatePersonalChannel, opts ...grpc.CallOption) (*mtproto.Bool, error)
	UserGetUserIdByPhone(ctx context.Context, in *TLUserGetUserIdByPhone, opts ...grpc.CallOption) (*mtproto.Int64, error)
}

type rPCUserClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCUserClient(cc grpc.ClientConnInterface) RPCUserClient {
	return &rPCUserClient{cc}
}

func (c *rPCUserClient) UserGetLastSeens(ctx context.Context, in *TLUserGetLastSeens, opts ...grpc.CallOption) (*Vector_LastSeenData, error) {
	out := new(Vector_LastSeenData)
	err := c.cc.Invoke(ctx, RPCUser_UserGetLastSeens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdateLastSeen(ctx context.Context, in *TLUserUpdateLastSeen, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserUpdateLastSeen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetLastSeen(ctx context.Context, in *TLUserGetLastSeen, opts ...grpc.CallOption) (*LastSeenData, error) {
	out := new(LastSeenData)
	err := c.cc.Invoke(ctx, RPCUser_UserGetLastSeen_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetImmutableUser(ctx context.Context, in *TLUserGetImmutableUser, opts ...grpc.CallOption) (*mtproto.ImmutableUser, error) {
	out := new(mtproto.ImmutableUser)
	err := c.cc.Invoke(ctx, RPCUser_UserGetImmutableUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetMutableUsers(ctx context.Context, in *TLUserGetMutableUsers, opts ...grpc.CallOption) (*Vector_ImmutableUser, error) {
	out := new(Vector_ImmutableUser)
	err := c.cc.Invoke(ctx, RPCUser_UserGetMutableUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetImmutableUserByPhone(ctx context.Context, in *TLUserGetImmutableUserByPhone, opts ...grpc.CallOption) (*mtproto.ImmutableUser, error) {
	out := new(mtproto.ImmutableUser)
	err := c.cc.Invoke(ctx, RPCUser_UserGetImmutableUserByPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetImmutableUserByToken(ctx context.Context, in *TLUserGetImmutableUserByToken, opts ...grpc.CallOption) (*mtproto.ImmutableUser, error) {
	out := new(mtproto.ImmutableUser)
	err := c.cc.Invoke(ctx, RPCUser_UserGetImmutableUserByToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetAccountDaysTTL(ctx context.Context, in *TLUserSetAccountDaysTTL, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserSetAccountDaysTTL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetAccountDaysTTL(ctx context.Context, in *TLUserGetAccountDaysTTL, opts ...grpc.CallOption) (*mtproto.AccountDaysTTL, error) {
	out := new(mtproto.AccountDaysTTL)
	err := c.cc.Invoke(ctx, RPCUser_UserGetAccountDaysTTL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetNotifySettings(ctx context.Context, in *TLUserGetNotifySettings, opts ...grpc.CallOption) (*mtproto.PeerNotifySettings, error) {
	out := new(mtproto.PeerNotifySettings)
	err := c.cc.Invoke(ctx, RPCUser_UserGetNotifySettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetNotifySettingsList(ctx context.Context, in *TLUserGetNotifySettingsList, opts ...grpc.CallOption) (*Vector_PeerPeerNotifySettings, error) {
	out := new(Vector_PeerPeerNotifySettings)
	err := c.cc.Invoke(ctx, RPCUser_UserGetNotifySettingsList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetNotifySettings(ctx context.Context, in *TLUserSetNotifySettings, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserSetNotifySettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserResetNotifySettings(ctx context.Context, in *TLUserResetNotifySettings, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserResetNotifySettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetAllNotifySettings(ctx context.Context, in *TLUserGetAllNotifySettings, opts ...grpc.CallOption) (*Vector_PeerPeerNotifySettings, error) {
	out := new(Vector_PeerPeerNotifySettings)
	err := c.cc.Invoke(ctx, RPCUser_UserGetAllNotifySettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetGlobalPrivacySettings(ctx context.Context, in *TLUserGetGlobalPrivacySettings, opts ...grpc.CallOption) (*mtproto.GlobalPrivacySettings, error) {
	out := new(mtproto.GlobalPrivacySettings)
	err := c.cc.Invoke(ctx, RPCUser_UserGetGlobalPrivacySettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetGlobalPrivacySettings(ctx context.Context, in *TLUserSetGlobalPrivacySettings, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserSetGlobalPrivacySettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetPrivacy(ctx context.Context, in *TLUserGetPrivacy, opts ...grpc.CallOption) (*Vector_PrivacyRule, error) {
	out := new(Vector_PrivacyRule)
	err := c.cc.Invoke(ctx, RPCUser_UserGetPrivacy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetPrivacy(ctx context.Context, in *TLUserSetPrivacy, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserSetPrivacy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserCheckPrivacy(ctx context.Context, in *TLUserCheckPrivacy, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserCheckPrivacy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserAddPeerSettings(ctx context.Context, in *TLUserAddPeerSettings, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserAddPeerSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetPeerSettings(ctx context.Context, in *TLUserGetPeerSettings, opts ...grpc.CallOption) (*mtproto.PeerSettings, error) {
	out := new(mtproto.PeerSettings)
	err := c.cc.Invoke(ctx, RPCUser_UserGetPeerSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserDeletePeerSettings(ctx context.Context, in *TLUserDeletePeerSettings, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserDeletePeerSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserChangePhone(ctx context.Context, in *TLUserChangePhone, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserChangePhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserCreateNewUser(ctx context.Context, in *TLUserCreateNewUser, opts ...grpc.CallOption) (*mtproto.ImmutableUser, error) {
	out := new(mtproto.ImmutableUser)
	err := c.cc.Invoke(ctx, RPCUser_UserCreateNewUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserDeleteUser(ctx context.Context, in *TLUserDeleteUser, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserDeleteUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserBlockPeer(ctx context.Context, in *TLUserBlockPeer, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserBlockPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUnBlockPeer(ctx context.Context, in *TLUserUnBlockPeer, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserUnBlockPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserBlockedByUser(ctx context.Context, in *TLUserBlockedByUser, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserBlockedByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserIsBlockedByUser(ctx context.Context, in *TLUserIsBlockedByUser, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserIsBlockedByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserCheckBlockUserList(ctx context.Context, in *TLUserCheckBlockUserList, opts ...grpc.CallOption) (*Vector_Long, error) {
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, RPCUser_UserCheckBlockUserList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetBlockedList(ctx context.Context, in *TLUserGetBlockedList, opts ...grpc.CallOption) (*Vector_PeerBlocked, error) {
	out := new(Vector_PeerBlocked)
	err := c.cc.Invoke(ctx, RPCUser_UserGetBlockedList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetContactSignUpNotification(ctx context.Context, in *TLUserGetContactSignUpNotification, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserGetContactSignUpNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetContactSignUpNotification(ctx context.Context, in *TLUserSetContactSignUpNotification, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserSetContactSignUpNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetContentSettings(ctx context.Context, in *TLUserGetContentSettings, opts ...grpc.CallOption) (*mtproto.Account_ContentSettings, error) {
	out := new(mtproto.Account_ContentSettings)
	err := c.cc.Invoke(ctx, RPCUser_UserGetContentSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetContentSettings(ctx context.Context, in *TLUserSetContentSettings, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserSetContentSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserDeleteContact(ctx context.Context, in *TLUserDeleteContact, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserDeleteContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetContactList(ctx context.Context, in *TLUserGetContactList, opts ...grpc.CallOption) (*Vector_ContactData, error) {
	out := new(Vector_ContactData)
	err := c.cc.Invoke(ctx, RPCUser_UserGetContactList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetContactIdList(ctx context.Context, in *TLUserGetContactIdList, opts ...grpc.CallOption) (*Vector_Long, error) {
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, RPCUser_UserGetContactIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetContact(ctx context.Context, in *TLUserGetContact, opts ...grpc.CallOption) (*mtproto.ContactData, error) {
	out := new(mtproto.ContactData)
	err := c.cc.Invoke(ctx, RPCUser_UserGetContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserAddContact(ctx context.Context, in *TLUserAddContact, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserAddContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserCheckContact(ctx context.Context, in *TLUserCheckContact, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserCheckContact_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetImportersByPhone(ctx context.Context, in *TLUserGetImportersByPhone, opts ...grpc.CallOption) (*Vector_InputContact, error) {
	out := new(Vector_InputContact)
	err := c.cc.Invoke(ctx, RPCUser_UserGetImportersByPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserDeleteImportersByPhone(ctx context.Context, in *TLUserDeleteImportersByPhone, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserDeleteImportersByPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserImportContacts(ctx context.Context, in *TLUserImportContacts, opts ...grpc.CallOption) (*UserImportedContacts, error) {
	out := new(UserImportedContacts)
	err := c.cc.Invoke(ctx, RPCUser_UserImportContacts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetCountryCode(ctx context.Context, in *TLUserGetCountryCode, opts ...grpc.CallOption) (*mtproto.String, error) {
	out := new(mtproto.String)
	err := c.cc.Invoke(ctx, RPCUser_UserGetCountryCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdateAbout(ctx context.Context, in *TLUserUpdateAbout, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserUpdateAbout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdateFirstAndLastName(ctx context.Context, in *TLUserUpdateFirstAndLastName, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserUpdateFirstAndLastName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdateVerified(ctx context.Context, in *TLUserUpdateVerified, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserUpdateVerified_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdateUsername(ctx context.Context, in *TLUserUpdateUsername, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserUpdateUsername_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdateProfilePhoto(ctx context.Context, in *TLUserUpdateProfilePhoto, opts ...grpc.CallOption) (*mtproto.Int64, error) {
	out := new(mtproto.Int64)
	err := c.cc.Invoke(ctx, RPCUser_UserUpdateProfilePhoto_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserDeleteProfilePhotos(ctx context.Context, in *TLUserDeleteProfilePhotos, opts ...grpc.CallOption) (*mtproto.Int64, error) {
	out := new(mtproto.Int64)
	err := c.cc.Invoke(ctx, RPCUser_UserDeleteProfilePhotos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetProfilePhotos(ctx context.Context, in *TLUserGetProfilePhotos, opts ...grpc.CallOption) (*Vector_Long, error) {
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, RPCUser_UserGetProfilePhotos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetBotCommands(ctx context.Context, in *TLUserSetBotCommands, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserSetBotCommands_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserIsBot(ctx context.Context, in *TLUserIsBot, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserIsBot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetBotInfo(ctx context.Context, in *TLUserGetBotInfo, opts ...grpc.CallOption) (*mtproto.BotInfo, error) {
	out := new(mtproto.BotInfo)
	err := c.cc.Invoke(ctx, RPCUser_UserGetBotInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserCheckBots(ctx context.Context, in *TLUserCheckBots, opts ...grpc.CallOption) (*Vector_Long, error) {
	out := new(Vector_Long)
	err := c.cc.Invoke(ctx, RPCUser_UserCheckBots_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetFullUser(ctx context.Context, in *TLUserGetFullUser, opts ...grpc.CallOption) (*mtproto.Users_UserFull, error) {
	out := new(mtproto.Users_UserFull)
	err := c.cc.Invoke(ctx, RPCUser_UserGetFullUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdateEmojiStatus(ctx context.Context, in *TLUserUpdateEmojiStatus, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserUpdateEmojiStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetUserDataById(ctx context.Context, in *TLUserGetUserDataById, opts ...grpc.CallOption) (*mtproto.UserData, error) {
	out := new(mtproto.UserData)
	err := c.cc.Invoke(ctx, RPCUser_UserGetUserDataById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetUserDataListByIdList(ctx context.Context, in *TLUserGetUserDataListByIdList, opts ...grpc.CallOption) (*Vector_UserData, error) {
	out := new(Vector_UserData)
	err := c.cc.Invoke(ctx, RPCUser_UserGetUserDataListByIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetUserDataByToken(ctx context.Context, in *TLUserGetUserDataByToken, opts ...grpc.CallOption) (*mtproto.UserData, error) {
	out := new(mtproto.UserData)
	err := c.cc.Invoke(ctx, RPCUser_UserGetUserDataByToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSearch(ctx context.Context, in *TLUserSearch, opts ...grpc.CallOption) (*UsersFound, error) {
	out := new(UsersFound)
	err := c.cc.Invoke(ctx, RPCUser_UserSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdateBotData(ctx context.Context, in *TLUserUpdateBotData, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserUpdateBotData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetImmutableUserV2(ctx context.Context, in *TLUserGetImmutableUserV2, opts ...grpc.CallOption) (*mtproto.ImmutableUser, error) {
	out := new(mtproto.ImmutableUser)
	err := c.cc.Invoke(ctx, RPCUser_UserGetImmutableUserV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetMutableUsersV2(ctx context.Context, in *TLUserGetMutableUsersV2, opts ...grpc.CallOption) (*mtproto.MutableUsers, error) {
	out := new(mtproto.MutableUsers)
	err := c.cc.Invoke(ctx, RPCUser_UserGetMutableUsersV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserCreateNewTestUser(ctx context.Context, in *TLUserCreateNewTestUser, opts ...grpc.CallOption) (*mtproto.ImmutableUser, error) {
	out := new(mtproto.ImmutableUser)
	err := c.cc.Invoke(ctx, RPCUser_UserCreateNewTestUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserEditCloseFriends(ctx context.Context, in *TLUserEditCloseFriends, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserEditCloseFriends_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetStoriesMaxId(ctx context.Context, in *TLUserSetStoriesMaxId, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserSetStoriesMaxId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetColor(ctx context.Context, in *TLUserSetColor, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserSetColor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdateBirthday(ctx context.Context, in *TLUserUpdateBirthday, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserUpdateBirthday_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetBirthdays(ctx context.Context, in *TLUserGetBirthdays, opts ...grpc.CallOption) (*Vector_ContactBirthday, error) {
	out := new(Vector_ContactBirthday)
	err := c.cc.Invoke(ctx, RPCUser_UserGetBirthdays_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserSetStoriesHidden(ctx context.Context, in *TLUserSetStoriesHidden, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserSetStoriesHidden_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserUpdatePersonalChannel(ctx context.Context, in *TLUserUpdatePersonalChannel, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCUser_UserUpdatePersonalChannel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCUserClient) UserGetUserIdByPhone(ctx context.Context, in *TLUserGetUserIdByPhone, opts ...grpc.CallOption) (*mtproto.Int64, error) {
	out := new(mtproto.Int64)
	err := c.cc.Invoke(ctx, RPCUser_UserGetUserIdByPhone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCUserServer is the server API for RPCUser service.
// All implementations should embed UnimplementedRPCUserServer
// for forward compatibility
type RPCUserServer interface {
	UserGetLastSeens(context.Context, *TLUserGetLastSeens) (*Vector_LastSeenData, error)
	UserUpdateLastSeen(context.Context, *TLUserUpdateLastSeen) (*mtproto.Bool, error)
	UserGetLastSeen(context.Context, *TLUserGetLastSeen) (*LastSeenData, error)
	UserGetImmutableUser(context.Context, *TLUserGetImmutableUser) (*mtproto.ImmutableUser, error)
	UserGetMutableUsers(context.Context, *TLUserGetMutableUsers) (*Vector_ImmutableUser, error)
	UserGetImmutableUserByPhone(context.Context, *TLUserGetImmutableUserByPhone) (*mtproto.ImmutableUser, error)
	UserGetImmutableUserByToken(context.Context, *TLUserGetImmutableUserByToken) (*mtproto.ImmutableUser, error)
	UserSetAccountDaysTTL(context.Context, *TLUserSetAccountDaysTTL) (*mtproto.Bool, error)
	UserGetAccountDaysTTL(context.Context, *TLUserGetAccountDaysTTL) (*mtproto.AccountDaysTTL, error)
	UserGetNotifySettings(context.Context, *TLUserGetNotifySettings) (*mtproto.PeerNotifySettings, error)
	UserGetNotifySettingsList(context.Context, *TLUserGetNotifySettingsList) (*Vector_PeerPeerNotifySettings, error)
	UserSetNotifySettings(context.Context, *TLUserSetNotifySettings) (*mtproto.Bool, error)
	UserResetNotifySettings(context.Context, *TLUserResetNotifySettings) (*mtproto.Bool, error)
	UserGetAllNotifySettings(context.Context, *TLUserGetAllNotifySettings) (*Vector_PeerPeerNotifySettings, error)
	UserGetGlobalPrivacySettings(context.Context, *TLUserGetGlobalPrivacySettings) (*mtproto.GlobalPrivacySettings, error)
	UserSetGlobalPrivacySettings(context.Context, *TLUserSetGlobalPrivacySettings) (*mtproto.Bool, error)
	UserGetPrivacy(context.Context, *TLUserGetPrivacy) (*Vector_PrivacyRule, error)
	UserSetPrivacy(context.Context, *TLUserSetPrivacy) (*mtproto.Bool, error)
	UserCheckPrivacy(context.Context, *TLUserCheckPrivacy) (*mtproto.Bool, error)
	UserAddPeerSettings(context.Context, *TLUserAddPeerSettings) (*mtproto.Bool, error)
	UserGetPeerSettings(context.Context, *TLUserGetPeerSettings) (*mtproto.PeerSettings, error)
	UserDeletePeerSettings(context.Context, *TLUserDeletePeerSettings) (*mtproto.Bool, error)
	UserChangePhone(context.Context, *TLUserChangePhone) (*mtproto.Bool, error)
	UserCreateNewUser(context.Context, *TLUserCreateNewUser) (*mtproto.ImmutableUser, error)
	UserDeleteUser(context.Context, *TLUserDeleteUser) (*mtproto.Bool, error)
	UserBlockPeer(context.Context, *TLUserBlockPeer) (*mtproto.Bool, error)
	UserUnBlockPeer(context.Context, *TLUserUnBlockPeer) (*mtproto.Bool, error)
	UserBlockedByUser(context.Context, *TLUserBlockedByUser) (*mtproto.Bool, error)
	UserIsBlockedByUser(context.Context, *TLUserIsBlockedByUser) (*mtproto.Bool, error)
	UserCheckBlockUserList(context.Context, *TLUserCheckBlockUserList) (*Vector_Long, error)
	UserGetBlockedList(context.Context, *TLUserGetBlockedList) (*Vector_PeerBlocked, error)
	UserGetContactSignUpNotification(context.Context, *TLUserGetContactSignUpNotification) (*mtproto.Bool, error)
	UserSetContactSignUpNotification(context.Context, *TLUserSetContactSignUpNotification) (*mtproto.Bool, error)
	UserGetContentSettings(context.Context, *TLUserGetContentSettings) (*mtproto.Account_ContentSettings, error)
	UserSetContentSettings(context.Context, *TLUserSetContentSettings) (*mtproto.Bool, error)
	UserDeleteContact(context.Context, *TLUserDeleteContact) (*mtproto.Bool, error)
	UserGetContactList(context.Context, *TLUserGetContactList) (*Vector_ContactData, error)
	UserGetContactIdList(context.Context, *TLUserGetContactIdList) (*Vector_Long, error)
	UserGetContact(context.Context, *TLUserGetContact) (*mtproto.ContactData, error)
	UserAddContact(context.Context, *TLUserAddContact) (*mtproto.Bool, error)
	UserCheckContact(context.Context, *TLUserCheckContact) (*mtproto.Bool, error)
	UserGetImportersByPhone(context.Context, *TLUserGetImportersByPhone) (*Vector_InputContact, error)
	UserDeleteImportersByPhone(context.Context, *TLUserDeleteImportersByPhone) (*mtproto.Bool, error)
	UserImportContacts(context.Context, *TLUserImportContacts) (*UserImportedContacts, error)
	UserGetCountryCode(context.Context, *TLUserGetCountryCode) (*mtproto.String, error)
	UserUpdateAbout(context.Context, *TLUserUpdateAbout) (*mtproto.Bool, error)
	UserUpdateFirstAndLastName(context.Context, *TLUserUpdateFirstAndLastName) (*mtproto.Bool, error)
	UserUpdateVerified(context.Context, *TLUserUpdateVerified) (*mtproto.Bool, error)
	UserUpdateUsername(context.Context, *TLUserUpdateUsername) (*mtproto.Bool, error)
	UserUpdateProfilePhoto(context.Context, *TLUserUpdateProfilePhoto) (*mtproto.Int64, error)
	UserDeleteProfilePhotos(context.Context, *TLUserDeleteProfilePhotos) (*mtproto.Int64, error)
	UserGetProfilePhotos(context.Context, *TLUserGetProfilePhotos) (*Vector_Long, error)
	UserSetBotCommands(context.Context, *TLUserSetBotCommands) (*mtproto.Bool, error)
	UserIsBot(context.Context, *TLUserIsBot) (*mtproto.Bool, error)
	UserGetBotInfo(context.Context, *TLUserGetBotInfo) (*mtproto.BotInfo, error)
	UserCheckBots(context.Context, *TLUserCheckBots) (*Vector_Long, error)
	UserGetFullUser(context.Context, *TLUserGetFullUser) (*mtproto.Users_UserFull, error)
	UserUpdateEmojiStatus(context.Context, *TLUserUpdateEmojiStatus) (*mtproto.Bool, error)
	UserGetUserDataById(context.Context, *TLUserGetUserDataById) (*mtproto.UserData, error)
	UserGetUserDataListByIdList(context.Context, *TLUserGetUserDataListByIdList) (*Vector_UserData, error)
	UserGetUserDataByToken(context.Context, *TLUserGetUserDataByToken) (*mtproto.UserData, error)
	UserSearch(context.Context, *TLUserSearch) (*UsersFound, error)
	UserUpdateBotData(context.Context, *TLUserUpdateBotData) (*mtproto.Bool, error)
	UserGetImmutableUserV2(context.Context, *TLUserGetImmutableUserV2) (*mtproto.ImmutableUser, error)
	UserGetMutableUsersV2(context.Context, *TLUserGetMutableUsersV2) (*mtproto.MutableUsers, error)
	UserCreateNewTestUser(context.Context, *TLUserCreateNewTestUser) (*mtproto.ImmutableUser, error)
	UserEditCloseFriends(context.Context, *TLUserEditCloseFriends) (*mtproto.Bool, error)
	UserSetStoriesMaxId(context.Context, *TLUserSetStoriesMaxId) (*mtproto.Bool, error)
	UserSetColor(context.Context, *TLUserSetColor) (*mtproto.Bool, error)
	UserUpdateBirthday(context.Context, *TLUserUpdateBirthday) (*mtproto.Bool, error)
	UserGetBirthdays(context.Context, *TLUserGetBirthdays) (*Vector_ContactBirthday, error)
	UserSetStoriesHidden(context.Context, *TLUserSetStoriesHidden) (*mtproto.Bool, error)
	UserUpdatePersonalChannel(context.Context, *TLUserUpdatePersonalChannel) (*mtproto.Bool, error)
	UserGetUserIdByPhone(context.Context, *TLUserGetUserIdByPhone) (*mtproto.Int64, error)
}

// UnimplementedRPCUserServer should be embedded to have forward compatible implementations.
type UnimplementedRPCUserServer struct {
}

func (UnimplementedRPCUserServer) UserGetLastSeens(context.Context, *TLUserGetLastSeens) (*Vector_LastSeenData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetLastSeens not implemented")
}
func (UnimplementedRPCUserServer) UserUpdateLastSeen(context.Context, *TLUserUpdateLastSeen) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateLastSeen not implemented")
}
func (UnimplementedRPCUserServer) UserGetLastSeen(context.Context, *TLUserGetLastSeen) (*LastSeenData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetLastSeen not implemented")
}
func (UnimplementedRPCUserServer) UserGetImmutableUser(context.Context, *TLUserGetImmutableUser) (*mtproto.ImmutableUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetImmutableUser not implemented")
}
func (UnimplementedRPCUserServer) UserGetMutableUsers(context.Context, *TLUserGetMutableUsers) (*Vector_ImmutableUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetMutableUsers not implemented")
}
func (UnimplementedRPCUserServer) UserGetImmutableUserByPhone(context.Context, *TLUserGetImmutableUserByPhone) (*mtproto.ImmutableUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetImmutableUserByPhone not implemented")
}
func (UnimplementedRPCUserServer) UserGetImmutableUserByToken(context.Context, *TLUserGetImmutableUserByToken) (*mtproto.ImmutableUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetImmutableUserByToken not implemented")
}
func (UnimplementedRPCUserServer) UserSetAccountDaysTTL(context.Context, *TLUserSetAccountDaysTTL) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetAccountDaysTTL not implemented")
}
func (UnimplementedRPCUserServer) UserGetAccountDaysTTL(context.Context, *TLUserGetAccountDaysTTL) (*mtproto.AccountDaysTTL, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetAccountDaysTTL not implemented")
}
func (UnimplementedRPCUserServer) UserGetNotifySettings(context.Context, *TLUserGetNotifySettings) (*mtproto.PeerNotifySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetNotifySettings not implemented")
}
func (UnimplementedRPCUserServer) UserGetNotifySettingsList(context.Context, *TLUserGetNotifySettingsList) (*Vector_PeerPeerNotifySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetNotifySettingsList not implemented")
}
func (UnimplementedRPCUserServer) UserSetNotifySettings(context.Context, *TLUserSetNotifySettings) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetNotifySettings not implemented")
}
func (UnimplementedRPCUserServer) UserResetNotifySettings(context.Context, *TLUserResetNotifySettings) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserResetNotifySettings not implemented")
}
func (UnimplementedRPCUserServer) UserGetAllNotifySettings(context.Context, *TLUserGetAllNotifySettings) (*Vector_PeerPeerNotifySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetAllNotifySettings not implemented")
}
func (UnimplementedRPCUserServer) UserGetGlobalPrivacySettings(context.Context, *TLUserGetGlobalPrivacySettings) (*mtproto.GlobalPrivacySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetGlobalPrivacySettings not implemented")
}
func (UnimplementedRPCUserServer) UserSetGlobalPrivacySettings(context.Context, *TLUserSetGlobalPrivacySettings) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetGlobalPrivacySettings not implemented")
}
func (UnimplementedRPCUserServer) UserGetPrivacy(context.Context, *TLUserGetPrivacy) (*Vector_PrivacyRule, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetPrivacy not implemented")
}
func (UnimplementedRPCUserServer) UserSetPrivacy(context.Context, *TLUserSetPrivacy) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetPrivacy not implemented")
}
func (UnimplementedRPCUserServer) UserCheckPrivacy(context.Context, *TLUserCheckPrivacy) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheckPrivacy not implemented")
}
func (UnimplementedRPCUserServer) UserAddPeerSettings(context.Context, *TLUserAddPeerSettings) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAddPeerSettings not implemented")
}
func (UnimplementedRPCUserServer) UserGetPeerSettings(context.Context, *TLUserGetPeerSettings) (*mtproto.PeerSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetPeerSettings not implemented")
}
func (UnimplementedRPCUserServer) UserDeletePeerSettings(context.Context, *TLUserDeletePeerSettings) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeletePeerSettings not implemented")
}
func (UnimplementedRPCUserServer) UserChangePhone(context.Context, *TLUserChangePhone) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserChangePhone not implemented")
}
func (UnimplementedRPCUserServer) UserCreateNewUser(context.Context, *TLUserCreateNewUser) (*mtproto.ImmutableUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreateNewUser not implemented")
}
func (UnimplementedRPCUserServer) UserDeleteUser(context.Context, *TLUserDeleteUser) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeleteUser not implemented")
}
func (UnimplementedRPCUserServer) UserBlockPeer(context.Context, *TLUserBlockPeer) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBlockPeer not implemented")
}
func (UnimplementedRPCUserServer) UserUnBlockPeer(context.Context, *TLUserUnBlockPeer) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUnBlockPeer not implemented")
}
func (UnimplementedRPCUserServer) UserBlockedByUser(context.Context, *TLUserBlockedByUser) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBlockedByUser not implemented")
}
func (UnimplementedRPCUserServer) UserIsBlockedByUser(context.Context, *TLUserIsBlockedByUser) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIsBlockedByUser not implemented")
}
func (UnimplementedRPCUserServer) UserCheckBlockUserList(context.Context, *TLUserCheckBlockUserList) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheckBlockUserList not implemented")
}
func (UnimplementedRPCUserServer) UserGetBlockedList(context.Context, *TLUserGetBlockedList) (*Vector_PeerBlocked, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetBlockedList not implemented")
}
func (UnimplementedRPCUserServer) UserGetContactSignUpNotification(context.Context, *TLUserGetContactSignUpNotification) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetContactSignUpNotification not implemented")
}
func (UnimplementedRPCUserServer) UserSetContactSignUpNotification(context.Context, *TLUserSetContactSignUpNotification) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetContactSignUpNotification not implemented")
}
func (UnimplementedRPCUserServer) UserGetContentSettings(context.Context, *TLUserGetContentSettings) (*mtproto.Account_ContentSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetContentSettings not implemented")
}
func (UnimplementedRPCUserServer) UserSetContentSettings(context.Context, *TLUserSetContentSettings) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetContentSettings not implemented")
}
func (UnimplementedRPCUserServer) UserDeleteContact(context.Context, *TLUserDeleteContact) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeleteContact not implemented")
}
func (UnimplementedRPCUserServer) UserGetContactList(context.Context, *TLUserGetContactList) (*Vector_ContactData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetContactList not implemented")
}
func (UnimplementedRPCUserServer) UserGetContactIdList(context.Context, *TLUserGetContactIdList) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetContactIdList not implemented")
}
func (UnimplementedRPCUserServer) UserGetContact(context.Context, *TLUserGetContact) (*mtproto.ContactData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetContact not implemented")
}
func (UnimplementedRPCUserServer) UserAddContact(context.Context, *TLUserAddContact) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserAddContact not implemented")
}
func (UnimplementedRPCUserServer) UserCheckContact(context.Context, *TLUserCheckContact) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheckContact not implemented")
}
func (UnimplementedRPCUserServer) UserGetImportersByPhone(context.Context, *TLUserGetImportersByPhone) (*Vector_InputContact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetImportersByPhone not implemented")
}
func (UnimplementedRPCUserServer) UserDeleteImportersByPhone(context.Context, *TLUserDeleteImportersByPhone) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeleteImportersByPhone not implemented")
}
func (UnimplementedRPCUserServer) UserImportContacts(context.Context, *TLUserImportContacts) (*UserImportedContacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserImportContacts not implemented")
}
func (UnimplementedRPCUserServer) UserGetCountryCode(context.Context, *TLUserGetCountryCode) (*mtproto.String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetCountryCode not implemented")
}
func (UnimplementedRPCUserServer) UserUpdateAbout(context.Context, *TLUserUpdateAbout) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateAbout not implemented")
}
func (UnimplementedRPCUserServer) UserUpdateFirstAndLastName(context.Context, *TLUserUpdateFirstAndLastName) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateFirstAndLastName not implemented")
}
func (UnimplementedRPCUserServer) UserUpdateVerified(context.Context, *TLUserUpdateVerified) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateVerified not implemented")
}
func (UnimplementedRPCUserServer) UserUpdateUsername(context.Context, *TLUserUpdateUsername) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateUsername not implemented")
}
func (UnimplementedRPCUserServer) UserUpdateProfilePhoto(context.Context, *TLUserUpdateProfilePhoto) (*mtproto.Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateProfilePhoto not implemented")
}
func (UnimplementedRPCUserServer) UserDeleteProfilePhotos(context.Context, *TLUserDeleteProfilePhotos) (*mtproto.Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDeleteProfilePhotos not implemented")
}
func (UnimplementedRPCUserServer) UserGetProfilePhotos(context.Context, *TLUserGetProfilePhotos) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetProfilePhotos not implemented")
}
func (UnimplementedRPCUserServer) UserSetBotCommands(context.Context, *TLUserSetBotCommands) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetBotCommands not implemented")
}
func (UnimplementedRPCUserServer) UserIsBot(context.Context, *TLUserIsBot) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserIsBot not implemented")
}
func (UnimplementedRPCUserServer) UserGetBotInfo(context.Context, *TLUserGetBotInfo) (*mtproto.BotInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetBotInfo not implemented")
}
func (UnimplementedRPCUserServer) UserCheckBots(context.Context, *TLUserCheckBots) (*Vector_Long, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCheckBots not implemented")
}
func (UnimplementedRPCUserServer) UserGetFullUser(context.Context, *TLUserGetFullUser) (*mtproto.Users_UserFull, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetFullUser not implemented")
}
func (UnimplementedRPCUserServer) UserUpdateEmojiStatus(context.Context, *TLUserUpdateEmojiStatus) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateEmojiStatus not implemented")
}
func (UnimplementedRPCUserServer) UserGetUserDataById(context.Context, *TLUserGetUserDataById) (*mtproto.UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetUserDataById not implemented")
}
func (UnimplementedRPCUserServer) UserGetUserDataListByIdList(context.Context, *TLUserGetUserDataListByIdList) (*Vector_UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetUserDataListByIdList not implemented")
}
func (UnimplementedRPCUserServer) UserGetUserDataByToken(context.Context, *TLUserGetUserDataByToken) (*mtproto.UserData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetUserDataByToken not implemented")
}
func (UnimplementedRPCUserServer) UserSearch(context.Context, *TLUserSearch) (*UsersFound, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSearch not implemented")
}
func (UnimplementedRPCUserServer) UserUpdateBotData(context.Context, *TLUserUpdateBotData) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateBotData not implemented")
}
func (UnimplementedRPCUserServer) UserGetImmutableUserV2(context.Context, *TLUserGetImmutableUserV2) (*mtproto.ImmutableUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetImmutableUserV2 not implemented")
}
func (UnimplementedRPCUserServer) UserGetMutableUsersV2(context.Context, *TLUserGetMutableUsersV2) (*mtproto.MutableUsers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetMutableUsersV2 not implemented")
}
func (UnimplementedRPCUserServer) UserCreateNewTestUser(context.Context, *TLUserCreateNewTestUser) (*mtproto.ImmutableUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserCreateNewTestUser not implemented")
}
func (UnimplementedRPCUserServer) UserEditCloseFriends(context.Context, *TLUserEditCloseFriends) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserEditCloseFriends not implemented")
}
func (UnimplementedRPCUserServer) UserSetStoriesMaxId(context.Context, *TLUserSetStoriesMaxId) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetStoriesMaxId not implemented")
}
func (UnimplementedRPCUserServer) UserSetColor(context.Context, *TLUserSetColor) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetColor not implemented")
}
func (UnimplementedRPCUserServer) UserUpdateBirthday(context.Context, *TLUserUpdateBirthday) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdateBirthday not implemented")
}
func (UnimplementedRPCUserServer) UserGetBirthdays(context.Context, *TLUserGetBirthdays) (*Vector_ContactBirthday, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetBirthdays not implemented")
}
func (UnimplementedRPCUserServer) UserSetStoriesHidden(context.Context, *TLUserSetStoriesHidden) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserSetStoriesHidden not implemented")
}
func (UnimplementedRPCUserServer) UserUpdatePersonalChannel(context.Context, *TLUserUpdatePersonalChannel) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserUpdatePersonalChannel not implemented")
}
func (UnimplementedRPCUserServer) UserGetUserIdByPhone(context.Context, *TLUserGetUserIdByPhone) (*mtproto.Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserGetUserIdByPhone not implemented")
}

// UnsafeRPCUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCUserServer will
// result in compilation errors.
type UnsafeRPCUserServer interface {
	mustEmbedUnimplementedRPCUserServer()
}

func RegisterRPCUserServer(s grpc.ServiceRegistrar, srv RPCUserServer) {
	s.RegisterService(&RPCUser_ServiceDesc, srv)
}

func _RPCUser_UserGetLastSeens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetLastSeens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetLastSeens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetLastSeens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetLastSeens(ctx, req.(*TLUserGetLastSeens))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdateLastSeen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdateLastSeen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdateLastSeen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserUpdateLastSeen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdateLastSeen(ctx, req.(*TLUserUpdateLastSeen))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetLastSeen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetLastSeen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetLastSeen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetLastSeen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetLastSeen(ctx, req.(*TLUserGetLastSeen))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetImmutableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetImmutableUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetImmutableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetImmutableUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetImmutableUser(ctx, req.(*TLUserGetImmutableUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetMutableUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetMutableUsers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetMutableUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetMutableUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetMutableUsers(ctx, req.(*TLUserGetMutableUsers))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetImmutableUserByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetImmutableUserByPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetImmutableUserByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetImmutableUserByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetImmutableUserByPhone(ctx, req.(*TLUserGetImmutableUserByPhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetImmutableUserByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetImmutableUserByToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetImmutableUserByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetImmutableUserByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetImmutableUserByToken(ctx, req.(*TLUserGetImmutableUserByToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetAccountDaysTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetAccountDaysTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetAccountDaysTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserSetAccountDaysTTL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetAccountDaysTTL(ctx, req.(*TLUserSetAccountDaysTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetAccountDaysTTL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetAccountDaysTTL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetAccountDaysTTL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetAccountDaysTTL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetAccountDaysTTL(ctx, req.(*TLUserGetAccountDaysTTL))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetNotifySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetNotifySettings(ctx, req.(*TLUserGetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetNotifySettingsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetNotifySettingsList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetNotifySettingsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetNotifySettingsList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetNotifySettingsList(ctx, req.(*TLUserGetNotifySettingsList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserSetNotifySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetNotifySettings(ctx, req.(*TLUserSetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserResetNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserResetNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserResetNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserResetNotifySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserResetNotifySettings(ctx, req.(*TLUserResetNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetAllNotifySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetAllNotifySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetAllNotifySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetAllNotifySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetAllNotifySettings(ctx, req.(*TLUserGetAllNotifySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetGlobalPrivacySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetGlobalPrivacySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetGlobalPrivacySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetGlobalPrivacySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetGlobalPrivacySettings(ctx, req.(*TLUserGetGlobalPrivacySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetGlobalPrivacySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetGlobalPrivacySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetGlobalPrivacySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserSetGlobalPrivacySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetGlobalPrivacySettings(ctx, req.(*TLUserSetGlobalPrivacySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetPrivacy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetPrivacy(ctx, req.(*TLUserGetPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserSetPrivacy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetPrivacy(ctx, req.(*TLUserSetPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserCheckPrivacy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserCheckPrivacy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserCheckPrivacy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserCheckPrivacy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserCheckPrivacy(ctx, req.(*TLUserCheckPrivacy))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserAddPeerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserAddPeerSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserAddPeerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserAddPeerSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserAddPeerSettings(ctx, req.(*TLUserAddPeerSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetPeerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetPeerSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetPeerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetPeerSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetPeerSettings(ctx, req.(*TLUserGetPeerSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserDeletePeerSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserDeletePeerSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserDeletePeerSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserDeletePeerSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserDeletePeerSettings(ctx, req.(*TLUserDeletePeerSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserChangePhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserChangePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserChangePhone(ctx, req.(*TLUserChangePhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserCreateNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserCreateNewUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserCreateNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserCreateNewUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserCreateNewUser(ctx, req.(*TLUserCreateNewUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserDeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserDeleteUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserDeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserDeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserDeleteUser(ctx, req.(*TLUserDeleteUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserBlockPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserBlockPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserBlockPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserBlockPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserBlockPeer(ctx, req.(*TLUserBlockPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUnBlockPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUnBlockPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUnBlockPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserUnBlockPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUnBlockPeer(ctx, req.(*TLUserUnBlockPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserBlockedByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserBlockedByUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserBlockedByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserBlockedByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserBlockedByUser(ctx, req.(*TLUserBlockedByUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserIsBlockedByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserIsBlockedByUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserIsBlockedByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserIsBlockedByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserIsBlockedByUser(ctx, req.(*TLUserIsBlockedByUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserCheckBlockUserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserCheckBlockUserList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserCheckBlockUserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserCheckBlockUserList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserCheckBlockUserList(ctx, req.(*TLUserCheckBlockUserList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetBlockedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetBlockedList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetBlockedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetBlockedList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetBlockedList(ctx, req.(*TLUserGetBlockedList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetContactSignUpNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetContactSignUpNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetContactSignUpNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetContactSignUpNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetContactSignUpNotification(ctx, req.(*TLUserGetContactSignUpNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetContactSignUpNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetContactSignUpNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetContactSignUpNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserSetContactSignUpNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetContactSignUpNotification(ctx, req.(*TLUserSetContactSignUpNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetContentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetContentSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetContentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetContentSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetContentSettings(ctx, req.(*TLUserGetContentSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetContentSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetContentSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetContentSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserSetContentSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetContentSettings(ctx, req.(*TLUserSetContentSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserDeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserDeleteContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserDeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserDeleteContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserDeleteContact(ctx, req.(*TLUserDeleteContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetContactList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetContactList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetContactList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetContactList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetContactList(ctx, req.(*TLUserGetContactList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetContactIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetContactIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetContactIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetContactIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetContactIdList(ctx, req.(*TLUserGetContactIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetContact(ctx, req.(*TLUserGetContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserAddContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserAddContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserAddContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserAddContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserAddContact(ctx, req.(*TLUserAddContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserCheckContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserCheckContact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserCheckContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserCheckContact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserCheckContact(ctx, req.(*TLUserCheckContact))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetImportersByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetImportersByPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetImportersByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetImportersByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetImportersByPhone(ctx, req.(*TLUserGetImportersByPhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserDeleteImportersByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserDeleteImportersByPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserDeleteImportersByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserDeleteImportersByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserDeleteImportersByPhone(ctx, req.(*TLUserDeleteImportersByPhone))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserImportContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserImportContacts)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserImportContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserImportContacts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserImportContacts(ctx, req.(*TLUserImportContacts))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetCountryCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetCountryCode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetCountryCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetCountryCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetCountryCode(ctx, req.(*TLUserGetCountryCode))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdateAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdateAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdateAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserUpdateAbout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdateAbout(ctx, req.(*TLUserUpdateAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdateFirstAndLastName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdateFirstAndLastName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdateFirstAndLastName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserUpdateFirstAndLastName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdateFirstAndLastName(ctx, req.(*TLUserUpdateFirstAndLastName))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdateVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdateVerified)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdateVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserUpdateVerified_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdateVerified(ctx, req.(*TLUserUpdateVerified))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdateUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdateUsername)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserUpdateUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdateUsername(ctx, req.(*TLUserUpdateUsername))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdateProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdateProfilePhoto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdateProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserUpdateProfilePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdateProfilePhoto(ctx, req.(*TLUserUpdateProfilePhoto))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserDeleteProfilePhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserDeleteProfilePhotos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserDeleteProfilePhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserDeleteProfilePhotos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserDeleteProfilePhotos(ctx, req.(*TLUserDeleteProfilePhotos))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetProfilePhotos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetProfilePhotos)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetProfilePhotos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetProfilePhotos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetProfilePhotos(ctx, req.(*TLUserGetProfilePhotos))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetBotCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetBotCommands)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetBotCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserSetBotCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetBotCommands(ctx, req.(*TLUserSetBotCommands))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserIsBot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserIsBot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserIsBot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserIsBot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserIsBot(ctx, req.(*TLUserIsBot))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetBotInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetBotInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetBotInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetBotInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetBotInfo(ctx, req.(*TLUserGetBotInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserCheckBots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserCheckBots)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserCheckBots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserCheckBots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserCheckBots(ctx, req.(*TLUserCheckBots))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetFullUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetFullUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetFullUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetFullUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetFullUser(ctx, req.(*TLUserGetFullUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdateEmojiStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdateEmojiStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdateEmojiStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserUpdateEmojiStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdateEmojiStatus(ctx, req.(*TLUserUpdateEmojiStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetUserDataById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetUserDataById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetUserDataById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetUserDataById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetUserDataById(ctx, req.(*TLUserGetUserDataById))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetUserDataListByIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetUserDataListByIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetUserDataListByIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetUserDataListByIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetUserDataListByIdList(ctx, req.(*TLUserGetUserDataListByIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetUserDataByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetUserDataByToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetUserDataByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetUserDataByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetUserDataByToken(ctx, req.(*TLUserGetUserDataByToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSearch(ctx, req.(*TLUserSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdateBotData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdateBotData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdateBotData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserUpdateBotData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdateBotData(ctx, req.(*TLUserUpdateBotData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetImmutableUserV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetImmutableUserV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetImmutableUserV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetImmutableUserV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetImmutableUserV2(ctx, req.(*TLUserGetImmutableUserV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetMutableUsersV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetMutableUsersV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetMutableUsersV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetMutableUsersV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetMutableUsersV2(ctx, req.(*TLUserGetMutableUsersV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserCreateNewTestUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserCreateNewTestUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserCreateNewTestUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserCreateNewTestUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserCreateNewTestUser(ctx, req.(*TLUserCreateNewTestUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserEditCloseFriends_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserEditCloseFriends)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserEditCloseFriends(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserEditCloseFriends_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserEditCloseFriends(ctx, req.(*TLUserEditCloseFriends))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetStoriesMaxId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetStoriesMaxId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetStoriesMaxId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserSetStoriesMaxId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetStoriesMaxId(ctx, req.(*TLUserSetStoriesMaxId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetColor)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserSetColor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetColor(ctx, req.(*TLUserSetColor))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdateBirthday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdateBirthday)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdateBirthday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserUpdateBirthday_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdateBirthday(ctx, req.(*TLUserUpdateBirthday))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetBirthdays_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetBirthdays)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetBirthdays(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetBirthdays_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetBirthdays(ctx, req.(*TLUserGetBirthdays))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserSetStoriesHidden_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserSetStoriesHidden)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserSetStoriesHidden(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserSetStoriesHidden_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserSetStoriesHidden(ctx, req.(*TLUserSetStoriesHidden))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserUpdatePersonalChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserUpdatePersonalChannel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserUpdatePersonalChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserUpdatePersonalChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserUpdatePersonalChannel(ctx, req.(*TLUserUpdatePersonalChannel))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCUser_UserGetUserIdByPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLUserGetUserIdByPhone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCUserServer).UserGetUserIdByPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCUser_UserGetUserIdByPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCUserServer).UserGetUserIdByPhone(ctx, req.(*TLUserGetUserIdByPhone))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCUser_ServiceDesc is the grpc.ServiceDesc for RPCUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.RPCUser",
	HandlerType: (*RPCUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "user_getLastSeens",
			Handler:    _RPCUser_UserGetLastSeens_Handler,
		},
		{
			MethodName: "user_updateLastSeen",
			Handler:    _RPCUser_UserUpdateLastSeen_Handler,
		},
		{
			MethodName: "user_getLastSeen",
			Handler:    _RPCUser_UserGetLastSeen_Handler,
		},
		{
			MethodName: "user_getImmutableUser",
			Handler:    _RPCUser_UserGetImmutableUser_Handler,
		},
		{
			MethodName: "user_getMutableUsers",
			Handler:    _RPCUser_UserGetMutableUsers_Handler,
		},
		{
			MethodName: "user_getImmutableUserByPhone",
			Handler:    _RPCUser_UserGetImmutableUserByPhone_Handler,
		},
		{
			MethodName: "user_getImmutableUserByToken",
			Handler:    _RPCUser_UserGetImmutableUserByToken_Handler,
		},
		{
			MethodName: "user_setAccountDaysTTL",
			Handler:    _RPCUser_UserSetAccountDaysTTL_Handler,
		},
		{
			MethodName: "user_getAccountDaysTTL",
			Handler:    _RPCUser_UserGetAccountDaysTTL_Handler,
		},
		{
			MethodName: "user_getNotifySettings",
			Handler:    _RPCUser_UserGetNotifySettings_Handler,
		},
		{
			MethodName: "user_getNotifySettingsList",
			Handler:    _RPCUser_UserGetNotifySettingsList_Handler,
		},
		{
			MethodName: "user_setNotifySettings",
			Handler:    _RPCUser_UserSetNotifySettings_Handler,
		},
		{
			MethodName: "user_resetNotifySettings",
			Handler:    _RPCUser_UserResetNotifySettings_Handler,
		},
		{
			MethodName: "user_getAllNotifySettings",
			Handler:    _RPCUser_UserGetAllNotifySettings_Handler,
		},
		{
			MethodName: "user_getGlobalPrivacySettings",
			Handler:    _RPCUser_UserGetGlobalPrivacySettings_Handler,
		},
		{
			MethodName: "user_setGlobalPrivacySettings",
			Handler:    _RPCUser_UserSetGlobalPrivacySettings_Handler,
		},
		{
			MethodName: "user_getPrivacy",
			Handler:    _RPCUser_UserGetPrivacy_Handler,
		},
		{
			MethodName: "user_setPrivacy",
			Handler:    _RPCUser_UserSetPrivacy_Handler,
		},
		{
			MethodName: "user_checkPrivacy",
			Handler:    _RPCUser_UserCheckPrivacy_Handler,
		},
		{
			MethodName: "user_addPeerSettings",
			Handler:    _RPCUser_UserAddPeerSettings_Handler,
		},
		{
			MethodName: "user_getPeerSettings",
			Handler:    _RPCUser_UserGetPeerSettings_Handler,
		},
		{
			MethodName: "user_deletePeerSettings",
			Handler:    _RPCUser_UserDeletePeerSettings_Handler,
		},
		{
			MethodName: "user_changePhone",
			Handler:    _RPCUser_UserChangePhone_Handler,
		},
		{
			MethodName: "user_createNewUser",
			Handler:    _RPCUser_UserCreateNewUser_Handler,
		},
		{
			MethodName: "user_deleteUser",
			Handler:    _RPCUser_UserDeleteUser_Handler,
		},
		{
			MethodName: "user_blockPeer",
			Handler:    _RPCUser_UserBlockPeer_Handler,
		},
		{
			MethodName: "user_unBlockPeer",
			Handler:    _RPCUser_UserUnBlockPeer_Handler,
		},
		{
			MethodName: "user_blockedByUser",
			Handler:    _RPCUser_UserBlockedByUser_Handler,
		},
		{
			MethodName: "user_isBlockedByUser",
			Handler:    _RPCUser_UserIsBlockedByUser_Handler,
		},
		{
			MethodName: "user_checkBlockUserList",
			Handler:    _RPCUser_UserCheckBlockUserList_Handler,
		},
		{
			MethodName: "user_getBlockedList",
			Handler:    _RPCUser_UserGetBlockedList_Handler,
		},
		{
			MethodName: "user_getContactSignUpNotification",
			Handler:    _RPCUser_UserGetContactSignUpNotification_Handler,
		},
		{
			MethodName: "user_setContactSignUpNotification",
			Handler:    _RPCUser_UserSetContactSignUpNotification_Handler,
		},
		{
			MethodName: "user_getContentSettings",
			Handler:    _RPCUser_UserGetContentSettings_Handler,
		},
		{
			MethodName: "user_setContentSettings",
			Handler:    _RPCUser_UserSetContentSettings_Handler,
		},
		{
			MethodName: "user_deleteContact",
			Handler:    _RPCUser_UserDeleteContact_Handler,
		},
		{
			MethodName: "user_getContactList",
			Handler:    _RPCUser_UserGetContactList_Handler,
		},
		{
			MethodName: "user_getContactIdList",
			Handler:    _RPCUser_UserGetContactIdList_Handler,
		},
		{
			MethodName: "user_getContact",
			Handler:    _RPCUser_UserGetContact_Handler,
		},
		{
			MethodName: "user_addContact",
			Handler:    _RPCUser_UserAddContact_Handler,
		},
		{
			MethodName: "user_checkContact",
			Handler:    _RPCUser_UserCheckContact_Handler,
		},
		{
			MethodName: "user_getImportersByPhone",
			Handler:    _RPCUser_UserGetImportersByPhone_Handler,
		},
		{
			MethodName: "user_deleteImportersByPhone",
			Handler:    _RPCUser_UserDeleteImportersByPhone_Handler,
		},
		{
			MethodName: "user_importContacts",
			Handler:    _RPCUser_UserImportContacts_Handler,
		},
		{
			MethodName: "user_getCountryCode",
			Handler:    _RPCUser_UserGetCountryCode_Handler,
		},
		{
			MethodName: "user_updateAbout",
			Handler:    _RPCUser_UserUpdateAbout_Handler,
		},
		{
			MethodName: "user_updateFirstAndLastName",
			Handler:    _RPCUser_UserUpdateFirstAndLastName_Handler,
		},
		{
			MethodName: "user_updateVerified",
			Handler:    _RPCUser_UserUpdateVerified_Handler,
		},
		{
			MethodName: "user_updateUsername",
			Handler:    _RPCUser_UserUpdateUsername_Handler,
		},
		{
			MethodName: "user_updateProfilePhoto",
			Handler:    _RPCUser_UserUpdateProfilePhoto_Handler,
		},
		{
			MethodName: "user_deleteProfilePhotos",
			Handler:    _RPCUser_UserDeleteProfilePhotos_Handler,
		},
		{
			MethodName: "user_getProfilePhotos",
			Handler:    _RPCUser_UserGetProfilePhotos_Handler,
		},
		{
			MethodName: "user_setBotCommands",
			Handler:    _RPCUser_UserSetBotCommands_Handler,
		},
		{
			MethodName: "user_isBot",
			Handler:    _RPCUser_UserIsBot_Handler,
		},
		{
			MethodName: "user_getBotInfo",
			Handler:    _RPCUser_UserGetBotInfo_Handler,
		},
		{
			MethodName: "user_checkBots",
			Handler:    _RPCUser_UserCheckBots_Handler,
		},
		{
			MethodName: "user_getFullUser",
			Handler:    _RPCUser_UserGetFullUser_Handler,
		},
		{
			MethodName: "user_updateEmojiStatus",
			Handler:    _RPCUser_UserUpdateEmojiStatus_Handler,
		},
		{
			MethodName: "user_getUserDataById",
			Handler:    _RPCUser_UserGetUserDataById_Handler,
		},
		{
			MethodName: "user_getUserDataListByIdList",
			Handler:    _RPCUser_UserGetUserDataListByIdList_Handler,
		},
		{
			MethodName: "user_getUserDataByToken",
			Handler:    _RPCUser_UserGetUserDataByToken_Handler,
		},
		{
			MethodName: "user_search",
			Handler:    _RPCUser_UserSearch_Handler,
		},
		{
			MethodName: "user_updateBotData",
			Handler:    _RPCUser_UserUpdateBotData_Handler,
		},
		{
			MethodName: "user_getImmutableUserV2",
			Handler:    _RPCUser_UserGetImmutableUserV2_Handler,
		},
		{
			MethodName: "user_getMutableUsersV2",
			Handler:    _RPCUser_UserGetMutableUsersV2_Handler,
		},
		{
			MethodName: "user_createNewTestUser",
			Handler:    _RPCUser_UserCreateNewTestUser_Handler,
		},
		{
			MethodName: "user_editCloseFriends",
			Handler:    _RPCUser_UserEditCloseFriends_Handler,
		},
		{
			MethodName: "user_setStoriesMaxId",
			Handler:    _RPCUser_UserSetStoriesMaxId_Handler,
		},
		{
			MethodName: "user_setColor",
			Handler:    _RPCUser_UserSetColor_Handler,
		},
		{
			MethodName: "user_updateBirthday",
			Handler:    _RPCUser_UserUpdateBirthday_Handler,
		},
		{
			MethodName: "user_getBirthdays",
			Handler:    _RPCUser_UserGetBirthdays_Handler,
		},
		{
			MethodName: "user_setStoriesHidden",
			Handler:    _RPCUser_UserSetStoriesHidden_Handler,
		},
		{
			MethodName: "user_updatePersonalChannel",
			Handler:    _RPCUser_UserUpdatePersonalChannel_Handler,
		},
		{
			MethodName: "user_getUserIdByPhone",
			Handler:    _RPCUser_UserGetUserIdByPhone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.tl.proto",
}
