//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: username.tl.proto

package username

import (
	mtproto "github.com/teamgram/proto/mtproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLConstructor int32

const (
	TLConstructor_CRC32_UNKNOWN                        TLConstructor = 0
	TLConstructor_CRC32_usernameNotExisted             TLConstructor = -885195923
	TLConstructor_CRC32_usernameExisted                TLConstructor = -1394084659
	TLConstructor_CRC32_usernameExistedNotMe           TLConstructor = -803256399
	TLConstructor_CRC32_usernameExistedIsMe            TLConstructor = -2024900751
	TLConstructor_CRC32_usernameData                   TLConstructor = -1438646081
	TLConstructor_CRC32_username_getAccountUsername    TLConstructor = 154073301
	TLConstructor_CRC32_username_checkAccountUsername  TLConstructor = 1240985861
	TLConstructor_CRC32_username_getChannelUsername    TLConstructor = -2038134827
	TLConstructor_CRC32_username_checkChannelUsername  TLConstructor = 651476637
	TLConstructor_CRC32_username_updateUsernameByPeer  TLConstructor = 1718205916
	TLConstructor_CRC32_username_checkUsername         TLConstructor = 684369621
	TLConstructor_CRC32_username_updateUsername        TLConstructor = 1389777971
	TLConstructor_CRC32_username_deleteUsername        TLConstructor = -1065913464
	TLConstructor_CRC32_username_resolveUsername       TLConstructor = 2008689862
	TLConstructor_CRC32_username_getListByUsernameList TLConstructor = 1218942797
	TLConstructor_CRC32_username_deleteUsernameByPeer  TLConstructor = 507822189
	TLConstructor_CRC32_username_search                TLConstructor = -391798010
)

// Enum value maps for TLConstructor.
var (
	TLConstructor_name = map[int32]string{
		0:           "CRC32_UNKNOWN",
		-885195923:  "CRC32_usernameNotExisted",
		-1394084659: "CRC32_usernameExisted",
		-803256399:  "CRC32_usernameExistedNotMe",
		-2024900751: "CRC32_usernameExistedIsMe",
		-1438646081: "CRC32_usernameData",
		154073301:   "CRC32_username_getAccountUsername",
		1240985861:  "CRC32_username_checkAccountUsername",
		-2038134827: "CRC32_username_getChannelUsername",
		651476637:   "CRC32_username_checkChannelUsername",
		1718205916:  "CRC32_username_updateUsernameByPeer",
		684369621:   "CRC32_username_checkUsername",
		1389777971:  "CRC32_username_updateUsername",
		-1065913464: "CRC32_username_deleteUsername",
		2008689862:  "CRC32_username_resolveUsername",
		1218942797:  "CRC32_username_getListByUsernameList",
		507822189:   "CRC32_username_deleteUsernameByPeer",
		-391798010:  "CRC32_username_search",
	}
	TLConstructor_value = map[string]int32{
		"CRC32_UNKNOWN":                        0,
		"CRC32_usernameNotExisted":             -885195923,
		"CRC32_usernameExisted":                -1394084659,
		"CRC32_usernameExistedNotMe":           -803256399,
		"CRC32_usernameExistedIsMe":            -2024900751,
		"CRC32_usernameData":                   -1438646081,
		"CRC32_username_getAccountUsername":    154073301,
		"CRC32_username_checkAccountUsername":  1240985861,
		"CRC32_username_getChannelUsername":    -2038134827,
		"CRC32_username_checkChannelUsername":  651476637,
		"CRC32_username_updateUsernameByPeer":  1718205916,
		"CRC32_username_checkUsername":         684369621,
		"CRC32_username_updateUsername":        1389777971,
		"CRC32_username_deleteUsername":        -1065913464,
		"CRC32_username_resolveUsername":       2008689862,
		"CRC32_username_getListByUsernameList": 1218942797,
		"CRC32_username_deleteUsernameByPeer":  507822189,
		"CRC32_username_search":                -391798010,
	}
)

func (x TLConstructor) Enum() *TLConstructor {
	p := new(TLConstructor)
	*p = x
	return p
}

func (x TLConstructor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLConstructor) Descriptor() protoreflect.EnumDescriptor {
	return file_username_tl_proto_enumTypes[0].Descriptor()
}

func (TLConstructor) Type() protoreflect.EnumType {
	return &file_username_tl_proto_enumTypes[0]
}

func (x TLConstructor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLConstructor.Descriptor instead.
func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{0}
}

// UsernameData <--
//   - TL_usernameData
type UsernameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=username.TLConstructor" json:"constructor,omitempty"`
	Username      string        `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Peer          *mtproto.Peer `protobuf:"bytes,4,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (x *UsernameData) Reset() {
	*x = UsernameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsernameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernameData) ProtoMessage() {}

func (x *UsernameData) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernameData.ProtoReflect.Descriptor instead.
func (*UsernameData) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{0}
}

func (x *UsernameData) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *UsernameData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *UsernameData) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *UsernameData) GetPeer() *mtproto.Peer {
	if x != nil {
		return x.Peer
	}
	return nil
}

type TLUsernameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *UsernameData `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLUsernameData) Reset() {
	*x = TLUsernameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameData) ProtoMessage() {}

func (x *TLUsernameData) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameData.ProtoReflect.Descriptor instead.
func (*TLUsernameData) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{1}
}

func (x *TLUsernameData) GetData2() *UsernameData {
	if x != nil {
		return x.Data2
	}
	return nil
}

// UsernameExist <--
//   - TL_usernameNotExisted
//   - TL_usernameExisted
//   - TL_usernameExistedNotMe
//   - TL_usernameExistedIsMe
type UsernameExist struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=username.TLConstructor" json:"constructor,omitempty"`
}

func (x *UsernameExist) Reset() {
	*x = UsernameExist{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsernameExist) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsernameExist) ProtoMessage() {}

func (x *UsernameExist) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsernameExist.ProtoReflect.Descriptor instead.
func (*UsernameExist) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{2}
}

func (x *UsernameExist) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *UsernameExist) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

type TLUsernameNotExisted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *UsernameExist `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLUsernameNotExisted) Reset() {
	*x = TLUsernameNotExisted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameNotExisted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameNotExisted) ProtoMessage() {}

func (x *TLUsernameNotExisted) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameNotExisted.ProtoReflect.Descriptor instead.
func (*TLUsernameNotExisted) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{3}
}

func (x *TLUsernameNotExisted) GetData2() *UsernameExist {
	if x != nil {
		return x.Data2
	}
	return nil
}

type TLUsernameExisted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *UsernameExist `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLUsernameExisted) Reset() {
	*x = TLUsernameExisted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameExisted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameExisted) ProtoMessage() {}

func (x *TLUsernameExisted) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameExisted.ProtoReflect.Descriptor instead.
func (*TLUsernameExisted) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{4}
}

func (x *TLUsernameExisted) GetData2() *UsernameExist {
	if x != nil {
		return x.Data2
	}
	return nil
}

type TLUsernameExistedNotMe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *UsernameExist `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLUsernameExistedNotMe) Reset() {
	*x = TLUsernameExistedNotMe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameExistedNotMe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameExistedNotMe) ProtoMessage() {}

func (x *TLUsernameExistedNotMe) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameExistedNotMe.ProtoReflect.Descriptor instead.
func (*TLUsernameExistedNotMe) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{5}
}

func (x *TLUsernameExistedNotMe) GetData2() *UsernameExist {
	if x != nil {
		return x.Data2
	}
	return nil
}

type TLUsernameExistedIsMe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *UsernameExist `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLUsernameExistedIsMe) Reset() {
	*x = TLUsernameExistedIsMe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameExistedIsMe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameExistedIsMe) ProtoMessage() {}

func (x *TLUsernameExistedIsMe) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameExistedIsMe.ProtoReflect.Descriptor instead.
func (*TLUsernameExistedIsMe) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{6}
}

func (x *TLUsernameExistedIsMe) GetData2() *UsernameExist {
	if x != nil {
		return x.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUsernameGetAccountUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=username.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *TLUsernameGetAccountUsername) Reset() {
	*x = TLUsernameGetAccountUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameGetAccountUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameGetAccountUsername) ProtoMessage() {}

func (x *TLUsernameGetAccountUsername) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameGetAccountUsername.ProtoReflect.Descriptor instead.
func (*TLUsernameGetAccountUsername) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{7}
}

func (x *TLUsernameGetAccountUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsernameGetAccountUsername) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUsernameCheckAccountUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=username.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Username    string        `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *TLUsernameCheckAccountUsername) Reset() {
	*x = TLUsernameCheckAccountUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameCheckAccountUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameCheckAccountUsername) ProtoMessage() {}

func (x *TLUsernameCheckAccountUsername) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameCheckAccountUsername.ProtoReflect.Descriptor instead.
func (*TLUsernameCheckAccountUsername) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{8}
}

func (x *TLUsernameCheckAccountUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsernameCheckAccountUsername) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLUsernameCheckAccountUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUsernameGetChannelUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=username.TLConstructor" json:"constructor,omitempty"`
	ChannelId   int64         `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *TLUsernameGetChannelUsername) Reset() {
	*x = TLUsernameGetChannelUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameGetChannelUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameGetChannelUsername) ProtoMessage() {}

func (x *TLUsernameGetChannelUsername) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameGetChannelUsername.ProtoReflect.Descriptor instead.
func (*TLUsernameGetChannelUsername) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{9}
}

func (x *TLUsernameGetChannelUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsernameGetChannelUsername) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUsernameCheckChannelUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=username.TLConstructor" json:"constructor,omitempty"`
	ChannelId   int64         `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Username    string        `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *TLUsernameCheckChannelUsername) Reset() {
	*x = TLUsernameCheckChannelUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameCheckChannelUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameCheckChannelUsername) ProtoMessage() {}

func (x *TLUsernameCheckChannelUsername) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameCheckChannelUsername.ProtoReflect.Descriptor instead.
func (*TLUsernameCheckChannelUsername) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{10}
}

func (x *TLUsernameCheckChannelUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsernameCheckChannelUsername) GetChannelId() int64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *TLUsernameCheckChannelUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUsernameUpdateUsernameByPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=username.TLConstructor" json:"constructor,omitempty"`
	PeerType    int32         `protobuf:"varint,3,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,4,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Username    string        `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *TLUsernameUpdateUsernameByPeer) Reset() {
	*x = TLUsernameUpdateUsernameByPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameUpdateUsernameByPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameUpdateUsernameByPeer) ProtoMessage() {}

func (x *TLUsernameUpdateUsernameByPeer) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameUpdateUsernameByPeer.ProtoReflect.Descriptor instead.
func (*TLUsernameUpdateUsernameByPeer) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{11}
}

func (x *TLUsernameUpdateUsernameByPeer) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsernameUpdateUsernameByPeer) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLUsernameUpdateUsernameByPeer) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLUsernameUpdateUsernameByPeer) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUsernameCheckUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=username.TLConstructor" json:"constructor,omitempty"`
	Username    string        `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *TLUsernameCheckUsername) Reset() {
	*x = TLUsernameCheckUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameCheckUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameCheckUsername) ProtoMessage() {}

func (x *TLUsernameCheckUsername) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameCheckUsername.ProtoReflect.Descriptor instead.
func (*TLUsernameCheckUsername) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{12}
}

func (x *TLUsernameCheckUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsernameCheckUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUsernameUpdateUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=username.TLConstructor" json:"constructor,omitempty"`
	PeerType    int32         `protobuf:"varint,3,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,4,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Username    string        `protobuf:"bytes,5,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *TLUsernameUpdateUsername) Reset() {
	*x = TLUsernameUpdateUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameUpdateUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameUpdateUsername) ProtoMessage() {}

func (x *TLUsernameUpdateUsername) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameUpdateUsername.ProtoReflect.Descriptor instead.
func (*TLUsernameUpdateUsername) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{13}
}

func (x *TLUsernameUpdateUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsernameUpdateUsername) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLUsernameUpdateUsername) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLUsernameUpdateUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUsernameDeleteUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=username.TLConstructor" json:"constructor,omitempty"`
	Username    string        `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *TLUsernameDeleteUsername) Reset() {
	*x = TLUsernameDeleteUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameDeleteUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameDeleteUsername) ProtoMessage() {}

func (x *TLUsernameDeleteUsername) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameDeleteUsername.ProtoReflect.Descriptor instead.
func (*TLUsernameDeleteUsername) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{14}
}

func (x *TLUsernameDeleteUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsernameDeleteUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUsernameResolveUsername struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=username.TLConstructor" json:"constructor,omitempty"`
	Username    string        `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
}

func (x *TLUsernameResolveUsername) Reset() {
	*x = TLUsernameResolveUsername{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameResolveUsername) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameResolveUsername) ProtoMessage() {}

func (x *TLUsernameResolveUsername) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameResolveUsername.ProtoReflect.Descriptor instead.
func (*TLUsernameResolveUsername) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{15}
}

func (x *TLUsernameResolveUsername) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsernameResolveUsername) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLUsernameGetListByUsernameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=username.TLConstructor" json:"constructor,omitempty"`
	Names       []string      `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *TLUsernameGetListByUsernameList) Reset() {
	*x = TLUsernameGetListByUsernameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameGetListByUsernameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameGetListByUsernameList) ProtoMessage() {}

func (x *TLUsernameGetListByUsernameList) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameGetListByUsernameList.ProtoReflect.Descriptor instead.
func (*TLUsernameGetListByUsernameList) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{16}
}

func (x *TLUsernameGetListByUsernameList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsernameGetListByUsernameList) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLUsernameDeleteUsernameByPeer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=username.TLConstructor" json:"constructor,omitempty"`
	PeerType    int32         `protobuf:"varint,3,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,4,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLUsernameDeleteUsernameByPeer) Reset() {
	*x = TLUsernameDeleteUsernameByPeer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameDeleteUsernameByPeer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameDeleteUsernameByPeer) ProtoMessage() {}

func (x *TLUsernameDeleteUsernameByPeer) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameDeleteUsernameByPeer.ProtoReflect.Descriptor instead.
func (*TLUsernameDeleteUsernameByPeer) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{17}
}

func (x *TLUsernameDeleteUsernameByPeer) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsernameDeleteUsernameByPeer) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLUsernameDeleteUsernameByPeer) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLUsernameSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor      TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=username.TLConstructor" json:"constructor,omitempty"`
	Q                string        `protobuf:"bytes,3,opt,name=q,proto3" json:"q,omitempty"`
	ExcludedContacts []int64       `protobuf:"varint,4,rep,packed,name=excluded_contacts,json=excludedContacts,proto3" json:"excluded_contacts,omitempty"`
	Limit            int32         `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TLUsernameSearch) Reset() {
	*x = TLUsernameSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLUsernameSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLUsernameSearch) ProtoMessage() {}

func (x *TLUsernameSearch) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLUsernameSearch.ProtoReflect.Descriptor instead.
func (*TLUsernameSearch) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{18}
}

func (x *TLUsernameSearch) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLUsernameSearch) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TLUsernameSearch) GetExcludedContacts() []int64 {
	if x != nil {
		return x.ExcludedContacts
	}
	return nil
}

func (x *TLUsernameSearch) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// --------------------------------------------------------------------------------------------
// Vector api result type
type Vector_UsernameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*UsernameData `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_UsernameData) Reset() {
	*x = Vector_UsernameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_username_tl_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_UsernameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_UsernameData) ProtoMessage() {}

func (x *Vector_UsernameData) ProtoReflect() protoreflect.Message {
	mi := &file_username_tl_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_UsernameData.ProtoReflect.Descriptor instead.
func (*Vector_UsernameData) Descriptor() ([]byte, []int) {
	return file_username_tl_proto_rawDescGZIP(), []int{19}
}

func (x *Vector_UsernameData) GetDatas() []*UsernameData {
	if x != nil {
		return x.Datas
	}
	return nil
}

var File_username_tl_proto protoreflect.FileDescriptor

var file_username_tl_proto_rawDesc = []byte{
	0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x74, 0x6c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e,
	0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x01, 0x0a, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x0f,
	0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x2c, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0x71, 0x0a,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x22, 0x46, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0x43, 0x0a, 0x12, 0x54, 0x4c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x2d,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0x48, 0x0a,
	0x17, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x4d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0x47, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x49, 0x73, 0x4d,
	0x65, 0x12, 0x2d, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32,
	0x22, 0x74, 0x0a, 0x1e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7a, 0x0a, 0x1e, 0x54,
	0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x98, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x42, 0x79, 0x50, 0x65, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x72, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x73, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x1b, 0x54, 0x4c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x74, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x67,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x50, 0x65, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x12,
	0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x12, 0x39, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0c, 0x0a,
	0x01, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x10, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x43,
	0x0a, 0x13, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2c, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x2a, 0xe0, 0x05, 0x0a, 0x0d, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x18, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x10, 0xed, 0xf6, 0xf3, 0xd9, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x22, 0x0a, 0x15, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x10, 0xcd, 0xe9, 0x9f, 0xe7, 0xfa, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1a, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x4d,
	0x65, 0x10, 0xb1, 0x8f, 0xfd, 0x80, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x19,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x49, 0x73, 0x4d, 0x65, 0x10, 0xf1, 0xee, 0xb9, 0xba, 0xf8, 0xff,
	0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x12, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x10, 0xbf, 0x81, 0x80, 0xd2, 0xfa,
	0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x28, 0x0a, 0x21, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0xd5, 0xf1, 0xbb, 0x49, 0x12,
	0x2b, 0x0a, 0x23, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0x85, 0xe2, 0xdf, 0xcf, 0x04, 0x12, 0x2e, 0x0a, 0x21,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x67,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x10, 0xd5, 0x8f, 0x92, 0xb4, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2b, 0x0a, 0x23,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x10, 0x9d, 0xfd, 0xd2, 0xb6, 0x02, 0x12, 0x2b, 0x0a, 0x23, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x50, 0x65, 0x65, 0x72,
	0x10, 0xdc, 0xfb, 0xa6, 0xb3, 0x06, 0x12, 0x24, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0xd5, 0xcd, 0xaa, 0xc6, 0x02, 0x12, 0x25, 0x0a, 0x1d,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x10, 0xb3, 0xa8,
	0xd9, 0x96, 0x05, 0x12, 0x2a, 0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x10, 0x88, 0xe7, 0xdd, 0x83, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x26, 0x0a, 0x1e, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x10, 0xc6, 0xd9, 0xe8, 0xbd, 0x07, 0x12, 0x2c, 0x0a, 0x24, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x10,
	0xcd, 0xae, 0x9e, 0xc5, 0x04, 0x12, 0x2b, 0x0a, 0x23, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x50, 0x65, 0x65, 0x72, 0x10, 0xed, 0x80, 0x93,
	0xf2, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10, 0x86, 0xc6, 0x96, 0xc5,
	0xfe, 0xff, 0xff, 0xff, 0xff, 0x01, 0x32, 0xf3, 0x08, 0x0a, 0x0b, 0x52, 0x50, 0x43, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x61, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a,
	0x16, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x1d, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x61, 0x0a, 0x1b, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x65,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x28, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x16, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x1d, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x1a, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x1d,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x50, 0x65, 0x65, 0x72, 0x12, 0x2a, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x79, 0x50, 0x65, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x16, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e,
	0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x17, 0x2e, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x24, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x24, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x18, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e,
	0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x1e,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2b,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x1d,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x79, 0x50, 0x65, 0x65, 0x72, 0x12, 0x2a, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x79, 0x50, 0x65, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1c, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x1a, 0x1d, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x55, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x42, 0x47, 0x5a, 0x45,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x67,
	0x72, 0x61, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x62, 0x69, 0x7a, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_username_tl_proto_rawDescOnce sync.Once
	file_username_tl_proto_rawDescData = file_username_tl_proto_rawDesc
)

func file_username_tl_proto_rawDescGZIP() []byte {
	file_username_tl_proto_rawDescOnce.Do(func() {
		file_username_tl_proto_rawDescData = protoimpl.X.CompressGZIP(file_username_tl_proto_rawDescData)
	})
	return file_username_tl_proto_rawDescData
}

var file_username_tl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_username_tl_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_username_tl_proto_goTypes = []interface{}{
	(TLConstructor)(0),                      // 0: username.TLConstructor
	(*UsernameData)(nil),                    // 1: username.UsernameData
	(*TLUsernameData)(nil),                  // 2: username.TL_usernameData
	(*UsernameExist)(nil),                   // 3: username.UsernameExist
	(*TLUsernameNotExisted)(nil),            // 4: username.TL_usernameNotExisted
	(*TLUsernameExisted)(nil),               // 5: username.TL_usernameExisted
	(*TLUsernameExistedNotMe)(nil),          // 6: username.TL_usernameExistedNotMe
	(*TLUsernameExistedIsMe)(nil),           // 7: username.TL_usernameExistedIsMe
	(*TLUsernameGetAccountUsername)(nil),    // 8: username.TL_username_getAccountUsername
	(*TLUsernameCheckAccountUsername)(nil),  // 9: username.TL_username_checkAccountUsername
	(*TLUsernameGetChannelUsername)(nil),    // 10: username.TL_username_getChannelUsername
	(*TLUsernameCheckChannelUsername)(nil),  // 11: username.TL_username_checkChannelUsername
	(*TLUsernameUpdateUsernameByPeer)(nil),  // 12: username.TL_username_updateUsernameByPeer
	(*TLUsernameCheckUsername)(nil),         // 13: username.TL_username_checkUsername
	(*TLUsernameUpdateUsername)(nil),        // 14: username.TL_username_updateUsername
	(*TLUsernameDeleteUsername)(nil),        // 15: username.TL_username_deleteUsername
	(*TLUsernameResolveUsername)(nil),       // 16: username.TL_username_resolveUsername
	(*TLUsernameGetListByUsernameList)(nil), // 17: username.TL_username_getListByUsernameList
	(*TLUsernameDeleteUsernameByPeer)(nil),  // 18: username.TL_username_deleteUsernameByPeer
	(*TLUsernameSearch)(nil),                // 19: username.TL_username_search
	(*Vector_UsernameData)(nil),             // 20: username.Vector_UsernameData
	(*mtproto.Peer)(nil),                    // 21: mtproto.Peer
	(*mtproto.Bool)(nil),                    // 22: mtproto.Bool
}
var file_username_tl_proto_depIdxs = []int32{
	0,  // 0: username.UsernameData.constructor:type_name -> username.TLConstructor
	21, // 1: username.UsernameData.peer:type_name -> mtproto.Peer
	1,  // 2: username.TL_usernameData.data2:type_name -> username.UsernameData
	0,  // 3: username.UsernameExist.constructor:type_name -> username.TLConstructor
	3,  // 4: username.TL_usernameNotExisted.data2:type_name -> username.UsernameExist
	3,  // 5: username.TL_usernameExisted.data2:type_name -> username.UsernameExist
	3,  // 6: username.TL_usernameExistedNotMe.data2:type_name -> username.UsernameExist
	3,  // 7: username.TL_usernameExistedIsMe.data2:type_name -> username.UsernameExist
	0,  // 8: username.TL_username_getAccountUsername.constructor:type_name -> username.TLConstructor
	0,  // 9: username.TL_username_checkAccountUsername.constructor:type_name -> username.TLConstructor
	0,  // 10: username.TL_username_getChannelUsername.constructor:type_name -> username.TLConstructor
	0,  // 11: username.TL_username_checkChannelUsername.constructor:type_name -> username.TLConstructor
	0,  // 12: username.TL_username_updateUsernameByPeer.constructor:type_name -> username.TLConstructor
	0,  // 13: username.TL_username_checkUsername.constructor:type_name -> username.TLConstructor
	0,  // 14: username.TL_username_updateUsername.constructor:type_name -> username.TLConstructor
	0,  // 15: username.TL_username_deleteUsername.constructor:type_name -> username.TLConstructor
	0,  // 16: username.TL_username_resolveUsername.constructor:type_name -> username.TLConstructor
	0,  // 17: username.TL_username_getListByUsernameList.constructor:type_name -> username.TLConstructor
	0,  // 18: username.TL_username_deleteUsernameByPeer.constructor:type_name -> username.TLConstructor
	0,  // 19: username.TL_username_search.constructor:type_name -> username.TLConstructor
	1,  // 20: username.Vector_UsernameData.datas:type_name -> username.UsernameData
	8,  // 21: username.RPCUsername.username_getAccountUsername:input_type -> username.TL_username_getAccountUsername
	9,  // 22: username.RPCUsername.username_checkAccountUsername:input_type -> username.TL_username_checkAccountUsername
	10, // 23: username.RPCUsername.username_getChannelUsername:input_type -> username.TL_username_getChannelUsername
	11, // 24: username.RPCUsername.username_checkChannelUsername:input_type -> username.TL_username_checkChannelUsername
	12, // 25: username.RPCUsername.username_updateUsernameByPeer:input_type -> username.TL_username_updateUsernameByPeer
	13, // 26: username.RPCUsername.username_checkUsername:input_type -> username.TL_username_checkUsername
	14, // 27: username.RPCUsername.username_updateUsername:input_type -> username.TL_username_updateUsername
	15, // 28: username.RPCUsername.username_deleteUsername:input_type -> username.TL_username_deleteUsername
	16, // 29: username.RPCUsername.username_resolveUsername:input_type -> username.TL_username_resolveUsername
	17, // 30: username.RPCUsername.username_getListByUsernameList:input_type -> username.TL_username_getListByUsernameList
	18, // 31: username.RPCUsername.username_deleteUsernameByPeer:input_type -> username.TL_username_deleteUsernameByPeer
	19, // 32: username.RPCUsername.username_search:input_type -> username.TL_username_search
	1,  // 33: username.RPCUsername.username_getAccountUsername:output_type -> username.UsernameData
	3,  // 34: username.RPCUsername.username_checkAccountUsername:output_type -> username.UsernameExist
	1,  // 35: username.RPCUsername.username_getChannelUsername:output_type -> username.UsernameData
	3,  // 36: username.RPCUsername.username_checkChannelUsername:output_type -> username.UsernameExist
	22, // 37: username.RPCUsername.username_updateUsernameByPeer:output_type -> mtproto.Bool
	3,  // 38: username.RPCUsername.username_checkUsername:output_type -> username.UsernameExist
	22, // 39: username.RPCUsername.username_updateUsername:output_type -> mtproto.Bool
	22, // 40: username.RPCUsername.username_deleteUsername:output_type -> mtproto.Bool
	21, // 41: username.RPCUsername.username_resolveUsername:output_type -> mtproto.Peer
	20, // 42: username.RPCUsername.username_getListByUsernameList:output_type -> username.Vector_UsernameData
	22, // 43: username.RPCUsername.username_deleteUsernameByPeer:output_type -> mtproto.Bool
	20, // 44: username.RPCUsername.username_search:output_type -> username.Vector_UsernameData
	33, // [33:45] is the sub-list for method output_type
	21, // [21:33] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_username_tl_proto_init() }
func file_username_tl_proto_init() {
	if File_username_tl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_username_tl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsernameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsernameExist); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameNotExisted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameExisted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameExistedNotMe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameExistedIsMe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameGetAccountUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameCheckAccountUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameGetChannelUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameCheckChannelUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameUpdateUsernameByPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameCheckUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameUpdateUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameDeleteUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameResolveUsername); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameGetListByUsernameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameDeleteUsernameByPeer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLUsernameSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_username_tl_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vector_UsernameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_username_tl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_username_tl_proto_goTypes,
		DependencyIndexes: file_username_tl_proto_depIdxs,
		EnumInfos:         file_username_tl_proto_enumTypes,
		MessageInfos:      file_username_tl_proto_msgTypes,
	}.Build()
	File_username_tl_proto = out.File
	file_username_tl_proto_rawDesc = nil
	file_username_tl_proto_goTypes = nil
	file_username_tl_proto_depIdxs = nil
}
