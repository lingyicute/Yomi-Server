//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: message.tl.proto

package message

import (
	context "context"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPCMessage_MessageGetUserMessage_FullMethodName                       = "/message.RPCMessage/message_getUserMessage"
	RPCMessage_MessageGetUserMessageList_FullMethodName                   = "/message.RPCMessage/message_getUserMessageList"
	RPCMessage_MessageGetUserMessageListByDataIdList_FullMethodName       = "/message.RPCMessage/message_getUserMessageListByDataIdList"
	RPCMessage_MessageGetUserMessageListByDataIdUserIdList_FullMethodName = "/message.RPCMessage/message_getUserMessageListByDataIdUserIdList"
	RPCMessage_MessageGetHistoryMessages_FullMethodName                   = "/message.RPCMessage/message_getHistoryMessages"
	RPCMessage_MessageGetHistoryMessagesCount_FullMethodName              = "/message.RPCMessage/message_getHistoryMessagesCount"
	RPCMessage_MessageGetPeerUserMessageId_FullMethodName                 = "/message.RPCMessage/message_getPeerUserMessageId"
	RPCMessage_MessageGetPeerUserMessage_FullMethodName                   = "/message.RPCMessage/message_getPeerUserMessage"
	RPCMessage_MessageSearchByMediaType_FullMethodName                    = "/message.RPCMessage/message_searchByMediaType"
	RPCMessage_MessageSearch_FullMethodName                               = "/message.RPCMessage/message_search"
	RPCMessage_MessageSearchGlobal_FullMethodName                         = "/message.RPCMessage/message_searchGlobal"
	RPCMessage_MessageSearchByPinned_FullMethodName                       = "/message.RPCMessage/message_searchByPinned"
	RPCMessage_MessageGetSearchCounter_FullMethodName                     = "/message.RPCMessage/message_getSearchCounter"
	RPCMessage_MessageSearchV2_FullMethodName                             = "/message.RPCMessage/message_searchV2"
	RPCMessage_MessageGetLastTwoPinnedMessageId_FullMethodName            = "/message.RPCMessage/message_getLastTwoPinnedMessageId"
	RPCMessage_MessageUpdatePinnedMessageId_FullMethodName                = "/message.RPCMessage/message_updatePinnedMessageId"
	RPCMessage_MessageGetPinnedMessageIdList_FullMethodName               = "/message.RPCMessage/message_getPinnedMessageIdList"
	RPCMessage_MessageUnPinAllMessages_FullMethodName                     = "/message.RPCMessage/message_unPinAllMessages"
	RPCMessage_MessageGetUnreadMentions_FullMethodName                    = "/message.RPCMessage/message_getUnreadMentions"
	RPCMessage_MessageGetUnreadMentionsCount_FullMethodName               = "/message.RPCMessage/message_getUnreadMentionsCount"
	RPCMessage_MessageGetSavedHistoryMessages_FullMethodName              = "/message.RPCMessage/message_getSavedHistoryMessages"
	RPCMessage_MessageGetOutboxReadDate_FullMethodName                    = "/message.RPCMessage/message_getOutboxReadDate"
)

// RPCMessageClient is the client API for RPCMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCMessageClient interface {
	MessageGetUserMessage(ctx context.Context, in *TLMessageGetUserMessage, opts ...grpc.CallOption) (*mtproto.MessageBox, error)
	MessageGetUserMessageList(ctx context.Context, in *TLMessageGetUserMessageList, opts ...grpc.CallOption) (*Vector_MessageBox, error)
	MessageGetUserMessageListByDataIdList(ctx context.Context, in *TLMessageGetUserMessageListByDataIdList, opts ...grpc.CallOption) (*Vector_MessageBox, error)
	MessageGetUserMessageListByDataIdUserIdList(ctx context.Context, in *TLMessageGetUserMessageListByDataIdUserIdList, opts ...grpc.CallOption) (*Vector_MessageBox, error)
	MessageGetHistoryMessages(ctx context.Context, in *TLMessageGetHistoryMessages, opts ...grpc.CallOption) (*Vector_MessageBox, error)
	MessageGetHistoryMessagesCount(ctx context.Context, in *TLMessageGetHistoryMessagesCount, opts ...grpc.CallOption) (*mtproto.Int32, error)
	MessageGetPeerUserMessageId(ctx context.Context, in *TLMessageGetPeerUserMessageId, opts ...grpc.CallOption) (*mtproto.Int32, error)
	MessageGetPeerUserMessage(ctx context.Context, in *TLMessageGetPeerUserMessage, opts ...grpc.CallOption) (*mtproto.MessageBox, error)
	MessageSearchByMediaType(ctx context.Context, in *TLMessageSearchByMediaType, opts ...grpc.CallOption) (*mtproto.MessageBoxList, error)
	MessageSearch(ctx context.Context, in *TLMessageSearch, opts ...grpc.CallOption) (*mtproto.MessageBoxList, error)
	MessageSearchGlobal(ctx context.Context, in *TLMessageSearchGlobal, opts ...grpc.CallOption) (*mtproto.MessageBoxList, error)
	MessageSearchByPinned(ctx context.Context, in *TLMessageSearchByPinned, opts ...grpc.CallOption) (*mtproto.MessageBoxList, error)
	MessageGetSearchCounter(ctx context.Context, in *TLMessageGetSearchCounter, opts ...grpc.CallOption) (*mtproto.Int32, error)
	MessageSearchV2(ctx context.Context, in *TLMessageSearchV2, opts ...grpc.CallOption) (*mtproto.MessageBoxList, error)
	MessageGetLastTwoPinnedMessageId(ctx context.Context, in *TLMessageGetLastTwoPinnedMessageId, opts ...grpc.CallOption) (*Vector_Int, error)
	MessageUpdatePinnedMessageId(ctx context.Context, in *TLMessageUpdatePinnedMessageId, opts ...grpc.CallOption) (*mtproto.Bool, error)
	MessageGetPinnedMessageIdList(ctx context.Context, in *TLMessageGetPinnedMessageIdList, opts ...grpc.CallOption) (*Vector_Int, error)
	MessageUnPinAllMessages(ctx context.Context, in *TLMessageUnPinAllMessages, opts ...grpc.CallOption) (*Vector_Int, error)
	MessageGetUnreadMentions(ctx context.Context, in *TLMessageGetUnreadMentions, opts ...grpc.CallOption) (*Vector_MessageBox, error)
	MessageGetUnreadMentionsCount(ctx context.Context, in *TLMessageGetUnreadMentionsCount, opts ...grpc.CallOption) (*mtproto.Int32, error)
	MessageGetSavedHistoryMessages(ctx context.Context, in *TLMessageGetSavedHistoryMessages, opts ...grpc.CallOption) (*mtproto.MessageBoxList, error)
	MessageGetOutboxReadDate(ctx context.Context, in *TLMessageGetOutboxReadDate, opts ...grpc.CallOption) (*Vector_ReadParticipantDate, error)
}

type rPCMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCMessageClient(cc grpc.ClientConnInterface) RPCMessageClient {
	return &rPCMessageClient{cc}
}

func (c *rPCMessageClient) MessageGetUserMessage(ctx context.Context, in *TLMessageGetUserMessage, opts ...grpc.CallOption) (*mtproto.MessageBox, error) {
	out := new(mtproto.MessageBox)
	err := c.cc.Invoke(ctx, RPCMessage_MessageGetUserMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageGetUserMessageList(ctx context.Context, in *TLMessageGetUserMessageList, opts ...grpc.CallOption) (*Vector_MessageBox, error) {
	out := new(Vector_MessageBox)
	err := c.cc.Invoke(ctx, RPCMessage_MessageGetUserMessageList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageGetUserMessageListByDataIdList(ctx context.Context, in *TLMessageGetUserMessageListByDataIdList, opts ...grpc.CallOption) (*Vector_MessageBox, error) {
	out := new(Vector_MessageBox)
	err := c.cc.Invoke(ctx, RPCMessage_MessageGetUserMessageListByDataIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageGetUserMessageListByDataIdUserIdList(ctx context.Context, in *TLMessageGetUserMessageListByDataIdUserIdList, opts ...grpc.CallOption) (*Vector_MessageBox, error) {
	out := new(Vector_MessageBox)
	err := c.cc.Invoke(ctx, RPCMessage_MessageGetUserMessageListByDataIdUserIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageGetHistoryMessages(ctx context.Context, in *TLMessageGetHistoryMessages, opts ...grpc.CallOption) (*Vector_MessageBox, error) {
	out := new(Vector_MessageBox)
	err := c.cc.Invoke(ctx, RPCMessage_MessageGetHistoryMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageGetHistoryMessagesCount(ctx context.Context, in *TLMessageGetHistoryMessagesCount, opts ...grpc.CallOption) (*mtproto.Int32, error) {
	out := new(mtproto.Int32)
	err := c.cc.Invoke(ctx, RPCMessage_MessageGetHistoryMessagesCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageGetPeerUserMessageId(ctx context.Context, in *TLMessageGetPeerUserMessageId, opts ...grpc.CallOption) (*mtproto.Int32, error) {
	out := new(mtproto.Int32)
	err := c.cc.Invoke(ctx, RPCMessage_MessageGetPeerUserMessageId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageGetPeerUserMessage(ctx context.Context, in *TLMessageGetPeerUserMessage, opts ...grpc.CallOption) (*mtproto.MessageBox, error) {
	out := new(mtproto.MessageBox)
	err := c.cc.Invoke(ctx, RPCMessage_MessageGetPeerUserMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageSearchByMediaType(ctx context.Context, in *TLMessageSearchByMediaType, opts ...grpc.CallOption) (*mtproto.MessageBoxList, error) {
	out := new(mtproto.MessageBoxList)
	err := c.cc.Invoke(ctx, RPCMessage_MessageSearchByMediaType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageSearch(ctx context.Context, in *TLMessageSearch, opts ...grpc.CallOption) (*mtproto.MessageBoxList, error) {
	out := new(mtproto.MessageBoxList)
	err := c.cc.Invoke(ctx, RPCMessage_MessageSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageSearchGlobal(ctx context.Context, in *TLMessageSearchGlobal, opts ...grpc.CallOption) (*mtproto.MessageBoxList, error) {
	out := new(mtproto.MessageBoxList)
	err := c.cc.Invoke(ctx, RPCMessage_MessageSearchGlobal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageSearchByPinned(ctx context.Context, in *TLMessageSearchByPinned, opts ...grpc.CallOption) (*mtproto.MessageBoxList, error) {
	out := new(mtproto.MessageBoxList)
	err := c.cc.Invoke(ctx, RPCMessage_MessageSearchByPinned_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageGetSearchCounter(ctx context.Context, in *TLMessageGetSearchCounter, opts ...grpc.CallOption) (*mtproto.Int32, error) {
	out := new(mtproto.Int32)
	err := c.cc.Invoke(ctx, RPCMessage_MessageGetSearchCounter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageSearchV2(ctx context.Context, in *TLMessageSearchV2, opts ...grpc.CallOption) (*mtproto.MessageBoxList, error) {
	out := new(mtproto.MessageBoxList)
	err := c.cc.Invoke(ctx, RPCMessage_MessageSearchV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageGetLastTwoPinnedMessageId(ctx context.Context, in *TLMessageGetLastTwoPinnedMessageId, opts ...grpc.CallOption) (*Vector_Int, error) {
	out := new(Vector_Int)
	err := c.cc.Invoke(ctx, RPCMessage_MessageGetLastTwoPinnedMessageId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageUpdatePinnedMessageId(ctx context.Context, in *TLMessageUpdatePinnedMessageId, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCMessage_MessageUpdatePinnedMessageId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageGetPinnedMessageIdList(ctx context.Context, in *TLMessageGetPinnedMessageIdList, opts ...grpc.CallOption) (*Vector_Int, error) {
	out := new(Vector_Int)
	err := c.cc.Invoke(ctx, RPCMessage_MessageGetPinnedMessageIdList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageUnPinAllMessages(ctx context.Context, in *TLMessageUnPinAllMessages, opts ...grpc.CallOption) (*Vector_Int, error) {
	out := new(Vector_Int)
	err := c.cc.Invoke(ctx, RPCMessage_MessageUnPinAllMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageGetUnreadMentions(ctx context.Context, in *TLMessageGetUnreadMentions, opts ...grpc.CallOption) (*Vector_MessageBox, error) {
	out := new(Vector_MessageBox)
	err := c.cc.Invoke(ctx, RPCMessage_MessageGetUnreadMentions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageGetUnreadMentionsCount(ctx context.Context, in *TLMessageGetUnreadMentionsCount, opts ...grpc.CallOption) (*mtproto.Int32, error) {
	out := new(mtproto.Int32)
	err := c.cc.Invoke(ctx, RPCMessage_MessageGetUnreadMentionsCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageGetSavedHistoryMessages(ctx context.Context, in *TLMessageGetSavedHistoryMessages, opts ...grpc.CallOption) (*mtproto.MessageBoxList, error) {
	out := new(mtproto.MessageBoxList)
	err := c.cc.Invoke(ctx, RPCMessage_MessageGetSavedHistoryMessages_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCMessageClient) MessageGetOutboxReadDate(ctx context.Context, in *TLMessageGetOutboxReadDate, opts ...grpc.CallOption) (*Vector_ReadParticipantDate, error) {
	out := new(Vector_ReadParticipantDate)
	err := c.cc.Invoke(ctx, RPCMessage_MessageGetOutboxReadDate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCMessageServer is the server API for RPCMessage service.
// All implementations should embed UnimplementedRPCMessageServer
// for forward compatibility
type RPCMessageServer interface {
	MessageGetUserMessage(context.Context, *TLMessageGetUserMessage) (*mtproto.MessageBox, error)
	MessageGetUserMessageList(context.Context, *TLMessageGetUserMessageList) (*Vector_MessageBox, error)
	MessageGetUserMessageListByDataIdList(context.Context, *TLMessageGetUserMessageListByDataIdList) (*Vector_MessageBox, error)
	MessageGetUserMessageListByDataIdUserIdList(context.Context, *TLMessageGetUserMessageListByDataIdUserIdList) (*Vector_MessageBox, error)
	MessageGetHistoryMessages(context.Context, *TLMessageGetHistoryMessages) (*Vector_MessageBox, error)
	MessageGetHistoryMessagesCount(context.Context, *TLMessageGetHistoryMessagesCount) (*mtproto.Int32, error)
	MessageGetPeerUserMessageId(context.Context, *TLMessageGetPeerUserMessageId) (*mtproto.Int32, error)
	MessageGetPeerUserMessage(context.Context, *TLMessageGetPeerUserMessage) (*mtproto.MessageBox, error)
	MessageSearchByMediaType(context.Context, *TLMessageSearchByMediaType) (*mtproto.MessageBoxList, error)
	MessageSearch(context.Context, *TLMessageSearch) (*mtproto.MessageBoxList, error)
	MessageSearchGlobal(context.Context, *TLMessageSearchGlobal) (*mtproto.MessageBoxList, error)
	MessageSearchByPinned(context.Context, *TLMessageSearchByPinned) (*mtproto.MessageBoxList, error)
	MessageGetSearchCounter(context.Context, *TLMessageGetSearchCounter) (*mtproto.Int32, error)
	MessageSearchV2(context.Context, *TLMessageSearchV2) (*mtproto.MessageBoxList, error)
	MessageGetLastTwoPinnedMessageId(context.Context, *TLMessageGetLastTwoPinnedMessageId) (*Vector_Int, error)
	MessageUpdatePinnedMessageId(context.Context, *TLMessageUpdatePinnedMessageId) (*mtproto.Bool, error)
	MessageGetPinnedMessageIdList(context.Context, *TLMessageGetPinnedMessageIdList) (*Vector_Int, error)
	MessageUnPinAllMessages(context.Context, *TLMessageUnPinAllMessages) (*Vector_Int, error)
	MessageGetUnreadMentions(context.Context, *TLMessageGetUnreadMentions) (*Vector_MessageBox, error)
	MessageGetUnreadMentionsCount(context.Context, *TLMessageGetUnreadMentionsCount) (*mtproto.Int32, error)
	MessageGetSavedHistoryMessages(context.Context, *TLMessageGetSavedHistoryMessages) (*mtproto.MessageBoxList, error)
	MessageGetOutboxReadDate(context.Context, *TLMessageGetOutboxReadDate) (*Vector_ReadParticipantDate, error)
}

// UnimplementedRPCMessageServer should be embedded to have forward compatible implementations.
type UnimplementedRPCMessageServer struct {
}

func (UnimplementedRPCMessageServer) MessageGetUserMessage(context.Context, *TLMessageGetUserMessage) (*mtproto.MessageBox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGetUserMessage not implemented")
}
func (UnimplementedRPCMessageServer) MessageGetUserMessageList(context.Context, *TLMessageGetUserMessageList) (*Vector_MessageBox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGetUserMessageList not implemented")
}
func (UnimplementedRPCMessageServer) MessageGetUserMessageListByDataIdList(context.Context, *TLMessageGetUserMessageListByDataIdList) (*Vector_MessageBox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGetUserMessageListByDataIdList not implemented")
}
func (UnimplementedRPCMessageServer) MessageGetUserMessageListByDataIdUserIdList(context.Context, *TLMessageGetUserMessageListByDataIdUserIdList) (*Vector_MessageBox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGetUserMessageListByDataIdUserIdList not implemented")
}
func (UnimplementedRPCMessageServer) MessageGetHistoryMessages(context.Context, *TLMessageGetHistoryMessages) (*Vector_MessageBox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGetHistoryMessages not implemented")
}
func (UnimplementedRPCMessageServer) MessageGetHistoryMessagesCount(context.Context, *TLMessageGetHistoryMessagesCount) (*mtproto.Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGetHistoryMessagesCount not implemented")
}
func (UnimplementedRPCMessageServer) MessageGetPeerUserMessageId(context.Context, *TLMessageGetPeerUserMessageId) (*mtproto.Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGetPeerUserMessageId not implemented")
}
func (UnimplementedRPCMessageServer) MessageGetPeerUserMessage(context.Context, *TLMessageGetPeerUserMessage) (*mtproto.MessageBox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGetPeerUserMessage not implemented")
}
func (UnimplementedRPCMessageServer) MessageSearchByMediaType(context.Context, *TLMessageSearchByMediaType) (*mtproto.MessageBoxList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSearchByMediaType not implemented")
}
func (UnimplementedRPCMessageServer) MessageSearch(context.Context, *TLMessageSearch) (*mtproto.MessageBoxList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSearch not implemented")
}
func (UnimplementedRPCMessageServer) MessageSearchGlobal(context.Context, *TLMessageSearchGlobal) (*mtproto.MessageBoxList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSearchGlobal not implemented")
}
func (UnimplementedRPCMessageServer) MessageSearchByPinned(context.Context, *TLMessageSearchByPinned) (*mtproto.MessageBoxList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSearchByPinned not implemented")
}
func (UnimplementedRPCMessageServer) MessageGetSearchCounter(context.Context, *TLMessageGetSearchCounter) (*mtproto.Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGetSearchCounter not implemented")
}
func (UnimplementedRPCMessageServer) MessageSearchV2(context.Context, *TLMessageSearchV2) (*mtproto.MessageBoxList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageSearchV2 not implemented")
}
func (UnimplementedRPCMessageServer) MessageGetLastTwoPinnedMessageId(context.Context, *TLMessageGetLastTwoPinnedMessageId) (*Vector_Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGetLastTwoPinnedMessageId not implemented")
}
func (UnimplementedRPCMessageServer) MessageUpdatePinnedMessageId(context.Context, *TLMessageUpdatePinnedMessageId) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageUpdatePinnedMessageId not implemented")
}
func (UnimplementedRPCMessageServer) MessageGetPinnedMessageIdList(context.Context, *TLMessageGetPinnedMessageIdList) (*Vector_Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGetPinnedMessageIdList not implemented")
}
func (UnimplementedRPCMessageServer) MessageUnPinAllMessages(context.Context, *TLMessageUnPinAllMessages) (*Vector_Int, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageUnPinAllMessages not implemented")
}
func (UnimplementedRPCMessageServer) MessageGetUnreadMentions(context.Context, *TLMessageGetUnreadMentions) (*Vector_MessageBox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGetUnreadMentions not implemented")
}
func (UnimplementedRPCMessageServer) MessageGetUnreadMentionsCount(context.Context, *TLMessageGetUnreadMentionsCount) (*mtproto.Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGetUnreadMentionsCount not implemented")
}
func (UnimplementedRPCMessageServer) MessageGetSavedHistoryMessages(context.Context, *TLMessageGetSavedHistoryMessages) (*mtproto.MessageBoxList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGetSavedHistoryMessages not implemented")
}
func (UnimplementedRPCMessageServer) MessageGetOutboxReadDate(context.Context, *TLMessageGetOutboxReadDate) (*Vector_ReadParticipantDate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageGetOutboxReadDate not implemented")
}

// UnsafeRPCMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCMessageServer will
// result in compilation errors.
type UnsafeRPCMessageServer interface {
	mustEmbedUnimplementedRPCMessageServer()
}

func RegisterRPCMessageServer(s grpc.ServiceRegistrar, srv RPCMessageServer) {
	s.RegisterService(&RPCMessage_ServiceDesc, srv)
}

func _RPCMessage_MessageGetUserMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageGetUserMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageGetUserMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageGetUserMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageGetUserMessage(ctx, req.(*TLMessageGetUserMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageGetUserMessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageGetUserMessageList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageGetUserMessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageGetUserMessageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageGetUserMessageList(ctx, req.(*TLMessageGetUserMessageList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageGetUserMessageListByDataIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageGetUserMessageListByDataIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageGetUserMessageListByDataIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageGetUserMessageListByDataIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageGetUserMessageListByDataIdList(ctx, req.(*TLMessageGetUserMessageListByDataIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageGetUserMessageListByDataIdUserIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageGetUserMessageListByDataIdUserIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageGetUserMessageListByDataIdUserIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageGetUserMessageListByDataIdUserIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageGetUserMessageListByDataIdUserIdList(ctx, req.(*TLMessageGetUserMessageListByDataIdUserIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageGetHistoryMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageGetHistoryMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageGetHistoryMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageGetHistoryMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageGetHistoryMessages(ctx, req.(*TLMessageGetHistoryMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageGetHistoryMessagesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageGetHistoryMessagesCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageGetHistoryMessagesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageGetHistoryMessagesCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageGetHistoryMessagesCount(ctx, req.(*TLMessageGetHistoryMessagesCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageGetPeerUserMessageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageGetPeerUserMessageId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageGetPeerUserMessageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageGetPeerUserMessageId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageGetPeerUserMessageId(ctx, req.(*TLMessageGetPeerUserMessageId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageGetPeerUserMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageGetPeerUserMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageGetPeerUserMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageGetPeerUserMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageGetPeerUserMessage(ctx, req.(*TLMessageGetPeerUserMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageSearchByMediaType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageSearchByMediaType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageSearchByMediaType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageSearchByMediaType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageSearchByMediaType(ctx, req.(*TLMessageSearchByMediaType))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageSearch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageSearch(ctx, req.(*TLMessageSearch))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageSearchGlobal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageSearchGlobal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageSearchGlobal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageSearchGlobal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageSearchGlobal(ctx, req.(*TLMessageSearchGlobal))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageSearchByPinned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageSearchByPinned)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageSearchByPinned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageSearchByPinned_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageSearchByPinned(ctx, req.(*TLMessageSearchByPinned))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageGetSearchCounter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageGetSearchCounter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageGetSearchCounter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageGetSearchCounter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageGetSearchCounter(ctx, req.(*TLMessageGetSearchCounter))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageSearchV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageSearchV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageSearchV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageSearchV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageSearchV2(ctx, req.(*TLMessageSearchV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageGetLastTwoPinnedMessageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageGetLastTwoPinnedMessageId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageGetLastTwoPinnedMessageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageGetLastTwoPinnedMessageId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageGetLastTwoPinnedMessageId(ctx, req.(*TLMessageGetLastTwoPinnedMessageId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageUpdatePinnedMessageId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageUpdatePinnedMessageId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageUpdatePinnedMessageId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageUpdatePinnedMessageId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageUpdatePinnedMessageId(ctx, req.(*TLMessageUpdatePinnedMessageId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageGetPinnedMessageIdList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageGetPinnedMessageIdList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageGetPinnedMessageIdList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageGetPinnedMessageIdList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageGetPinnedMessageIdList(ctx, req.(*TLMessageGetPinnedMessageIdList))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageUnPinAllMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageUnPinAllMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageUnPinAllMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageUnPinAllMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageUnPinAllMessages(ctx, req.(*TLMessageUnPinAllMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageGetUnreadMentions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageGetUnreadMentions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageGetUnreadMentions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageGetUnreadMentions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageGetUnreadMentions(ctx, req.(*TLMessageGetUnreadMentions))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageGetUnreadMentionsCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageGetUnreadMentionsCount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageGetUnreadMentionsCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageGetUnreadMentionsCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageGetUnreadMentionsCount(ctx, req.(*TLMessageGetUnreadMentionsCount))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageGetSavedHistoryMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageGetSavedHistoryMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageGetSavedHistoryMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageGetSavedHistoryMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageGetSavedHistoryMessages(ctx, req.(*TLMessageGetSavedHistoryMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCMessage_MessageGetOutboxReadDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLMessageGetOutboxReadDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCMessageServer).MessageGetOutboxReadDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCMessage_MessageGetOutboxReadDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCMessageServer).MessageGetOutboxReadDate(ctx, req.(*TLMessageGetOutboxReadDate))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCMessage_ServiceDesc is the grpc.ServiceDesc for RPCMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.RPCMessage",
	HandlerType: (*RPCMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "message_getUserMessage",
			Handler:    _RPCMessage_MessageGetUserMessage_Handler,
		},
		{
			MethodName: "message_getUserMessageList",
			Handler:    _RPCMessage_MessageGetUserMessageList_Handler,
		},
		{
			MethodName: "message_getUserMessageListByDataIdList",
			Handler:    _RPCMessage_MessageGetUserMessageListByDataIdList_Handler,
		},
		{
			MethodName: "message_getUserMessageListByDataIdUserIdList",
			Handler:    _RPCMessage_MessageGetUserMessageListByDataIdUserIdList_Handler,
		},
		{
			MethodName: "message_getHistoryMessages",
			Handler:    _RPCMessage_MessageGetHistoryMessages_Handler,
		},
		{
			MethodName: "message_getHistoryMessagesCount",
			Handler:    _RPCMessage_MessageGetHistoryMessagesCount_Handler,
		},
		{
			MethodName: "message_getPeerUserMessageId",
			Handler:    _RPCMessage_MessageGetPeerUserMessageId_Handler,
		},
		{
			MethodName: "message_getPeerUserMessage",
			Handler:    _RPCMessage_MessageGetPeerUserMessage_Handler,
		},
		{
			MethodName: "message_searchByMediaType",
			Handler:    _RPCMessage_MessageSearchByMediaType_Handler,
		},
		{
			MethodName: "message_search",
			Handler:    _RPCMessage_MessageSearch_Handler,
		},
		{
			MethodName: "message_searchGlobal",
			Handler:    _RPCMessage_MessageSearchGlobal_Handler,
		},
		{
			MethodName: "message_searchByPinned",
			Handler:    _RPCMessage_MessageSearchByPinned_Handler,
		},
		{
			MethodName: "message_getSearchCounter",
			Handler:    _RPCMessage_MessageGetSearchCounter_Handler,
		},
		{
			MethodName: "message_searchV2",
			Handler:    _RPCMessage_MessageSearchV2_Handler,
		},
		{
			MethodName: "message_getLastTwoPinnedMessageId",
			Handler:    _RPCMessage_MessageGetLastTwoPinnedMessageId_Handler,
		},
		{
			MethodName: "message_updatePinnedMessageId",
			Handler:    _RPCMessage_MessageUpdatePinnedMessageId_Handler,
		},
		{
			MethodName: "message_getPinnedMessageIdList",
			Handler:    _RPCMessage_MessageGetPinnedMessageIdList_Handler,
		},
		{
			MethodName: "message_unPinAllMessages",
			Handler:    _RPCMessage_MessageUnPinAllMessages_Handler,
		},
		{
			MethodName: "message_getUnreadMentions",
			Handler:    _RPCMessage_MessageGetUnreadMentions_Handler,
		},
		{
			MethodName: "message_getUnreadMentionsCount",
			Handler:    _RPCMessage_MessageGetUnreadMentionsCount_Handler,
		},
		{
			MethodName: "message_getSavedHistoryMessages",
			Handler:    _RPCMessage_MessageGetSavedHistoryMessages_Handler,
		},
		{
			MethodName: "message_getOutboxReadDate",
			Handler:    _RPCMessage_MessageGetOutboxReadDate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.tl.proto",
}
