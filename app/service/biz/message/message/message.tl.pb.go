//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.26.1
// source: message.tl.proto

package message

import (
	mtproto "github.com/teamgram/proto/mtproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLConstructor int32

const (
	TLConstructor_CRC32_UNKNOWN                                      TLConstructor = 0
	TLConstructor_CRC32_message_getUserMessage                       TLConstructor = 2060235208
	TLConstructor_CRC32_message_getUserMessageList                   TLConstructor = -749200346
	TLConstructor_CRC32_message_getUserMessageListByDataIdList       TLConstructor = 290824571
	TLConstructor_CRC32_message_getUserMessageListByDataIdUserIdList TLConstructor = 749890097
	TLConstructor_CRC32_message_getHistoryMessages                   TLConstructor = 50897728
	TLConstructor_CRC32_message_getHistoryMessagesCount              TLConstructor = 256933395
	TLConstructor_CRC32_message_getPeerUserMessageId                 TLConstructor = 1940829983
	TLConstructor_CRC32_message_getPeerUserMessage                   TLConstructor = 1662161426
	TLConstructor_CRC32_message_searchByMediaType                    TLConstructor = -1152381832
	TLConstructor_CRC32_message_search                               TLConstructor = 251910661
	TLConstructor_CRC32_message_searchGlobal                         TLConstructor = 1113214626
	TLConstructor_CRC32_message_searchByPinned                       TLConstructor = 721580084
	TLConstructor_CRC32_message_getSearchCounter                     TLConstructor = -489963706
	TLConstructor_CRC32_message_searchV2                             TLConstructor = -356633351
	TLConstructor_CRC32_message_getLastTwoPinnedMessageId            TLConstructor = -1348859861
	TLConstructor_CRC32_message_updatePinnedMessageId                TLConstructor = -182391344
	TLConstructor_CRC32_message_getPinnedMessageIdList               TLConstructor = -637415203
	TLConstructor_CRC32_message_unPinAllMessages                     TLConstructor = -368432525
	TLConstructor_CRC32_message_getUnreadMentions                    TLConstructor = 1877050548
	TLConstructor_CRC32_message_getUnreadMentionsCount               TLConstructor = -1254023095
	TLConstructor_CRC32_message_getSavedHistoryMessages              TLConstructor = -60243377
	TLConstructor_CRC32_message_getOutboxReadDate                    TLConstructor = -1353708502
)

// Enum value maps for TLConstructor.
var (
	TLConstructor_name = map[int32]string{
		0:           "CRC32_UNKNOWN",
		2060235208:  "CRC32_message_getUserMessage",
		-749200346:  "CRC32_message_getUserMessageList",
		290824571:   "CRC32_message_getUserMessageListByDataIdList",
		749890097:   "CRC32_message_getUserMessageListByDataIdUserIdList",
		50897728:    "CRC32_message_getHistoryMessages",
		256933395:   "CRC32_message_getHistoryMessagesCount",
		1940829983:  "CRC32_message_getPeerUserMessageId",
		1662161426:  "CRC32_message_getPeerUserMessage",
		-1152381832: "CRC32_message_searchByMediaType",
		251910661:   "CRC32_message_search",
		1113214626:  "CRC32_message_searchGlobal",
		721580084:   "CRC32_message_searchByPinned",
		-489963706:  "CRC32_message_getSearchCounter",
		-356633351:  "CRC32_message_searchV2",
		-1348859861: "CRC32_message_getLastTwoPinnedMessageId",
		-182391344:  "CRC32_message_updatePinnedMessageId",
		-637415203:  "CRC32_message_getPinnedMessageIdList",
		-368432525:  "CRC32_message_unPinAllMessages",
		1877050548:  "CRC32_message_getUnreadMentions",
		-1254023095: "CRC32_message_getUnreadMentionsCount",
		-60243377:   "CRC32_message_getSavedHistoryMessages",
		-1353708502: "CRC32_message_getOutboxReadDate",
	}
	TLConstructor_value = map[string]int32{
		"CRC32_UNKNOWN":                                      0,
		"CRC32_message_getUserMessage":                       2060235208,
		"CRC32_message_getUserMessageList":                   -749200346,
		"CRC32_message_getUserMessageListByDataIdList":       290824571,
		"CRC32_message_getUserMessageListByDataIdUserIdList": 749890097,
		"CRC32_message_getHistoryMessages":                   50897728,
		"CRC32_message_getHistoryMessagesCount":              256933395,
		"CRC32_message_getPeerUserMessageId":                 1940829983,
		"CRC32_message_getPeerUserMessage":                   1662161426,
		"CRC32_message_searchByMediaType":                    -1152381832,
		"CRC32_message_search":                               251910661,
		"CRC32_message_searchGlobal":                         1113214626,
		"CRC32_message_searchByPinned":                       721580084,
		"CRC32_message_getSearchCounter":                     -489963706,
		"CRC32_message_searchV2":                             -356633351,
		"CRC32_message_getLastTwoPinnedMessageId":            -1348859861,
		"CRC32_message_updatePinnedMessageId":                -182391344,
		"CRC32_message_getPinnedMessageIdList":               -637415203,
		"CRC32_message_unPinAllMessages":                     -368432525,
		"CRC32_message_getUnreadMentions":                    1877050548,
		"CRC32_message_getUnreadMentionsCount":               -1254023095,
		"CRC32_message_getSavedHistoryMessages":              -60243377,
		"CRC32_message_getOutboxReadDate":                    -1353708502,
	}
)

func (x TLConstructor) Enum() *TLConstructor {
	p := new(TLConstructor)
	*p = x
	return p
}

func (x TLConstructor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLConstructor) Descriptor() protoreflect.EnumDescriptor {
	return file_message_tl_proto_enumTypes[0].Descriptor()
}

func (TLConstructor) Type() protoreflect.EnumType {
	return &file_message_tl_proto_enumTypes[0]
}

func (x TLConstructor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLConstructor.Descriptor instead.
func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{0}
}

// --------------------------------------------------------------------------------------------
type TLMessageGetUserMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id          int32         `protobuf:"varint,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TLMessageGetUserMessage) Reset() {
	*x = TLMessageGetUserMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageGetUserMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageGetUserMessage) ProtoMessage() {}

func (x *TLMessageGetUserMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageGetUserMessage.ProtoReflect.Descriptor instead.
func (*TLMessageGetUserMessage) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{0}
}

func (x *TLMessageGetUserMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageGetUserMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageGetUserMessage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageGetUserMessageList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IdList      []int32       `protobuf:"varint,4,rep,packed,name=id_list,json=idList,proto3" json:"id_list,omitempty"`
}

func (x *TLMessageGetUserMessageList) Reset() {
	*x = TLMessageGetUserMessageList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageGetUserMessageList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageGetUserMessageList) ProtoMessage() {}

func (x *TLMessageGetUserMessageList) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageGetUserMessageList.ProtoReflect.Descriptor instead.
func (*TLMessageGetUserMessageList) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{1}
}

func (x *TLMessageGetUserMessageList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageGetUserMessageList) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageGetUserMessageList) GetIdList() []int32 {
	if x != nil {
		return x.IdList
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMessageGetUserMessageListByDataIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	IdList      []int64       `protobuf:"varint,4,rep,packed,name=id_list,json=idList,proto3" json:"id_list,omitempty"`
}

func (x *TLMessageGetUserMessageListByDataIdList) Reset() {
	*x = TLMessageGetUserMessageListByDataIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageGetUserMessageListByDataIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageGetUserMessageListByDataIdList) ProtoMessage() {}

func (x *TLMessageGetUserMessageListByDataIdList) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageGetUserMessageListByDataIdList.ProtoReflect.Descriptor instead.
func (*TLMessageGetUserMessageListByDataIdList) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{2}
}

func (x *TLMessageGetUserMessageListByDataIdList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageGetUserMessageListByDataIdList) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageGetUserMessageListByDataIdList) GetIdList() []int64 {
	if x != nil {
		return x.IdList
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMessageGetUserMessageListByDataIdUserIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	Id          int64         `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	UserIdList  []int64       `protobuf:"varint,4,rep,packed,name=user_id_list,json=userIdList,proto3" json:"user_id_list,omitempty"`
}

func (x *TLMessageGetUserMessageListByDataIdUserIdList) Reset() {
	*x = TLMessageGetUserMessageListByDataIdUserIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageGetUserMessageListByDataIdUserIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageGetUserMessageListByDataIdUserIdList) ProtoMessage() {}

func (x *TLMessageGetUserMessageListByDataIdUserIdList) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageGetUserMessageListByDataIdUserIdList.ProtoReflect.Descriptor instead.
func (*TLMessageGetUserMessageListByDataIdUserIdList) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{3}
}

func (x *TLMessageGetUserMessageListByDataIdUserIdList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageGetUserMessageListByDataIdUserIdList) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLMessageGetUserMessageListByDataIdUserIdList) GetUserIdList() []int64 {
	if x != nil {
		return x.UserIdList
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMessageGetHistoryMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	OffsetId    int32         `protobuf:"varint,6,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetDate  int32         `protobuf:"varint,7,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	AddOffset   int32         `protobuf:"varint,8,opt,name=add_offset,json=addOffset,proto3" json:"add_offset,omitempty"`
	Limit       int32         `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	MaxId       int32         `protobuf:"varint,10,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId       int32         `protobuf:"varint,11,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Hash        int64         `protobuf:"varint,12,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *TLMessageGetHistoryMessages) Reset() {
	*x = TLMessageGetHistoryMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageGetHistoryMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageGetHistoryMessages) ProtoMessage() {}

func (x *TLMessageGetHistoryMessages) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageGetHistoryMessages.ProtoReflect.Descriptor instead.
func (*TLMessageGetHistoryMessages) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{4}
}

func (x *TLMessageGetHistoryMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageGetHistoryMessages) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageGetHistoryMessages) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMessageGetHistoryMessages) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMessageGetHistoryMessages) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessageGetHistoryMessages) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *TLMessageGetHistoryMessages) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *TLMessageGetHistoryMessages) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessageGetHistoryMessages) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLMessageGetHistoryMessages) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *TLMessageGetHistoryMessages) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageGetHistoryMessagesCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLMessageGetHistoryMessagesCount) Reset() {
	*x = TLMessageGetHistoryMessagesCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageGetHistoryMessagesCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageGetHistoryMessagesCount) ProtoMessage() {}

func (x *TLMessageGetHistoryMessagesCount) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageGetHistoryMessagesCount.ProtoReflect.Descriptor instead.
func (*TLMessageGetHistoryMessagesCount) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{5}
}

func (x *TLMessageGetHistoryMessagesCount) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageGetHistoryMessagesCount) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageGetHistoryMessagesCount) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMessageGetHistoryMessagesCount) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageGetPeerUserMessageId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerUserId  int64         `protobuf:"varint,4,opt,name=peer_user_id,json=peerUserId,proto3" json:"peer_user_id,omitempty"`
	MsgId       int32         `protobuf:"varint,5,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *TLMessageGetPeerUserMessageId) Reset() {
	*x = TLMessageGetPeerUserMessageId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageGetPeerUserMessageId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageGetPeerUserMessageId) ProtoMessage() {}

func (x *TLMessageGetPeerUserMessageId) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageGetPeerUserMessageId.ProtoReflect.Descriptor instead.
func (*TLMessageGetPeerUserMessageId) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{6}
}

func (x *TLMessageGetPeerUserMessageId) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageGetPeerUserMessageId) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageGetPeerUserMessageId) GetPeerUserId() int64 {
	if x != nil {
		return x.PeerUserId
	}
	return 0
}

func (x *TLMessageGetPeerUserMessageId) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageGetPeerUserMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerUserId  int64         `protobuf:"varint,4,opt,name=peer_user_id,json=peerUserId,proto3" json:"peer_user_id,omitempty"`
	MsgId       int32         `protobuf:"varint,5,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *TLMessageGetPeerUserMessage) Reset() {
	*x = TLMessageGetPeerUserMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageGetPeerUserMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageGetPeerUserMessage) ProtoMessage() {}

func (x *TLMessageGetPeerUserMessage) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageGetPeerUserMessage.ProtoReflect.Descriptor instead.
func (*TLMessageGetPeerUserMessage) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{7}
}

func (x *TLMessageGetPeerUserMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageGetPeerUserMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageGetPeerUserMessage) GetPeerUserId() int64 {
	if x != nil {
		return x.PeerUserId
	}
	return 0
}

func (x *TLMessageGetPeerUserMessage) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageSearchByMediaType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	MediaType   int32         `protobuf:"varint,6,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	Offset      int32         `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int32         `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TLMessageSearchByMediaType) Reset() {
	*x = TLMessageSearchByMediaType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageSearchByMediaType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageSearchByMediaType) ProtoMessage() {}

func (x *TLMessageSearchByMediaType) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageSearchByMediaType.ProtoReflect.Descriptor instead.
func (*TLMessageSearchByMediaType) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{8}
}

func (x *TLMessageSearchByMediaType) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageSearchByMediaType) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageSearchByMediaType) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMessageSearchByMediaType) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMessageSearchByMediaType) GetMediaType() int32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

func (x *TLMessageSearchByMediaType) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TLMessageSearchByMediaType) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageSearch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Q           string        `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	Offset      int32         `protobuf:"varint,7,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int32         `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TLMessageSearch) Reset() {
	*x = TLMessageSearch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageSearch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageSearch) ProtoMessage() {}

func (x *TLMessageSearch) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageSearch.ProtoReflect.Descriptor instead.
func (*TLMessageSearch) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{9}
}

func (x *TLMessageSearch) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageSearch) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageSearch) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMessageSearch) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMessageSearch) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TLMessageSearch) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TLMessageSearch) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageSearchGlobal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Q           string        `protobuf:"bytes,4,opt,name=q,proto3" json:"q,omitempty"`
	Offset      int32         `protobuf:"varint,5,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int32         `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TLMessageSearchGlobal) Reset() {
	*x = TLMessageSearchGlobal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageSearchGlobal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageSearchGlobal) ProtoMessage() {}

func (x *TLMessageSearchGlobal) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageSearchGlobal.ProtoReflect.Descriptor instead.
func (*TLMessageSearchGlobal) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{10}
}

func (x *TLMessageSearchGlobal) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageSearchGlobal) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageSearchGlobal) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TLMessageSearchGlobal) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TLMessageSearchGlobal) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageSearchByPinned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLMessageSearchByPinned) Reset() {
	*x = TLMessageSearchByPinned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageSearchByPinned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageSearchByPinned) ProtoMessage() {}

func (x *TLMessageSearchByPinned) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageSearchByPinned.ProtoReflect.Descriptor instead.
func (*TLMessageSearchByPinned) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{11}
}

func (x *TLMessageSearchByPinned) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageSearchByPinned) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageSearchByPinned) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMessageSearchByPinned) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageGetSearchCounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	MediaType   int32         `protobuf:"varint,6,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
}

func (x *TLMessageGetSearchCounter) Reset() {
	*x = TLMessageGetSearchCounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageGetSearchCounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageGetSearchCounter) ProtoMessage() {}

func (x *TLMessageGetSearchCounter) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageGetSearchCounter.ProtoReflect.Descriptor instead.
func (*TLMessageGetSearchCounter) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{12}
}

func (x *TLMessageGetSearchCounter) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageGetSearchCounter) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageGetSearchCounter) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMessageGetSearchCounter) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMessageGetSearchCounter) GetMediaType() int32 {
	if x != nil {
		return x.MediaType
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageSearchV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Q           string        `protobuf:"bytes,6,opt,name=q,proto3" json:"q,omitempty"`
	FromId      int64         `protobuf:"varint,7,opt,name=from_id,json=fromId,proto3" json:"from_id,omitempty"`
	MinDate     int32         `protobuf:"varint,8,opt,name=min_date,json=minDate,proto3" json:"min_date,omitempty"`
	MaxDate     int32         `protobuf:"varint,9,opt,name=max_date,json=maxDate,proto3" json:"max_date,omitempty"`
	OffsetId    int32         `protobuf:"varint,10,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	AddOffset   int32         `protobuf:"varint,11,opt,name=add_offset,json=addOffset,proto3" json:"add_offset,omitempty"`
	Limit       int32         `protobuf:"varint,12,opt,name=limit,proto3" json:"limit,omitempty"`
	MaxId       int32         `protobuf:"varint,13,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId       int32         `protobuf:"varint,14,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Hash        int64         `protobuf:"varint,15,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *TLMessageSearchV2) Reset() {
	*x = TLMessageSearchV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageSearchV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageSearchV2) ProtoMessage() {}

func (x *TLMessageSearchV2) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageSearchV2.ProtoReflect.Descriptor instead.
func (*TLMessageSearchV2) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{13}
}

func (x *TLMessageSearchV2) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageSearchV2) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageSearchV2) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMessageSearchV2) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMessageSearchV2) GetQ() string {
	if x != nil {
		return x.Q
	}
	return ""
}

func (x *TLMessageSearchV2) GetFromId() int64 {
	if x != nil {
		return x.FromId
	}
	return 0
}

func (x *TLMessageSearchV2) GetMinDate() int32 {
	if x != nil {
		return x.MinDate
	}
	return 0
}

func (x *TLMessageSearchV2) GetMaxDate() int32 {
	if x != nil {
		return x.MaxDate
	}
	return 0
}

func (x *TLMessageSearchV2) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessageSearchV2) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *TLMessageSearchV2) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessageSearchV2) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLMessageSearchV2) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *TLMessageSearchV2) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageGetLastTwoPinnedMessageId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLMessageGetLastTwoPinnedMessageId) Reset() {
	*x = TLMessageGetLastTwoPinnedMessageId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageGetLastTwoPinnedMessageId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageGetLastTwoPinnedMessageId) ProtoMessage() {}

func (x *TLMessageGetLastTwoPinnedMessageId) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageGetLastTwoPinnedMessageId.ProtoReflect.Descriptor instead.
func (*TLMessageGetLastTwoPinnedMessageId) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{14}
}

func (x *TLMessageGetLastTwoPinnedMessageId) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageGetLastTwoPinnedMessageId) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageGetLastTwoPinnedMessageId) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMessageGetLastTwoPinnedMessageId) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageUpdatePinnedMessageId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Id          int32         `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	Pinned      *mtproto.Bool `protobuf:"bytes,7,opt,name=pinned,proto3" json:"pinned,omitempty"`
}

func (x *TLMessageUpdatePinnedMessageId) Reset() {
	*x = TLMessageUpdatePinnedMessageId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageUpdatePinnedMessageId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageUpdatePinnedMessageId) ProtoMessage() {}

func (x *TLMessageUpdatePinnedMessageId) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageUpdatePinnedMessageId.ProtoReflect.Descriptor instead.
func (*TLMessageUpdatePinnedMessageId) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{15}
}

func (x *TLMessageUpdatePinnedMessageId) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageUpdatePinnedMessageId) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageUpdatePinnedMessageId) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMessageUpdatePinnedMessageId) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMessageUpdatePinnedMessageId) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TLMessageUpdatePinnedMessageId) GetPinned() *mtproto.Bool {
	if x != nil {
		return x.Pinned
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMessageGetPinnedMessageIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLMessageGetPinnedMessageIdList) Reset() {
	*x = TLMessageGetPinnedMessageIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageGetPinnedMessageIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageGetPinnedMessageIdList) ProtoMessage() {}

func (x *TLMessageGetPinnedMessageIdList) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageGetPinnedMessageIdList.ProtoReflect.Descriptor instead.
func (*TLMessageGetPinnedMessageIdList) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{16}
}

func (x *TLMessageGetPinnedMessageIdList) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageGetPinnedMessageIdList) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageGetPinnedMessageIdList) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMessageGetPinnedMessageIdList) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageUnPinAllMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLMessageUnPinAllMessages) Reset() {
	*x = TLMessageUnPinAllMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageUnPinAllMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageUnPinAllMessages) ProtoMessage() {}

func (x *TLMessageUnPinAllMessages) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageUnPinAllMessages.ProtoReflect.Descriptor instead.
func (*TLMessageUnPinAllMessages) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{17}
}

func (x *TLMessageUnPinAllMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageUnPinAllMessages) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageUnPinAllMessages) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMessageUnPinAllMessages) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageGetUnreadMentions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	OffsetId    int32         `protobuf:"varint,6,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	AddOffset   int32         `protobuf:"varint,7,opt,name=add_offset,json=addOffset,proto3" json:"add_offset,omitempty"`
	Limit       int32         `protobuf:"varint,8,opt,name=limit,proto3" json:"limit,omitempty"`
	MinId       int32         `protobuf:"varint,9,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	MaxInt      int32         `protobuf:"varint,10,opt,name=max_int,json=maxInt,proto3" json:"max_int,omitempty"`
}

func (x *TLMessageGetUnreadMentions) Reset() {
	*x = TLMessageGetUnreadMentions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageGetUnreadMentions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageGetUnreadMentions) ProtoMessage() {}

func (x *TLMessageGetUnreadMentions) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageGetUnreadMentions.ProtoReflect.Descriptor instead.
func (*TLMessageGetUnreadMentions) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{18}
}

func (x *TLMessageGetUnreadMentions) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageGetUnreadMentions) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageGetUnreadMentions) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMessageGetUnreadMentions) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMessageGetUnreadMentions) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessageGetUnreadMentions) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *TLMessageGetUnreadMentions) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessageGetUnreadMentions) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *TLMessageGetUnreadMentions) GetMaxInt() int32 {
	if x != nil {
		return x.MaxInt
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageGetUnreadMentionsCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLMessageGetUnreadMentionsCount) Reset() {
	*x = TLMessageGetUnreadMentionsCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageGetUnreadMentionsCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageGetUnreadMentionsCount) ProtoMessage() {}

func (x *TLMessageGetUnreadMentionsCount) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageGetUnreadMentionsCount.ProtoReflect.Descriptor instead.
func (*TLMessageGetUnreadMentionsCount) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{19}
}

func (x *TLMessageGetUnreadMentionsCount) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageGetUnreadMentionsCount) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageGetUnreadMentionsCount) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMessageGetUnreadMentionsCount) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageGetSavedHistoryMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	OffsetId    int32         `protobuf:"varint,6,opt,name=offset_id,json=offsetId,proto3" json:"offset_id,omitempty"`
	OffsetDate  int32         `protobuf:"varint,7,opt,name=offset_date,json=offsetDate,proto3" json:"offset_date,omitempty"`
	AddOffset   int32         `protobuf:"varint,8,opt,name=add_offset,json=addOffset,proto3" json:"add_offset,omitempty"`
	Limit       int32         `protobuf:"varint,9,opt,name=limit,proto3" json:"limit,omitempty"`
	MaxId       int32         `protobuf:"varint,10,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
	MinId       int32         `protobuf:"varint,11,opt,name=min_id,json=minId,proto3" json:"min_id,omitempty"`
	Hash        int64         `protobuf:"varint,12,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *TLMessageGetSavedHistoryMessages) Reset() {
	*x = TLMessageGetSavedHistoryMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageGetSavedHistoryMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageGetSavedHistoryMessages) ProtoMessage() {}

func (x *TLMessageGetSavedHistoryMessages) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageGetSavedHistoryMessages.ProtoReflect.Descriptor instead.
func (*TLMessageGetSavedHistoryMessages) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{20}
}

func (x *TLMessageGetSavedHistoryMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageGetSavedHistoryMessages) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageGetSavedHistoryMessages) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMessageGetSavedHistoryMessages) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMessageGetSavedHistoryMessages) GetOffsetId() int32 {
	if x != nil {
		return x.OffsetId
	}
	return 0
}

func (x *TLMessageGetSavedHistoryMessages) GetOffsetDate() int32 {
	if x != nil {
		return x.OffsetDate
	}
	return 0
}

func (x *TLMessageGetSavedHistoryMessages) GetAddOffset() int32 {
	if x != nil {
		return x.AddOffset
	}
	return 0
}

func (x *TLMessageGetSavedHistoryMessages) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TLMessageGetSavedHistoryMessages) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

func (x *TLMessageGetSavedHistoryMessages) GetMinId() int32 {
	if x != nil {
		return x.MinId
	}
	return 0
}

func (x *TLMessageGetSavedHistoryMessages) GetHash() int64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMessageGetOutboxReadDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=message.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	PeerType    int32         `protobuf:"varint,4,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,5,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	MsgId       int32         `protobuf:"varint,6,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *TLMessageGetOutboxReadDate) Reset() {
	*x = TLMessageGetOutboxReadDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMessageGetOutboxReadDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMessageGetOutboxReadDate) ProtoMessage() {}

func (x *TLMessageGetOutboxReadDate) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMessageGetOutboxReadDate.ProtoReflect.Descriptor instead.
func (*TLMessageGetOutboxReadDate) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{21}
}

func (x *TLMessageGetOutboxReadDate) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMessageGetOutboxReadDate) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMessageGetOutboxReadDate) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMessageGetOutboxReadDate) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMessageGetOutboxReadDate) GetMsgId() int32 {
	if x != nil {
		return x.MsgId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
// Vector api result type
type Vector_MessageBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*mtproto.MessageBox `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_MessageBox) Reset() {
	*x = Vector_MessageBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_MessageBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_MessageBox) ProtoMessage() {}

func (x *Vector_MessageBox) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_MessageBox.ProtoReflect.Descriptor instead.
func (*Vector_MessageBox) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{22}
}

func (x *Vector_MessageBox) GetDatas() []*mtproto.MessageBox {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_Int struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []int32 `protobuf:"varint,1,rep,packed,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_Int) Reset() {
	*x = Vector_Int{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_Int) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_Int) ProtoMessage() {}

func (x *Vector_Int) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_Int.ProtoReflect.Descriptor instead.
func (*Vector_Int) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{23}
}

func (x *Vector_Int) GetDatas() []int32 {
	if x != nil {
		return x.Datas
	}
	return nil
}

type Vector_ReadParticipantDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datas []*mtproto.ReadParticipantDate `protobuf:"bytes,1,rep,name=datas,proto3" json:"datas,omitempty"`
}

func (x *Vector_ReadParticipantDate) Reset() {
	*x = Vector_ReadParticipantDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_tl_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vector_ReadParticipantDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector_ReadParticipantDate) ProtoMessage() {}

func (x *Vector_ReadParticipantDate) ProtoReflect() protoreflect.Message {
	mi := &file_message_tl_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector_ReadParticipantDate.ProtoReflect.Descriptor instead.
func (*Vector_ReadParticipantDate) Descriptor() ([]byte, []int) {
	return file_message_tl_proto_rawDescGZIP(), []int{24}
}

func (x *Vector_ReadParticipantDate) GetDatas() []*mtproto.ReadParticipantDate {
	if x != nil {
		return x.Datas
	}
	return nil
}

var File_message_tl_proto protoreflect.FileDescriptor

var file_message_tl_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x74, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x74, 0x6c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x73, 0x79,
	0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7e, 0x0a, 0x19, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06,
	0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x29, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x64, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x06, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x9d, 0x01, 0x0a, 0x2f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0xdd, 0x02, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x67, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64,
	0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61,
	0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x61, 0x78, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x22, 0xad, 0x01, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x67, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64,
	0x22, 0xad, 0x01, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70,
	0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64,
	0x22, 0xab, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x65, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0xf4,
	0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x11, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x38, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xa8, 0x01, 0x0a, 0x17, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x0c, 0x0a, 0x01, 0x71, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x19,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x42, 0x79, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8f, 0x03, 0x0a, 0x13, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x56, 0x32, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x71,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x66, 0x72, 0x6f,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x6d,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x6d, 0x61, 0x78, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49,
	0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xaf, 0x01, 0x0a,
	0x24, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x4c,
	0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe2,
	0x01, 0x0a, 0x20, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x06,
	0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x06, 0x70, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x22, 0xac, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x6e, 0x50, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa9, 0x02, 0x0a, 0x1c,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x21, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64,
	0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe2, 0x02, 0x0a, 0x22, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x61, 0x64, 0x64, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xbe, 0x01, 0x0a, 0x1c,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x11,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f,
	0x78, 0x12, 0x29, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6f, 0x78, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x22, 0x22, 0x0a, 0x0a,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x22, 0x50, 0x0a, 0x1a, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x73, 0x2a, 0x83, 0x08, 0x0a, 0x0d, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0xc8, 0xe3, 0xb2, 0xd6, 0x07, 0x12, 0x2d, 0x0a,
	0x20, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x10, 0xa6, 0xb8, 0xe0, 0x9a, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x34, 0x0a, 0x2c,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xfb, 0xc2, 0xd6,
	0x8a, 0x01, 0x12, 0x3a, 0x0a, 0x32, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x10, 0xb1, 0xd4, 0xc9, 0xe5, 0x02, 0x12, 0x27,
	0x0a, 0x20, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x67, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x10, 0xc0, 0xc6, 0xa2, 0x18, 0x12, 0x2c, 0x0a, 0x25, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x10, 0x93, 0xfc, 0xc1, 0x7a, 0x12, 0x2a, 0x0a, 0x22, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x10, 0x9f, 0xee, 0xba, 0x9d,
	0x07, 0x12, 0x28, 0x0a, 0x20, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x92, 0xa4, 0xca, 0x98, 0x06, 0x12, 0x2c, 0x0a, 0x1f, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf8,
	0x98, 0xc0, 0xda, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1b, 0x0a, 0x14, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x10, 0x85, 0xb4, 0x8f, 0x78, 0x12, 0x22, 0x0a, 0x1a, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x10, 0xa2, 0x9d, 0xe9, 0x92, 0x04, 0x12, 0x24, 0x0a, 0x1c, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x42, 0x79, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x10, 0xb4, 0xe0, 0x89, 0xd8, 0x02,
	0x12, 0x2b, 0x0a, 0x1e, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x10, 0xc6, 0xfe, 0xae, 0x96, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x23, 0x0a,
	0x16, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x32, 0x10, 0xf9, 0xe9, 0xf8, 0xd5, 0xfe, 0xff, 0xff, 0xff,
	0xff, 0x01, 0x12, 0x34, 0x0a, 0x27, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x10, 0xab, 0x90,
	0xe8, 0xfc, 0xfa, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x30, 0x0a, 0x23, 0x43, 0x52, 0x43, 0x33,
	0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x10,
	0xd0, 0xdb, 0x83, 0xa9, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x31, 0x0a, 0x24, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x50,
	0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x10, 0xdd, 0xa1, 0x87, 0xd0, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2b, 0x0a,
	0x1e, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75,
	0x6e, 0x50, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x10,
	0xf3, 0xd4, 0xa8, 0xd0, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1f, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55,
	0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0xb4, 0x89,
	0x86, 0xff, 0x06, 0x12, 0x31, 0x0a, 0x24, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x10, 0xc9, 0xc0, 0x84, 0xaa,
	0xfb, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x32, 0x0a, 0x25, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x10,
	0xcf, 0x84, 0xa3, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2c, 0x0a, 0x1f, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x4f,
	0x75, 0x74, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x10, 0xaa, 0x98,
	0xc0, 0xfa, 0xfa, 0xff, 0xff, 0xff, 0xff, 0x01, 0x32, 0xde, 0x10, 0x0a, 0x0a, 0x52, 0x50, 0x43,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x53, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x22, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x1a,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x22, 0x00,
	0x12, 0x7a, 0x0a, 0x26, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x32, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a,
	0x2c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x42, 0x6f, 0x78, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x67, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x1a, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x67, 0x65, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x1c, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x28, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x26, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42,
	0x6f, 0x78, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x25, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x14,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x12, 0x20, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x00, 0x12, 0x57, 0x0a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x42, 0x79, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x22, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x79, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x1a,
	0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x42, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x18, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x1a, 0x0e, 0x2e, 0x6d,
	0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x22, 0x00, 0x12, 0x4b,
	0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x56, 0x32, 0x12, 0x1c, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x32,
	0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x21, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x77,
	0x6f, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64,
	0x12, 0x2d, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x1a,
	0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x49, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x29, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67,
	0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x50, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x50, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54,
	0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x50, 0x69, 0x6e, 0x41,
	0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x13, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x49, 0x6e, 0x74, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74,
	0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x1a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f,
	0x78, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67,
	0x65, 0x74, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x1f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67,
	0x65, 0x74, 0x53, 0x61, 0x76, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2b, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x53,
	0x61, 0x76, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x1a, 0x17, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74,
	0x62, 0x6f, 0x78, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x67, 0x65, 0x74, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x52, 0x65, 0x61, 0x64, 0x44, 0x61,
	0x74, 0x65, 0x1a, 0x23, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x52, 0x65, 0x61, 0x64, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x00, 0x42, 0x45, 0x5a, 0x43, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d,
	0x2f, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2f, 0x61, 0x70, 0x70, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x62, 0x69, 0x7a,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_tl_proto_rawDescOnce sync.Once
	file_message_tl_proto_rawDescData = file_message_tl_proto_rawDesc
)

func file_message_tl_proto_rawDescGZIP() []byte {
	file_message_tl_proto_rawDescOnce.Do(func() {
		file_message_tl_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_tl_proto_rawDescData)
	})
	return file_message_tl_proto_rawDescData
}

var file_message_tl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_message_tl_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_message_tl_proto_goTypes = []any{
	(TLConstructor)(0),                                    // 0: message.TLConstructor
	(*TLMessageGetUserMessage)(nil),                       // 1: message.TL_message_getUserMessage
	(*TLMessageGetUserMessageList)(nil),                   // 2: message.TL_message_getUserMessageList
	(*TLMessageGetUserMessageListByDataIdList)(nil),       // 3: message.TL_message_getUserMessageListByDataIdList
	(*TLMessageGetUserMessageListByDataIdUserIdList)(nil), // 4: message.TL_message_getUserMessageListByDataIdUserIdList
	(*TLMessageGetHistoryMessages)(nil),                   // 5: message.TL_message_getHistoryMessages
	(*TLMessageGetHistoryMessagesCount)(nil),              // 6: message.TL_message_getHistoryMessagesCount
	(*TLMessageGetPeerUserMessageId)(nil),                 // 7: message.TL_message_getPeerUserMessageId
	(*TLMessageGetPeerUserMessage)(nil),                   // 8: message.TL_message_getPeerUserMessage
	(*TLMessageSearchByMediaType)(nil),                    // 9: message.TL_message_searchByMediaType
	(*TLMessageSearch)(nil),                               // 10: message.TL_message_search
	(*TLMessageSearchGlobal)(nil),                         // 11: message.TL_message_searchGlobal
	(*TLMessageSearchByPinned)(nil),                       // 12: message.TL_message_searchByPinned
	(*TLMessageGetSearchCounter)(nil),                     // 13: message.TL_message_getSearchCounter
	(*TLMessageSearchV2)(nil),                             // 14: message.TL_message_searchV2
	(*TLMessageGetLastTwoPinnedMessageId)(nil),            // 15: message.TL_message_getLastTwoPinnedMessageId
	(*TLMessageUpdatePinnedMessageId)(nil),                // 16: message.TL_message_updatePinnedMessageId
	(*TLMessageGetPinnedMessageIdList)(nil),               // 17: message.TL_message_getPinnedMessageIdList
	(*TLMessageUnPinAllMessages)(nil),                     // 18: message.TL_message_unPinAllMessages
	(*TLMessageGetUnreadMentions)(nil),                    // 19: message.TL_message_getUnreadMentions
	(*TLMessageGetUnreadMentionsCount)(nil),               // 20: message.TL_message_getUnreadMentionsCount
	(*TLMessageGetSavedHistoryMessages)(nil),              // 21: message.TL_message_getSavedHistoryMessages
	(*TLMessageGetOutboxReadDate)(nil),                    // 22: message.TL_message_getOutboxReadDate
	(*Vector_MessageBox)(nil),                             // 23: message.Vector_MessageBox
	(*Vector_Int)(nil),                                    // 24: message.Vector_Int
	(*Vector_ReadParticipantDate)(nil),                    // 25: message.Vector_ReadParticipantDate
	(*mtproto.Bool)(nil),                                  // 26: mtproto.Bool
	(*mtproto.MessageBox)(nil),                            // 27: mtproto.MessageBox
	(*mtproto.ReadParticipantDate)(nil),                   // 28: mtproto.ReadParticipantDate
	(*mtproto.Int32)(nil),                                 // 29: mtproto.Int32
	(*mtproto.MessageBoxList)(nil),                        // 30: mtproto.MessageBoxList
}
var file_message_tl_proto_depIdxs = []int32{
	0,  // 0: message.TL_message_getUserMessage.constructor:type_name -> message.TLConstructor
	0,  // 1: message.TL_message_getUserMessageList.constructor:type_name -> message.TLConstructor
	0,  // 2: message.TL_message_getUserMessageListByDataIdList.constructor:type_name -> message.TLConstructor
	0,  // 3: message.TL_message_getUserMessageListByDataIdUserIdList.constructor:type_name -> message.TLConstructor
	0,  // 4: message.TL_message_getHistoryMessages.constructor:type_name -> message.TLConstructor
	0,  // 5: message.TL_message_getHistoryMessagesCount.constructor:type_name -> message.TLConstructor
	0,  // 6: message.TL_message_getPeerUserMessageId.constructor:type_name -> message.TLConstructor
	0,  // 7: message.TL_message_getPeerUserMessage.constructor:type_name -> message.TLConstructor
	0,  // 8: message.TL_message_searchByMediaType.constructor:type_name -> message.TLConstructor
	0,  // 9: message.TL_message_search.constructor:type_name -> message.TLConstructor
	0,  // 10: message.TL_message_searchGlobal.constructor:type_name -> message.TLConstructor
	0,  // 11: message.TL_message_searchByPinned.constructor:type_name -> message.TLConstructor
	0,  // 12: message.TL_message_getSearchCounter.constructor:type_name -> message.TLConstructor
	0,  // 13: message.TL_message_searchV2.constructor:type_name -> message.TLConstructor
	0,  // 14: message.TL_message_getLastTwoPinnedMessageId.constructor:type_name -> message.TLConstructor
	0,  // 15: message.TL_message_updatePinnedMessageId.constructor:type_name -> message.TLConstructor
	26, // 16: message.TL_message_updatePinnedMessageId.pinned:type_name -> mtproto.Bool
	0,  // 17: message.TL_message_getPinnedMessageIdList.constructor:type_name -> message.TLConstructor
	0,  // 18: message.TL_message_unPinAllMessages.constructor:type_name -> message.TLConstructor
	0,  // 19: message.TL_message_getUnreadMentions.constructor:type_name -> message.TLConstructor
	0,  // 20: message.TL_message_getUnreadMentionsCount.constructor:type_name -> message.TLConstructor
	0,  // 21: message.TL_message_getSavedHistoryMessages.constructor:type_name -> message.TLConstructor
	0,  // 22: message.TL_message_getOutboxReadDate.constructor:type_name -> message.TLConstructor
	27, // 23: message.Vector_MessageBox.datas:type_name -> mtproto.MessageBox
	28, // 24: message.Vector_ReadParticipantDate.datas:type_name -> mtproto.ReadParticipantDate
	1,  // 25: message.RPCMessage.message_getUserMessage:input_type -> message.TL_message_getUserMessage
	2,  // 26: message.RPCMessage.message_getUserMessageList:input_type -> message.TL_message_getUserMessageList
	3,  // 27: message.RPCMessage.message_getUserMessageListByDataIdList:input_type -> message.TL_message_getUserMessageListByDataIdList
	4,  // 28: message.RPCMessage.message_getUserMessageListByDataIdUserIdList:input_type -> message.TL_message_getUserMessageListByDataIdUserIdList
	5,  // 29: message.RPCMessage.message_getHistoryMessages:input_type -> message.TL_message_getHistoryMessages
	6,  // 30: message.RPCMessage.message_getHistoryMessagesCount:input_type -> message.TL_message_getHistoryMessagesCount
	7,  // 31: message.RPCMessage.message_getPeerUserMessageId:input_type -> message.TL_message_getPeerUserMessageId
	8,  // 32: message.RPCMessage.message_getPeerUserMessage:input_type -> message.TL_message_getPeerUserMessage
	9,  // 33: message.RPCMessage.message_searchByMediaType:input_type -> message.TL_message_searchByMediaType
	10, // 34: message.RPCMessage.message_search:input_type -> message.TL_message_search
	11, // 35: message.RPCMessage.message_searchGlobal:input_type -> message.TL_message_searchGlobal
	12, // 36: message.RPCMessage.message_searchByPinned:input_type -> message.TL_message_searchByPinned
	13, // 37: message.RPCMessage.message_getSearchCounter:input_type -> message.TL_message_getSearchCounter
	14, // 38: message.RPCMessage.message_searchV2:input_type -> message.TL_message_searchV2
	15, // 39: message.RPCMessage.message_getLastTwoPinnedMessageId:input_type -> message.TL_message_getLastTwoPinnedMessageId
	16, // 40: message.RPCMessage.message_updatePinnedMessageId:input_type -> message.TL_message_updatePinnedMessageId
	17, // 41: message.RPCMessage.message_getPinnedMessageIdList:input_type -> message.TL_message_getPinnedMessageIdList
	18, // 42: message.RPCMessage.message_unPinAllMessages:input_type -> message.TL_message_unPinAllMessages
	19, // 43: message.RPCMessage.message_getUnreadMentions:input_type -> message.TL_message_getUnreadMentions
	20, // 44: message.RPCMessage.message_getUnreadMentionsCount:input_type -> message.TL_message_getUnreadMentionsCount
	21, // 45: message.RPCMessage.message_getSavedHistoryMessages:input_type -> message.TL_message_getSavedHistoryMessages
	22, // 46: message.RPCMessage.message_getOutboxReadDate:input_type -> message.TL_message_getOutboxReadDate
	27, // 47: message.RPCMessage.message_getUserMessage:output_type -> mtproto.MessageBox
	23, // 48: message.RPCMessage.message_getUserMessageList:output_type -> message.Vector_MessageBox
	23, // 49: message.RPCMessage.message_getUserMessageListByDataIdList:output_type -> message.Vector_MessageBox
	23, // 50: message.RPCMessage.message_getUserMessageListByDataIdUserIdList:output_type -> message.Vector_MessageBox
	23, // 51: message.RPCMessage.message_getHistoryMessages:output_type -> message.Vector_MessageBox
	29, // 52: message.RPCMessage.message_getHistoryMessagesCount:output_type -> mtproto.Int32
	29, // 53: message.RPCMessage.message_getPeerUserMessageId:output_type -> mtproto.Int32
	27, // 54: message.RPCMessage.message_getPeerUserMessage:output_type -> mtproto.MessageBox
	30, // 55: message.RPCMessage.message_searchByMediaType:output_type -> mtproto.MessageBoxList
	30, // 56: message.RPCMessage.message_search:output_type -> mtproto.MessageBoxList
	30, // 57: message.RPCMessage.message_searchGlobal:output_type -> mtproto.MessageBoxList
	30, // 58: message.RPCMessage.message_searchByPinned:output_type -> mtproto.MessageBoxList
	29, // 59: message.RPCMessage.message_getSearchCounter:output_type -> mtproto.Int32
	30, // 60: message.RPCMessage.message_searchV2:output_type -> mtproto.MessageBoxList
	24, // 61: message.RPCMessage.message_getLastTwoPinnedMessageId:output_type -> message.Vector_Int
	26, // 62: message.RPCMessage.message_updatePinnedMessageId:output_type -> mtproto.Bool
	24, // 63: message.RPCMessage.message_getPinnedMessageIdList:output_type -> message.Vector_Int
	24, // 64: message.RPCMessage.message_unPinAllMessages:output_type -> message.Vector_Int
	23, // 65: message.RPCMessage.message_getUnreadMentions:output_type -> message.Vector_MessageBox
	29, // 66: message.RPCMessage.message_getUnreadMentionsCount:output_type -> mtproto.Int32
	30, // 67: message.RPCMessage.message_getSavedHistoryMessages:output_type -> mtproto.MessageBoxList
	25, // 68: message.RPCMessage.message_getOutboxReadDate:output_type -> message.Vector_ReadParticipantDate
	47, // [47:69] is the sub-list for method output_type
	25, // [25:47] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_message_tl_proto_init() }
func file_message_tl_proto_init() {
	if File_message_tl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_tl_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageGetUserMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageGetUserMessageList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageGetUserMessageListByDataIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageGetUserMessageListByDataIdUserIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageGetHistoryMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageGetHistoryMessagesCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageGetPeerUserMessageId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageGetPeerUserMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageSearchByMediaType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageSearch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageSearchGlobal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageSearchByPinned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageGetSearchCounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageSearchV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageGetLastTwoPinnedMessageId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageUpdatePinnedMessageId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageGetPinnedMessageIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageUnPinAllMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageGetUnreadMentions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageGetUnreadMentionsCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageGetSavedHistoryMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*TLMessageGetOutboxReadDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Vector_MessageBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*Vector_Int); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_tl_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*Vector_ReadParticipantDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_tl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_message_tl_proto_goTypes,
		DependencyIndexes: file_message_tl_proto_depIdxs,
		EnumInfos:         file_message_tl_proto_enumTypes,
		MessageInfos:      file_message_tl_proto_msgTypes,
	}.Build()
	File_message_tl_proto = out.File
	file_message_tl_proto_rawDesc = nil
	file_message_tl_proto_goTypes = nil
	file_message_tl_proto_depIdxs = nil
}
