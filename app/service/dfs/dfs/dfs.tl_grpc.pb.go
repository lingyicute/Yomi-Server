//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: dfs.tl.proto

package dfs

import (
	context "context"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPCDfs_DfsWriteFilePartData_FullMethodName        = "/dfs.RPCDfs/dfs_writeFilePartData"
	RPCDfs_DfsUploadPhotoFileV2_FullMethodName        = "/dfs.RPCDfs/dfs_uploadPhotoFileV2"
	RPCDfs_DfsUploadProfilePhotoFileV2_FullMethodName = "/dfs.RPCDfs/dfs_uploadProfilePhotoFileV2"
	RPCDfs_DfsUploadEncryptedFileV2_FullMethodName    = "/dfs.RPCDfs/dfs_uploadEncryptedFileV2"
	RPCDfs_DfsDownloadFile_FullMethodName             = "/dfs.RPCDfs/dfs_downloadFile"
	RPCDfs_DfsUploadDocumentFileV2_FullMethodName     = "/dfs.RPCDfs/dfs_uploadDocumentFileV2"
	RPCDfs_DfsUploadGifDocumentMedia_FullMethodName   = "/dfs.RPCDfs/dfs_uploadGifDocumentMedia"
	RPCDfs_DfsUploadMp4DocumentMedia_FullMethodName   = "/dfs.RPCDfs/dfs_uploadMp4DocumentMedia"
	RPCDfs_DfsUploadWallPaperFile_FullMethodName      = "/dfs.RPCDfs/dfs_uploadWallPaperFile"
	RPCDfs_DfsUploadThemeFile_FullMethodName          = "/dfs.RPCDfs/dfs_uploadThemeFile"
	RPCDfs_DfsUploadRingtoneFile_FullMethodName       = "/dfs.RPCDfs/dfs_uploadRingtoneFile"
)

// RPCDfsClient is the client API for RPCDfs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCDfsClient interface {
	DfsWriteFilePartData(ctx context.Context, in *TLDfsWriteFilePartData, opts ...grpc.CallOption) (*mtproto.Bool, error)
	DfsUploadPhotoFileV2(ctx context.Context, in *TLDfsUploadPhotoFileV2, opts ...grpc.CallOption) (*mtproto.Photo, error)
	DfsUploadProfilePhotoFileV2(ctx context.Context, in *TLDfsUploadProfilePhotoFileV2, opts ...grpc.CallOption) (*mtproto.Photo, error)
	DfsUploadEncryptedFileV2(ctx context.Context, in *TLDfsUploadEncryptedFileV2, opts ...grpc.CallOption) (*mtproto.EncryptedFile, error)
	DfsDownloadFile(ctx context.Context, in *TLDfsDownloadFile, opts ...grpc.CallOption) (*mtproto.Upload_File, error)
	DfsUploadDocumentFileV2(ctx context.Context, in *TLDfsUploadDocumentFileV2, opts ...grpc.CallOption) (*mtproto.Document, error)
	DfsUploadGifDocumentMedia(ctx context.Context, in *TLDfsUploadGifDocumentMedia, opts ...grpc.CallOption) (*mtproto.Document, error)
	DfsUploadMp4DocumentMedia(ctx context.Context, in *TLDfsUploadMp4DocumentMedia, opts ...grpc.CallOption) (*mtproto.Document, error)
	DfsUploadWallPaperFile(ctx context.Context, in *TLDfsUploadWallPaperFile, opts ...grpc.CallOption) (*mtproto.Document, error)
	DfsUploadThemeFile(ctx context.Context, in *TLDfsUploadThemeFile, opts ...grpc.CallOption) (*mtproto.Document, error)
	DfsUploadRingtoneFile(ctx context.Context, in *TLDfsUploadRingtoneFile, opts ...grpc.CallOption) (*mtproto.Document, error)
}

type rPCDfsClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCDfsClient(cc grpc.ClientConnInterface) RPCDfsClient {
	return &rPCDfsClient{cc}
}

func (c *rPCDfsClient) DfsWriteFilePartData(ctx context.Context, in *TLDfsWriteFilePartData, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCDfs_DfsWriteFilePartData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDfsClient) DfsUploadPhotoFileV2(ctx context.Context, in *TLDfsUploadPhotoFileV2, opts ...grpc.CallOption) (*mtproto.Photo, error) {
	out := new(mtproto.Photo)
	err := c.cc.Invoke(ctx, RPCDfs_DfsUploadPhotoFileV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDfsClient) DfsUploadProfilePhotoFileV2(ctx context.Context, in *TLDfsUploadProfilePhotoFileV2, opts ...grpc.CallOption) (*mtproto.Photo, error) {
	out := new(mtproto.Photo)
	err := c.cc.Invoke(ctx, RPCDfs_DfsUploadProfilePhotoFileV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDfsClient) DfsUploadEncryptedFileV2(ctx context.Context, in *TLDfsUploadEncryptedFileV2, opts ...grpc.CallOption) (*mtproto.EncryptedFile, error) {
	out := new(mtproto.EncryptedFile)
	err := c.cc.Invoke(ctx, RPCDfs_DfsUploadEncryptedFileV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDfsClient) DfsDownloadFile(ctx context.Context, in *TLDfsDownloadFile, opts ...grpc.CallOption) (*mtproto.Upload_File, error) {
	out := new(mtproto.Upload_File)
	err := c.cc.Invoke(ctx, RPCDfs_DfsDownloadFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDfsClient) DfsUploadDocumentFileV2(ctx context.Context, in *TLDfsUploadDocumentFileV2, opts ...grpc.CallOption) (*mtproto.Document, error) {
	out := new(mtproto.Document)
	err := c.cc.Invoke(ctx, RPCDfs_DfsUploadDocumentFileV2_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDfsClient) DfsUploadGifDocumentMedia(ctx context.Context, in *TLDfsUploadGifDocumentMedia, opts ...grpc.CallOption) (*mtproto.Document, error) {
	out := new(mtproto.Document)
	err := c.cc.Invoke(ctx, RPCDfs_DfsUploadGifDocumentMedia_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDfsClient) DfsUploadMp4DocumentMedia(ctx context.Context, in *TLDfsUploadMp4DocumentMedia, opts ...grpc.CallOption) (*mtproto.Document, error) {
	out := new(mtproto.Document)
	err := c.cc.Invoke(ctx, RPCDfs_DfsUploadMp4DocumentMedia_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDfsClient) DfsUploadWallPaperFile(ctx context.Context, in *TLDfsUploadWallPaperFile, opts ...grpc.CallOption) (*mtproto.Document, error) {
	out := new(mtproto.Document)
	err := c.cc.Invoke(ctx, RPCDfs_DfsUploadWallPaperFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDfsClient) DfsUploadThemeFile(ctx context.Context, in *TLDfsUploadThemeFile, opts ...grpc.CallOption) (*mtproto.Document, error) {
	out := new(mtproto.Document)
	err := c.cc.Invoke(ctx, RPCDfs_DfsUploadThemeFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rPCDfsClient) DfsUploadRingtoneFile(ctx context.Context, in *TLDfsUploadRingtoneFile, opts ...grpc.CallOption) (*mtproto.Document, error) {
	out := new(mtproto.Document)
	err := c.cc.Invoke(ctx, RPCDfs_DfsUploadRingtoneFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCDfsServer is the server API for RPCDfs service.
// All implementations should embed UnimplementedRPCDfsServer
// for forward compatibility
type RPCDfsServer interface {
	DfsWriteFilePartData(context.Context, *TLDfsWriteFilePartData) (*mtproto.Bool, error)
	DfsUploadPhotoFileV2(context.Context, *TLDfsUploadPhotoFileV2) (*mtproto.Photo, error)
	DfsUploadProfilePhotoFileV2(context.Context, *TLDfsUploadProfilePhotoFileV2) (*mtproto.Photo, error)
	DfsUploadEncryptedFileV2(context.Context, *TLDfsUploadEncryptedFileV2) (*mtproto.EncryptedFile, error)
	DfsDownloadFile(context.Context, *TLDfsDownloadFile) (*mtproto.Upload_File, error)
	DfsUploadDocumentFileV2(context.Context, *TLDfsUploadDocumentFileV2) (*mtproto.Document, error)
	DfsUploadGifDocumentMedia(context.Context, *TLDfsUploadGifDocumentMedia) (*mtproto.Document, error)
	DfsUploadMp4DocumentMedia(context.Context, *TLDfsUploadMp4DocumentMedia) (*mtproto.Document, error)
	DfsUploadWallPaperFile(context.Context, *TLDfsUploadWallPaperFile) (*mtproto.Document, error)
	DfsUploadThemeFile(context.Context, *TLDfsUploadThemeFile) (*mtproto.Document, error)
	DfsUploadRingtoneFile(context.Context, *TLDfsUploadRingtoneFile) (*mtproto.Document, error)
}

// UnimplementedRPCDfsServer should be embedded to have forward compatible implementations.
type UnimplementedRPCDfsServer struct {
}

func (UnimplementedRPCDfsServer) DfsWriteFilePartData(context.Context, *TLDfsWriteFilePartData) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DfsWriteFilePartData not implemented")
}
func (UnimplementedRPCDfsServer) DfsUploadPhotoFileV2(context.Context, *TLDfsUploadPhotoFileV2) (*mtproto.Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DfsUploadPhotoFileV2 not implemented")
}
func (UnimplementedRPCDfsServer) DfsUploadProfilePhotoFileV2(context.Context, *TLDfsUploadProfilePhotoFileV2) (*mtproto.Photo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DfsUploadProfilePhotoFileV2 not implemented")
}
func (UnimplementedRPCDfsServer) DfsUploadEncryptedFileV2(context.Context, *TLDfsUploadEncryptedFileV2) (*mtproto.EncryptedFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DfsUploadEncryptedFileV2 not implemented")
}
func (UnimplementedRPCDfsServer) DfsDownloadFile(context.Context, *TLDfsDownloadFile) (*mtproto.Upload_File, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DfsDownloadFile not implemented")
}
func (UnimplementedRPCDfsServer) DfsUploadDocumentFileV2(context.Context, *TLDfsUploadDocumentFileV2) (*mtproto.Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DfsUploadDocumentFileV2 not implemented")
}
func (UnimplementedRPCDfsServer) DfsUploadGifDocumentMedia(context.Context, *TLDfsUploadGifDocumentMedia) (*mtproto.Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DfsUploadGifDocumentMedia not implemented")
}
func (UnimplementedRPCDfsServer) DfsUploadMp4DocumentMedia(context.Context, *TLDfsUploadMp4DocumentMedia) (*mtproto.Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DfsUploadMp4DocumentMedia not implemented")
}
func (UnimplementedRPCDfsServer) DfsUploadWallPaperFile(context.Context, *TLDfsUploadWallPaperFile) (*mtproto.Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DfsUploadWallPaperFile not implemented")
}
func (UnimplementedRPCDfsServer) DfsUploadThemeFile(context.Context, *TLDfsUploadThemeFile) (*mtproto.Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DfsUploadThemeFile not implemented")
}
func (UnimplementedRPCDfsServer) DfsUploadRingtoneFile(context.Context, *TLDfsUploadRingtoneFile) (*mtproto.Document, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DfsUploadRingtoneFile not implemented")
}

// UnsafeRPCDfsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCDfsServer will
// result in compilation errors.
type UnsafeRPCDfsServer interface {
	mustEmbedUnimplementedRPCDfsServer()
}

func RegisterRPCDfsServer(s grpc.ServiceRegistrar, srv RPCDfsServer) {
	s.RegisterService(&RPCDfs_ServiceDesc, srv)
}

func _RPCDfs_DfsWriteFilePartData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDfsWriteFilePartData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDfsServer).DfsWriteFilePartData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDfs_DfsWriteFilePartData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDfsServer).DfsWriteFilePartData(ctx, req.(*TLDfsWriteFilePartData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDfs_DfsUploadPhotoFileV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDfsUploadPhotoFileV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDfsServer).DfsUploadPhotoFileV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDfs_DfsUploadPhotoFileV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDfsServer).DfsUploadPhotoFileV2(ctx, req.(*TLDfsUploadPhotoFileV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDfs_DfsUploadProfilePhotoFileV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDfsUploadProfilePhotoFileV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDfsServer).DfsUploadProfilePhotoFileV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDfs_DfsUploadProfilePhotoFileV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDfsServer).DfsUploadProfilePhotoFileV2(ctx, req.(*TLDfsUploadProfilePhotoFileV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDfs_DfsUploadEncryptedFileV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDfsUploadEncryptedFileV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDfsServer).DfsUploadEncryptedFileV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDfs_DfsUploadEncryptedFileV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDfsServer).DfsUploadEncryptedFileV2(ctx, req.(*TLDfsUploadEncryptedFileV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDfs_DfsDownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDfsDownloadFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDfsServer).DfsDownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDfs_DfsDownloadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDfsServer).DfsDownloadFile(ctx, req.(*TLDfsDownloadFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDfs_DfsUploadDocumentFileV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDfsUploadDocumentFileV2)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDfsServer).DfsUploadDocumentFileV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDfs_DfsUploadDocumentFileV2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDfsServer).DfsUploadDocumentFileV2(ctx, req.(*TLDfsUploadDocumentFileV2))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDfs_DfsUploadGifDocumentMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDfsUploadGifDocumentMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDfsServer).DfsUploadGifDocumentMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDfs_DfsUploadGifDocumentMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDfsServer).DfsUploadGifDocumentMedia(ctx, req.(*TLDfsUploadGifDocumentMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDfs_DfsUploadMp4DocumentMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDfsUploadMp4DocumentMedia)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDfsServer).DfsUploadMp4DocumentMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDfs_DfsUploadMp4DocumentMedia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDfsServer).DfsUploadMp4DocumentMedia(ctx, req.(*TLDfsUploadMp4DocumentMedia))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDfs_DfsUploadWallPaperFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDfsUploadWallPaperFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDfsServer).DfsUploadWallPaperFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDfs_DfsUploadWallPaperFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDfsServer).DfsUploadWallPaperFile(ctx, req.(*TLDfsUploadWallPaperFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDfs_DfsUploadThemeFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDfsUploadThemeFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDfsServer).DfsUploadThemeFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDfs_DfsUploadThemeFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDfsServer).DfsUploadThemeFile(ctx, req.(*TLDfsUploadThemeFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _RPCDfs_DfsUploadRingtoneFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLDfsUploadRingtoneFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCDfsServer).DfsUploadRingtoneFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCDfs_DfsUploadRingtoneFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCDfsServer).DfsUploadRingtoneFile(ctx, req.(*TLDfsUploadRingtoneFile))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCDfs_ServiceDesc is the grpc.ServiceDesc for RPCDfs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCDfs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfs.RPCDfs",
	HandlerType: (*RPCDfsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "dfs_writeFilePartData",
			Handler:    _RPCDfs_DfsWriteFilePartData_Handler,
		},
		{
			MethodName: "dfs_uploadPhotoFileV2",
			Handler:    _RPCDfs_DfsUploadPhotoFileV2_Handler,
		},
		{
			MethodName: "dfs_uploadProfilePhotoFileV2",
			Handler:    _RPCDfs_DfsUploadProfilePhotoFileV2_Handler,
		},
		{
			MethodName: "dfs_uploadEncryptedFileV2",
			Handler:    _RPCDfs_DfsUploadEncryptedFileV2_Handler,
		},
		{
			MethodName: "dfs_downloadFile",
			Handler:    _RPCDfs_DfsDownloadFile_Handler,
		},
		{
			MethodName: "dfs_uploadDocumentFileV2",
			Handler:    _RPCDfs_DfsUploadDocumentFileV2_Handler,
		},
		{
			MethodName: "dfs_uploadGifDocumentMedia",
			Handler:    _RPCDfs_DfsUploadGifDocumentMedia_Handler,
		},
		{
			MethodName: "dfs_uploadMp4DocumentMedia",
			Handler:    _RPCDfs_DfsUploadMp4DocumentMedia_Handler,
		},
		{
			MethodName: "dfs_uploadWallPaperFile",
			Handler:    _RPCDfs_DfsUploadWallPaperFile_Handler,
		},
		{
			MethodName: "dfs_uploadThemeFile",
			Handler:    _RPCDfs_DfsUploadThemeFile_Handler,
		},
		{
			MethodName: "dfs_uploadRingtoneFile",
			Handler:    _RPCDfs_DfsUploadRingtoneFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dfs.tl.proto",
}
