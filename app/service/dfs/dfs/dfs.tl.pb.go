//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: dfs.tl.proto

package dfs

import (
	mtproto "github.com/teamgram/proto/mtproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLConstructor int32

const (
	TLConstructor_CRC32_UNKNOWN                      TLConstructor = 0
	TLConstructor_CRC32_dfs_writeFilePartData        TLConstructor = 440942855
	TLConstructor_CRC32_dfs_uploadPhotoFileV2        TLConstructor = 605082018
	TLConstructor_CRC32_dfs_uploadProfilePhotoFileV2 TLConstructor = -870473038
	TLConstructor_CRC32_dfs_uploadEncryptedFileV2    TLConstructor = 2043921699
	TLConstructor_CRC32_dfs_downloadFile             TLConstructor = -692064706
	TLConstructor_CRC32_dfs_uploadDocumentFileV2     TLConstructor = 1983081911
	TLConstructor_CRC32_dfs_uploadGifDocumentMedia   TLConstructor = 1103416576
	TLConstructor_CRC32_dfs_uploadMp4DocumentMedia   TLConstructor = -1566246888
	TLConstructor_CRC32_dfs_uploadWallPaperFile      TLConstructor = -1046081450
	TLConstructor_CRC32_dfs_uploadThemeFile          TLConstructor = -559525993
	TLConstructor_CRC32_dfs_uploadRingtoneFile       TLConstructor = 45335985
)

// Enum value maps for TLConstructor.
var (
	TLConstructor_name = map[int32]string{
		0:           "CRC32_UNKNOWN",
		440942855:   "CRC32_dfs_writeFilePartData",
		605082018:   "CRC32_dfs_uploadPhotoFileV2",
		-870473038:  "CRC32_dfs_uploadProfilePhotoFileV2",
		2043921699:  "CRC32_dfs_uploadEncryptedFileV2",
		-692064706:  "CRC32_dfs_downloadFile",
		1983081911:  "CRC32_dfs_uploadDocumentFileV2",
		1103416576:  "CRC32_dfs_uploadGifDocumentMedia",
		-1566246888: "CRC32_dfs_uploadMp4DocumentMedia",
		-1046081450: "CRC32_dfs_uploadWallPaperFile",
		-559525993:  "CRC32_dfs_uploadThemeFile",
		45335985:    "CRC32_dfs_uploadRingtoneFile",
	}
	TLConstructor_value = map[string]int32{
		"CRC32_UNKNOWN":                      0,
		"CRC32_dfs_writeFilePartData":        440942855,
		"CRC32_dfs_uploadPhotoFileV2":        605082018,
		"CRC32_dfs_uploadProfilePhotoFileV2": -870473038,
		"CRC32_dfs_uploadEncryptedFileV2":    2043921699,
		"CRC32_dfs_downloadFile":             -692064706,
		"CRC32_dfs_uploadDocumentFileV2":     1983081911,
		"CRC32_dfs_uploadGifDocumentMedia":   1103416576,
		"CRC32_dfs_uploadMp4DocumentMedia":   -1566246888,
		"CRC32_dfs_uploadWallPaperFile":      -1046081450,
		"CRC32_dfs_uploadThemeFile":          -559525993,
		"CRC32_dfs_uploadRingtoneFile":       45335985,
	}
)

func (x TLConstructor) Enum() *TLConstructor {
	p := new(TLConstructor)
	*p = x
	return p
}

func (x TLConstructor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLConstructor) Descriptor() protoreflect.EnumDescriptor {
	return file_dfs_tl_proto_enumTypes[0].Descriptor()
}

func (TLConstructor) Type() protoreflect.EnumType {
	return &file_dfs_tl_proto_enumTypes[0]
}

func (x TLConstructor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLConstructor.Descriptor instead.
func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return file_dfs_tl_proto_rawDescGZIP(), []int{0}
}

// --------------------------------------------------------------------------------------------
type TLDfsWriteFilePartData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor    TLConstructor          `protobuf:"varint,1,opt,name=constructor,proto3,enum=dfs.TLConstructor" json:"constructor,omitempty"`
	Creator        int64                  `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`
	FileId         int64                  `protobuf:"varint,4,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	FilePart       int32                  `protobuf:"varint,5,opt,name=file_part,json=filePart,proto3" json:"file_part,omitempty"`
	Bytes          []byte                 `protobuf:"bytes,6,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Big            bool                   `protobuf:"varint,7,opt,name=big,proto3" json:"big,omitempty"`
	FileTotalParts *wrapperspb.Int32Value `protobuf:"bytes,8,opt,name=file_total_parts,json=fileTotalParts,proto3" json:"file_total_parts,omitempty"`
}

func (x *TLDfsWriteFilePartData) Reset() {
	*x = TLDfsWriteFilePartData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfs_tl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDfsWriteFilePartData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDfsWriteFilePartData) ProtoMessage() {}

func (x *TLDfsWriteFilePartData) ProtoReflect() protoreflect.Message {
	mi := &file_dfs_tl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDfsWriteFilePartData.ProtoReflect.Descriptor instead.
func (*TLDfsWriteFilePartData) Descriptor() ([]byte, []int) {
	return file_dfs_tl_proto_rawDescGZIP(), []int{0}
}

func (x *TLDfsWriteFilePartData) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDfsWriteFilePartData) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *TLDfsWriteFilePartData) GetFileId() int64 {
	if x != nil {
		return x.FileId
	}
	return 0
}

func (x *TLDfsWriteFilePartData) GetFilePart() int32 {
	if x != nil {
		return x.FilePart
	}
	return 0
}

func (x *TLDfsWriteFilePartData) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *TLDfsWriteFilePartData) GetBig() bool {
	if x != nil {
		return x.Big
	}
	return false
}

func (x *TLDfsWriteFilePartData) GetFileTotalParts() *wrapperspb.Int32Value {
	if x != nil {
		return x.FileTotalParts
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDfsUploadPhotoFileV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=dfs.TLConstructor" json:"constructor,omitempty"`
	Creator     int64              `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`
	File        *mtproto.InputFile `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *TLDfsUploadPhotoFileV2) Reset() {
	*x = TLDfsUploadPhotoFileV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfs_tl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDfsUploadPhotoFileV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDfsUploadPhotoFileV2) ProtoMessage() {}

func (x *TLDfsUploadPhotoFileV2) ProtoReflect() protoreflect.Message {
	mi := &file_dfs_tl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDfsUploadPhotoFileV2.ProtoReflect.Descriptor instead.
func (*TLDfsUploadPhotoFileV2) Descriptor() ([]byte, []int) {
	return file_dfs_tl_proto_rawDescGZIP(), []int{1}
}

func (x *TLDfsUploadPhotoFileV2) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDfsUploadPhotoFileV2) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *TLDfsUploadPhotoFileV2) GetFile() *mtproto.InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDfsUploadProfilePhotoFileV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor  TLConstructor           `protobuf:"varint,1,opt,name=constructor,proto3,enum=dfs.TLConstructor" json:"constructor,omitempty"`
	Creator      int64                   `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`
	File         *mtproto.InputFile      `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	Video        *mtproto.InputFile      `protobuf:"bytes,5,opt,name=video,proto3" json:"video,omitempty"`
	VideoStartTs *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=video_start_ts,json=videoStartTs,proto3" json:"video_start_ts,omitempty"`
}

func (x *TLDfsUploadProfilePhotoFileV2) Reset() {
	*x = TLDfsUploadProfilePhotoFileV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfs_tl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDfsUploadProfilePhotoFileV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDfsUploadProfilePhotoFileV2) ProtoMessage() {}

func (x *TLDfsUploadProfilePhotoFileV2) ProtoReflect() protoreflect.Message {
	mi := &file_dfs_tl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDfsUploadProfilePhotoFileV2.ProtoReflect.Descriptor instead.
func (*TLDfsUploadProfilePhotoFileV2) Descriptor() ([]byte, []int) {
	return file_dfs_tl_proto_rawDescGZIP(), []int{2}
}

func (x *TLDfsUploadProfilePhotoFileV2) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDfsUploadProfilePhotoFileV2) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *TLDfsUploadProfilePhotoFileV2) GetFile() *mtproto.InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLDfsUploadProfilePhotoFileV2) GetVideo() *mtproto.InputFile {
	if x != nil {
		return x.Video
	}
	return nil
}

func (x *TLDfsUploadProfilePhotoFileV2) GetVideoStartTs() *wrapperspb.DoubleValue {
	if x != nil {
		return x.VideoStartTs
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDfsUploadEncryptedFileV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor               `protobuf:"varint,1,opt,name=constructor,proto3,enum=dfs.TLConstructor" json:"constructor,omitempty"`
	Creator     int64                       `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`
	File        *mtproto.InputEncryptedFile `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *TLDfsUploadEncryptedFileV2) Reset() {
	*x = TLDfsUploadEncryptedFileV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfs_tl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDfsUploadEncryptedFileV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDfsUploadEncryptedFileV2) ProtoMessage() {}

func (x *TLDfsUploadEncryptedFileV2) ProtoReflect() protoreflect.Message {
	mi := &file_dfs_tl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDfsUploadEncryptedFileV2.ProtoReflect.Descriptor instead.
func (*TLDfsUploadEncryptedFileV2) Descriptor() ([]byte, []int) {
	return file_dfs_tl_proto_rawDescGZIP(), []int{3}
}

func (x *TLDfsUploadEncryptedFileV2) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDfsUploadEncryptedFileV2) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *TLDfsUploadEncryptedFileV2) GetFile() *mtproto.InputEncryptedFile {
	if x != nil {
		return x.File
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDfsDownloadFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor              `protobuf:"varint,1,opt,name=constructor,proto3,enum=dfs.TLConstructor" json:"constructor,omitempty"`
	Location    *mtproto.InputFileLocation `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Offset      int64                      `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int32                      `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TLDfsDownloadFile) Reset() {
	*x = TLDfsDownloadFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfs_tl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDfsDownloadFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDfsDownloadFile) ProtoMessage() {}

func (x *TLDfsDownloadFile) ProtoReflect() protoreflect.Message {
	mi := &file_dfs_tl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDfsDownloadFile.ProtoReflect.Descriptor instead.
func (*TLDfsDownloadFile) Descriptor() ([]byte, []int) {
	return file_dfs_tl_proto_rawDescGZIP(), []int{4}
}

func (x *TLDfsDownloadFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDfsDownloadFile) GetLocation() *mtproto.InputFileLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *TLDfsDownloadFile) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TLDfsDownloadFile) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLDfsUploadDocumentFileV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=dfs.TLConstructor" json:"constructor,omitempty"`
	Creator     int64               `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Media       *mtproto.InputMedia `protobuf:"bytes,4,opt,name=media,proto3" json:"media,omitempty"`
}

func (x *TLDfsUploadDocumentFileV2) Reset() {
	*x = TLDfsUploadDocumentFileV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfs_tl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDfsUploadDocumentFileV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDfsUploadDocumentFileV2) ProtoMessage() {}

func (x *TLDfsUploadDocumentFileV2) ProtoReflect() protoreflect.Message {
	mi := &file_dfs_tl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDfsUploadDocumentFileV2.ProtoReflect.Descriptor instead.
func (*TLDfsUploadDocumentFileV2) Descriptor() ([]byte, []int) {
	return file_dfs_tl_proto_rawDescGZIP(), []int{5}
}

func (x *TLDfsUploadDocumentFileV2) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDfsUploadDocumentFileV2) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *TLDfsUploadDocumentFileV2) GetMedia() *mtproto.InputMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDfsUploadGifDocumentMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=dfs.TLConstructor" json:"constructor,omitempty"`
	Creator     int64               `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Media       *mtproto.InputMedia `protobuf:"bytes,4,opt,name=media,proto3" json:"media,omitempty"`
}

func (x *TLDfsUploadGifDocumentMedia) Reset() {
	*x = TLDfsUploadGifDocumentMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfs_tl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDfsUploadGifDocumentMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDfsUploadGifDocumentMedia) ProtoMessage() {}

func (x *TLDfsUploadGifDocumentMedia) ProtoReflect() protoreflect.Message {
	mi := &file_dfs_tl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDfsUploadGifDocumentMedia.ProtoReflect.Descriptor instead.
func (*TLDfsUploadGifDocumentMedia) Descriptor() ([]byte, []int) {
	return file_dfs_tl_proto_rawDescGZIP(), []int{6}
}

func (x *TLDfsUploadGifDocumentMedia) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDfsUploadGifDocumentMedia) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *TLDfsUploadGifDocumentMedia) GetMedia() *mtproto.InputMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDfsUploadMp4DocumentMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=dfs.TLConstructor" json:"constructor,omitempty"`
	Creator     int64               `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`
	Media       *mtproto.InputMedia `protobuf:"bytes,4,opt,name=media,proto3" json:"media,omitempty"`
}

func (x *TLDfsUploadMp4DocumentMedia) Reset() {
	*x = TLDfsUploadMp4DocumentMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfs_tl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDfsUploadMp4DocumentMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDfsUploadMp4DocumentMedia) ProtoMessage() {}

func (x *TLDfsUploadMp4DocumentMedia) ProtoReflect() protoreflect.Message {
	mi := &file_dfs_tl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDfsUploadMp4DocumentMedia.ProtoReflect.Descriptor instead.
func (*TLDfsUploadMp4DocumentMedia) Descriptor() ([]byte, []int) {
	return file_dfs_tl_proto_rawDescGZIP(), []int{7}
}

func (x *TLDfsUploadMp4DocumentMedia) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDfsUploadMp4DocumentMedia) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *TLDfsUploadMp4DocumentMedia) GetMedia() *mtproto.InputMedia {
	if x != nil {
		return x.Media
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDfsUploadWallPaperFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=dfs.TLConstructor" json:"constructor,omitempty"`
	Creator     int64              `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`
	File        *mtproto.InputFile `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	MimeType    string             `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	Admin       *mtproto.Bool      `protobuf:"bytes,6,opt,name=admin,proto3" json:"admin,omitempty"`
}

func (x *TLDfsUploadWallPaperFile) Reset() {
	*x = TLDfsUploadWallPaperFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfs_tl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDfsUploadWallPaperFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDfsUploadWallPaperFile) ProtoMessage() {}

func (x *TLDfsUploadWallPaperFile) ProtoReflect() protoreflect.Message {
	mi := &file_dfs_tl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDfsUploadWallPaperFile.ProtoReflect.Descriptor instead.
func (*TLDfsUploadWallPaperFile) Descriptor() ([]byte, []int) {
	return file_dfs_tl_proto_rawDescGZIP(), []int{8}
}

func (x *TLDfsUploadWallPaperFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDfsUploadWallPaperFile) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *TLDfsUploadWallPaperFile) GetFile() *mtproto.InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLDfsUploadWallPaperFile) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *TLDfsUploadWallPaperFile) GetAdmin() *mtproto.Bool {
	if x != nil {
		return x.Admin
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLDfsUploadThemeFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=dfs.TLConstructor" json:"constructor,omitempty"`
	Creator     int64              `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`
	File        *mtproto.InputFile `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	Thumb       *mtproto.InputFile `protobuf:"bytes,5,opt,name=thumb,proto3" json:"thumb,omitempty"`
	MimeType    string             `protobuf:"bytes,6,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	FileName    string             `protobuf:"bytes,7,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *TLDfsUploadThemeFile) Reset() {
	*x = TLDfsUploadThemeFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfs_tl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDfsUploadThemeFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDfsUploadThemeFile) ProtoMessage() {}

func (x *TLDfsUploadThemeFile) ProtoReflect() protoreflect.Message {
	mi := &file_dfs_tl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDfsUploadThemeFile.ProtoReflect.Descriptor instead.
func (*TLDfsUploadThemeFile) Descriptor() ([]byte, []int) {
	return file_dfs_tl_proto_rawDescGZIP(), []int{9}
}

func (x *TLDfsUploadThemeFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDfsUploadThemeFile) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *TLDfsUploadThemeFile) GetFile() *mtproto.InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLDfsUploadThemeFile) GetThumb() *mtproto.InputFile {
	if x != nil {
		return x.Thumb
	}
	return nil
}

func (x *TLDfsUploadThemeFile) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *TLDfsUploadThemeFile) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

// --------------------------------------------------------------------------------------------
type TLDfsUploadRingtoneFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor      `protobuf:"varint,1,opt,name=constructor,proto3,enum=dfs.TLConstructor" json:"constructor,omitempty"`
	Creator     int64              `protobuf:"varint,3,opt,name=creator,proto3" json:"creator,omitempty"`
	File        *mtproto.InputFile `protobuf:"bytes,4,opt,name=file,proto3" json:"file,omitempty"`
	MimeType    string             `protobuf:"bytes,5,opt,name=mime_type,json=mimeType,proto3" json:"mime_type,omitempty"`
	FileName    string             `protobuf:"bytes,6,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
}

func (x *TLDfsUploadRingtoneFile) Reset() {
	*x = TLDfsUploadRingtoneFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dfs_tl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLDfsUploadRingtoneFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLDfsUploadRingtoneFile) ProtoMessage() {}

func (x *TLDfsUploadRingtoneFile) ProtoReflect() protoreflect.Message {
	mi := &file_dfs_tl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLDfsUploadRingtoneFile.ProtoReflect.Descriptor instead.
func (*TLDfsUploadRingtoneFile) Descriptor() ([]byte, []int) {
	return file_dfs_tl_proto_rawDescGZIP(), []int{10}
}

func (x *TLDfsUploadRingtoneFile) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLDfsUploadRingtoneFile) GetCreator() int64 {
	if x != nil {
		return x.Creator
	}
	return 0
}

func (x *TLDfsUploadRingtoneFile) GetFile() *mtproto.InputFile {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *TLDfsUploadRingtoneFile) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *TLDfsUploadRingtoneFile) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

var File_dfs_tl_proto protoreflect.FileDescriptor

var file_dfs_tl_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x64, 0x66, 0x73, 0x2e, 0x74, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03,
	0x64, 0x66, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x8f, 0x02, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x69, 0x67,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x62, 0x69, 0x67, 0x12, 0x45, 0x0a, 0x10, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x72,
	0x74, 0x73, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x87, 0x02, 0x0a, 0x1f, 0x54, 0x4c, 0x5f, 0x64,
	0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x12, 0x42, 0x0a,
	0x0e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x73, 0x22, 0x9f, 0x01, 0x0a, 0x1c, 0x54, 0x4c, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65,
	0x56, 0x32, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x54, 0x4c, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x36, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x1b, 0x54, 0x4c, 0x5f, 0x64,
	0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64,
	0x66, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x22, 0x9a, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x47, 0x69, 0x66, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x66, 0x73, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x22,
	0x9a, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x4d, 0x70, 0x34, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x29, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x22, 0xd6, 0x01, 0x0a,
	0x1a, 0x54, 0x4c, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x61,
	0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x05, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x05,
	0x61, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0xf4, 0x01, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x64, 0x66, 0x73,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x74, 0x68, 0x75,
	0x6d, 0x62, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xcd, 0x01, 0x0a,
	0x19, 0x54, 0x4c, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x69,
	0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0xe5, 0x03, 0x0a,
	0x0d, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x23, 0x0a, 0x1b, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x10, 0x87, 0x82, 0xa1, 0xd2, 0x01, 0x12, 0x23, 0x0a, 0x1b, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f,
	0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46,
	0x69, 0x6c, 0x65, 0x56, 0x32, 0x10, 0xa2, 0xa3, 0xc3, 0xa0, 0x02, 0x12, 0x2f, 0x0a, 0x22, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56,
	0x32, 0x10, 0xb2, 0xc5, 0xf6, 0xe0, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27, 0x0a, 0x1f,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x10,
	0xa3, 0x8a, 0xcf, 0xce, 0x07, 0x12, 0x23, 0x0a, 0x16, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64,
	0x66, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x10,
	0xbe, 0xdc, 0xff, 0xb5, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x1e, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x10, 0xb7, 0xdb, 0xcd,
	0xb1, 0x07, 0x12, 0x28, 0x0a, 0x20, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x66, 0x73, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x69, 0x66, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x10, 0x80, 0x9a, 0x93, 0x8e, 0x04, 0x12, 0x2d, 0x0a, 0x20,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x4d, 0x70, 0x34, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x10, 0x98, 0xf0, 0x93, 0x95, 0xfa, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x2a, 0x0a, 0x1d, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x57,
	0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x10, 0xd6, 0xa0, 0x98,
	0x8d, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x26, 0x0a, 0x19, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65,
	0x46, 0x69, 0x6c, 0x65, 0x10, 0x97, 0x9f, 0x99, 0xf5, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12,
	0x23, 0x0a, 0x1c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x10,
	0xb1, 0x8b, 0xcf, 0x15, 0x32, 0xfd, 0x06, 0x0a, 0x06, 0x52, 0x50, 0x43, 0x44, 0x66, 0x73, 0x12,
	0x47, 0x0a, 0x15, 0x64, 0x66, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54,
	0x4c, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x15, 0x64, 0x66, 0x73, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56,
	0x32, 0x12, 0x1d, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x32,
	0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f,
	0x22, 0x00, 0x12, 0x56, 0x0a, 0x1c, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65,
	0x56, 0x32, 0x12, 0x24, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x66, 0x73, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x68, 0x6f,
	0x74, 0x6f, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x1a, 0x0e, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x19, 0x64, 0x66,
	0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x21, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c,
	0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x1a, 0x16, 0x2e, 0x6d, 0x74, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x64, 0x66, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54,
	0x4c, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x46, 0x69,
	0x6c, 0x65, 0x1a, 0x14, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x46, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x18, 0x64, 0x66,
	0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x12, 0x20, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c, 0x5f,
	0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x56, 0x32, 0x1a, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a,
	0x1a, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x69, 0x66, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x22, 0x2e, 0x64, 0x66,
	0x73, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47,
	0x69, 0x66, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a,
	0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x1a, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x4d, 0x70, 0x34, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x12, 0x22, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x66, 0x73, 0x5f,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x70, 0x34, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x1a, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x17, 0x64,
	0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x70,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c, 0x5f,
	0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x61, 0x6c, 0x6c, 0x50, 0x61,
	0x70, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x65, 0x1a, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x13,
	0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x66, 0x73,
	0x5f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x46, 0x69, 0x6c, 0x65,
	0x1a, 0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x16, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x12,
	0x1e, 0x2e, 0x64, 0x66, 0x73, 0x2e, 0x54, 0x4c, 0x5f, 0x64, 0x66, 0x73, 0x5f, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x52, 0x69, 0x6e, 0x67, 0x74, 0x6f, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x1a,
	0x11, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x00, 0x42, 0x39, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d,
	0x67, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x70, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x64, 0x66, 0x73, 0x2f, 0x64, 0x66, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dfs_tl_proto_rawDescOnce sync.Once
	file_dfs_tl_proto_rawDescData = file_dfs_tl_proto_rawDesc
)

func file_dfs_tl_proto_rawDescGZIP() []byte {
	file_dfs_tl_proto_rawDescOnce.Do(func() {
		file_dfs_tl_proto_rawDescData = protoimpl.X.CompressGZIP(file_dfs_tl_proto_rawDescData)
	})
	return file_dfs_tl_proto_rawDescData
}

var file_dfs_tl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dfs_tl_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_dfs_tl_proto_goTypes = []interface{}{
	(TLConstructor)(0),                    // 0: dfs.TLConstructor
	(*TLDfsWriteFilePartData)(nil),        // 1: dfs.TL_dfs_writeFilePartData
	(*TLDfsUploadPhotoFileV2)(nil),        // 2: dfs.TL_dfs_uploadPhotoFileV2
	(*TLDfsUploadProfilePhotoFileV2)(nil), // 3: dfs.TL_dfs_uploadProfilePhotoFileV2
	(*TLDfsUploadEncryptedFileV2)(nil),    // 4: dfs.TL_dfs_uploadEncryptedFileV2
	(*TLDfsDownloadFile)(nil),             // 5: dfs.TL_dfs_downloadFile
	(*TLDfsUploadDocumentFileV2)(nil),     // 6: dfs.TL_dfs_uploadDocumentFileV2
	(*TLDfsUploadGifDocumentMedia)(nil),   // 7: dfs.TL_dfs_uploadGifDocumentMedia
	(*TLDfsUploadMp4DocumentMedia)(nil),   // 8: dfs.TL_dfs_uploadMp4DocumentMedia
	(*TLDfsUploadWallPaperFile)(nil),      // 9: dfs.TL_dfs_uploadWallPaperFile
	(*TLDfsUploadThemeFile)(nil),          // 10: dfs.TL_dfs_uploadThemeFile
	(*TLDfsUploadRingtoneFile)(nil),       // 11: dfs.TL_dfs_uploadRingtoneFile
	(*wrapperspb.Int32Value)(nil),         // 12: google.protobuf.Int32Value
	(*mtproto.InputFile)(nil),             // 13: mtproto.InputFile
	(*wrapperspb.DoubleValue)(nil),        // 14: google.protobuf.DoubleValue
	(*mtproto.InputEncryptedFile)(nil),    // 15: mtproto.InputEncryptedFile
	(*mtproto.InputFileLocation)(nil),     // 16: mtproto.InputFileLocation
	(*mtproto.InputMedia)(nil),            // 17: mtproto.InputMedia
	(*mtproto.Bool)(nil),                  // 18: mtproto.Bool
	(*mtproto.Photo)(nil),                 // 19: mtproto.Photo
	(*mtproto.EncryptedFile)(nil),         // 20: mtproto.EncryptedFile
	(*mtproto.Upload_File)(nil),           // 21: mtproto.upload_File
	(*mtproto.Document)(nil),              // 22: mtproto.Document
}
var file_dfs_tl_proto_depIdxs = []int32{
	0,  // 0: dfs.TL_dfs_writeFilePartData.constructor:type_name -> dfs.TLConstructor
	12, // 1: dfs.TL_dfs_writeFilePartData.file_total_parts:type_name -> google.protobuf.Int32Value
	0,  // 2: dfs.TL_dfs_uploadPhotoFileV2.constructor:type_name -> dfs.TLConstructor
	13, // 3: dfs.TL_dfs_uploadPhotoFileV2.file:type_name -> mtproto.InputFile
	0,  // 4: dfs.TL_dfs_uploadProfilePhotoFileV2.constructor:type_name -> dfs.TLConstructor
	13, // 5: dfs.TL_dfs_uploadProfilePhotoFileV2.file:type_name -> mtproto.InputFile
	13, // 6: dfs.TL_dfs_uploadProfilePhotoFileV2.video:type_name -> mtproto.InputFile
	14, // 7: dfs.TL_dfs_uploadProfilePhotoFileV2.video_start_ts:type_name -> google.protobuf.DoubleValue
	0,  // 8: dfs.TL_dfs_uploadEncryptedFileV2.constructor:type_name -> dfs.TLConstructor
	15, // 9: dfs.TL_dfs_uploadEncryptedFileV2.file:type_name -> mtproto.InputEncryptedFile
	0,  // 10: dfs.TL_dfs_downloadFile.constructor:type_name -> dfs.TLConstructor
	16, // 11: dfs.TL_dfs_downloadFile.location:type_name -> mtproto.InputFileLocation
	0,  // 12: dfs.TL_dfs_uploadDocumentFileV2.constructor:type_name -> dfs.TLConstructor
	17, // 13: dfs.TL_dfs_uploadDocumentFileV2.media:type_name -> mtproto.InputMedia
	0,  // 14: dfs.TL_dfs_uploadGifDocumentMedia.constructor:type_name -> dfs.TLConstructor
	17, // 15: dfs.TL_dfs_uploadGifDocumentMedia.media:type_name -> mtproto.InputMedia
	0,  // 16: dfs.TL_dfs_uploadMp4DocumentMedia.constructor:type_name -> dfs.TLConstructor
	17, // 17: dfs.TL_dfs_uploadMp4DocumentMedia.media:type_name -> mtproto.InputMedia
	0,  // 18: dfs.TL_dfs_uploadWallPaperFile.constructor:type_name -> dfs.TLConstructor
	13, // 19: dfs.TL_dfs_uploadWallPaperFile.file:type_name -> mtproto.InputFile
	18, // 20: dfs.TL_dfs_uploadWallPaperFile.admin:type_name -> mtproto.Bool
	0,  // 21: dfs.TL_dfs_uploadThemeFile.constructor:type_name -> dfs.TLConstructor
	13, // 22: dfs.TL_dfs_uploadThemeFile.file:type_name -> mtproto.InputFile
	13, // 23: dfs.TL_dfs_uploadThemeFile.thumb:type_name -> mtproto.InputFile
	0,  // 24: dfs.TL_dfs_uploadRingtoneFile.constructor:type_name -> dfs.TLConstructor
	13, // 25: dfs.TL_dfs_uploadRingtoneFile.file:type_name -> mtproto.InputFile
	1,  // 26: dfs.RPCDfs.dfs_writeFilePartData:input_type -> dfs.TL_dfs_writeFilePartData
	2,  // 27: dfs.RPCDfs.dfs_uploadPhotoFileV2:input_type -> dfs.TL_dfs_uploadPhotoFileV2
	3,  // 28: dfs.RPCDfs.dfs_uploadProfilePhotoFileV2:input_type -> dfs.TL_dfs_uploadProfilePhotoFileV2
	4,  // 29: dfs.RPCDfs.dfs_uploadEncryptedFileV2:input_type -> dfs.TL_dfs_uploadEncryptedFileV2
	5,  // 30: dfs.RPCDfs.dfs_downloadFile:input_type -> dfs.TL_dfs_downloadFile
	6,  // 31: dfs.RPCDfs.dfs_uploadDocumentFileV2:input_type -> dfs.TL_dfs_uploadDocumentFileV2
	7,  // 32: dfs.RPCDfs.dfs_uploadGifDocumentMedia:input_type -> dfs.TL_dfs_uploadGifDocumentMedia
	8,  // 33: dfs.RPCDfs.dfs_uploadMp4DocumentMedia:input_type -> dfs.TL_dfs_uploadMp4DocumentMedia
	9,  // 34: dfs.RPCDfs.dfs_uploadWallPaperFile:input_type -> dfs.TL_dfs_uploadWallPaperFile
	10, // 35: dfs.RPCDfs.dfs_uploadThemeFile:input_type -> dfs.TL_dfs_uploadThemeFile
	11, // 36: dfs.RPCDfs.dfs_uploadRingtoneFile:input_type -> dfs.TL_dfs_uploadRingtoneFile
	18, // 37: dfs.RPCDfs.dfs_writeFilePartData:output_type -> mtproto.Bool
	19, // 38: dfs.RPCDfs.dfs_uploadPhotoFileV2:output_type -> mtproto.Photo
	19, // 39: dfs.RPCDfs.dfs_uploadProfilePhotoFileV2:output_type -> mtproto.Photo
	20, // 40: dfs.RPCDfs.dfs_uploadEncryptedFileV2:output_type -> mtproto.EncryptedFile
	21, // 41: dfs.RPCDfs.dfs_downloadFile:output_type -> mtproto.upload_File
	22, // 42: dfs.RPCDfs.dfs_uploadDocumentFileV2:output_type -> mtproto.Document
	22, // 43: dfs.RPCDfs.dfs_uploadGifDocumentMedia:output_type -> mtproto.Document
	22, // 44: dfs.RPCDfs.dfs_uploadMp4DocumentMedia:output_type -> mtproto.Document
	22, // 45: dfs.RPCDfs.dfs_uploadWallPaperFile:output_type -> mtproto.Document
	22, // 46: dfs.RPCDfs.dfs_uploadThemeFile:output_type -> mtproto.Document
	22, // 47: dfs.RPCDfs.dfs_uploadRingtoneFile:output_type -> mtproto.Document
	37, // [37:48] is the sub-list for method output_type
	26, // [26:37] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_dfs_tl_proto_init() }
func file_dfs_tl_proto_init() {
	if File_dfs_tl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dfs_tl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDfsWriteFilePartData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfs_tl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDfsUploadPhotoFileV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfs_tl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDfsUploadProfilePhotoFileV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfs_tl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDfsUploadEncryptedFileV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfs_tl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDfsDownloadFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfs_tl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDfsUploadDocumentFileV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfs_tl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDfsUploadGifDocumentMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfs_tl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDfsUploadMp4DocumentMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfs_tl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDfsUploadWallPaperFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfs_tl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDfsUploadThemeFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dfs_tl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLDfsUploadRingtoneFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dfs_tl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dfs_tl_proto_goTypes,
		DependencyIndexes: file_dfs_tl_proto_depIdxs,
		EnumInfos:         file_dfs_tl_proto_enumTypes,
		MessageInfos:      file_dfs_tl_proto_msgTypes,
	}.Build()
	File_dfs_tl_proto = out.File
	file_dfs_tl_proto_rawDesc = nil
	file_dfs_tl_proto_goTypes = nil
	file_dfs_tl_proto_depIdxs = nil
}
