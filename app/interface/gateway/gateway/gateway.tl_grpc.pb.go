//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: gateway.tl.proto

package gateway

import (
	context "context"
	mtproto "github.com/teamgram/proto/mtproto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPCGateway_GatewaySendDataToGateway_FullMethodName = "/gateway.RPCGateway/gateway_sendDataToGateway"
)

// RPCGatewayClient is the client API for RPCGateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCGatewayClient interface {
	GatewaySendDataToGateway(ctx context.Context, in *TLGatewaySendDataToGateway, opts ...grpc.CallOption) (*mtproto.Bool, error)
}

type rPCGatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCGatewayClient(cc grpc.ClientConnInterface) RPCGatewayClient {
	return &rPCGatewayClient{cc}
}

func (c *rPCGatewayClient) GatewaySendDataToGateway(ctx context.Context, in *TLGatewaySendDataToGateway, opts ...grpc.CallOption) (*mtproto.Bool, error) {
	out := new(mtproto.Bool)
	err := c.cc.Invoke(ctx, RPCGateway_GatewaySendDataToGateway_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RPCGatewayServer is the server API for RPCGateway service.
// All implementations should embed UnimplementedRPCGatewayServer
// for forward compatibility
type RPCGatewayServer interface {
	GatewaySendDataToGateway(context.Context, *TLGatewaySendDataToGateway) (*mtproto.Bool, error)
}

// UnimplementedRPCGatewayServer should be embedded to have forward compatible implementations.
type UnimplementedRPCGatewayServer struct {
}

func (UnimplementedRPCGatewayServer) GatewaySendDataToGateway(context.Context, *TLGatewaySendDataToGateway) (*mtproto.Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewaySendDataToGateway not implemented")
}

// UnsafeRPCGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCGatewayServer will
// result in compilation errors.
type UnsafeRPCGatewayServer interface {
	mustEmbedUnimplementedRPCGatewayServer()
}

func RegisterRPCGatewayServer(s grpc.ServiceRegistrar, srv RPCGatewayServer) {
	s.RegisterService(&RPCGateway_ServiceDesc, srv)
}

func _RPCGateway_GatewaySendDataToGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TLGatewaySendDataToGateway)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RPCGatewayServer).GatewaySendDataToGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RPCGateway_GatewaySendDataToGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RPCGatewayServer).GatewaySendDataToGateway(ctx, req.(*TLGatewaySendDataToGateway))
	}
	return interceptor(ctx, in, info, handler)
}

// RPCGateway_ServiceDesc is the grpc.ServiceDesc for RPCGateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPCGateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.RPCGateway",
	HandlerType: (*RPCGatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "gateway_sendDataToGateway",
			Handler:    _RPCGateway_GatewaySendDataToGateway_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.tl.proto",
}
