//
// WARNING! All changes made in this file will be lost!
// Created from 'scheme.tl' by 'mtprotoc'
//
// Copyright (c) 2024-present,  Teamgram Authors.
//  All rights reserved.
//
// Author: Benqi (wubenqi@gmail.com)

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: msg.tl.proto

package msg

import (
	mtproto "github.com/teamgram/proto/mtproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TLConstructor int32

const (
	TLConstructor_CRC32_UNKNOWN                    TLConstructor = 0
	TLConstructor_CRC32_sender                     TLConstructor = 1513645242
	TLConstructor_CRC32_outboxMessage              TLConstructor = 1402283185
	TLConstructor_CRC32_contentMessage             TLConstructor = -1922780877
	TLConstructor_CRC32_msg_pushUserMessage        TLConstructor = 902887962
	TLConstructor_CRC32_msg_readMessageContents    TLConstructor = 673481940
	TLConstructor_CRC32_msg_sendMessageV2          TLConstructor = -188056380
	TLConstructor_CRC32_msg_editMessage            TLConstructor = -2129725231
	TLConstructor_CRC32_msg_editMessageV2          TLConstructor = 1778278369
	TLConstructor_CRC32_msg_deleteMessages         TLConstructor = 568855069
	TLConstructor_CRC32_msg_deleteHistory          TLConstructor = 1975576778
	TLConstructor_CRC32_msg_deletePhoneCallHistory TLConstructor = 649568574
	TLConstructor_CRC32_msg_deleteChatHistory      TLConstructor = -283155749
	TLConstructor_CRC32_msg_readHistory            TLConstructor = 1510960658
	TLConstructor_CRC32_msg_readHistoryV2          TLConstructor = 263827974
	TLConstructor_CRC32_msg_updatePinnedMessage    TLConstructor = -441560663
	TLConstructor_CRC32_msg_unpinAllMessages       TLConstructor = -1199153371
)

// Enum value maps for TLConstructor.
var (
	TLConstructor_name = map[int32]string{
		0:           "CRC32_UNKNOWN",
		1513645242:  "CRC32_sender",
		1402283185:  "CRC32_outboxMessage",
		-1922780877: "CRC32_contentMessage",
		902887962:   "CRC32_msg_pushUserMessage",
		673481940:   "CRC32_msg_readMessageContents",
		-188056380:  "CRC32_msg_sendMessageV2",
		-2129725231: "CRC32_msg_editMessage",
		1778278369:  "CRC32_msg_editMessageV2",
		568855069:   "CRC32_msg_deleteMessages",
		1975576778:  "CRC32_msg_deleteHistory",
		649568574:   "CRC32_msg_deletePhoneCallHistory",
		-283155749:  "CRC32_msg_deleteChatHistory",
		1510960658:  "CRC32_msg_readHistory",
		263827974:   "CRC32_msg_readHistoryV2",
		-441560663:  "CRC32_msg_updatePinnedMessage",
		-1199153371: "CRC32_msg_unpinAllMessages",
	}
	TLConstructor_value = map[string]int32{
		"CRC32_UNKNOWN":                    0,
		"CRC32_sender":                     1513645242,
		"CRC32_outboxMessage":              1402283185,
		"CRC32_contentMessage":             -1922780877,
		"CRC32_msg_pushUserMessage":        902887962,
		"CRC32_msg_readMessageContents":    673481940,
		"CRC32_msg_sendMessageV2":          -188056380,
		"CRC32_msg_editMessage":            -2129725231,
		"CRC32_msg_editMessageV2":          1778278369,
		"CRC32_msg_deleteMessages":         568855069,
		"CRC32_msg_deleteHistory":          1975576778,
		"CRC32_msg_deletePhoneCallHistory": 649568574,
		"CRC32_msg_deleteChatHistory":      -283155749,
		"CRC32_msg_readHistory":            1510960658,
		"CRC32_msg_readHistoryV2":          263827974,
		"CRC32_msg_updatePinnedMessage":    -441560663,
		"CRC32_msg_unpinAllMessages":       -1199153371,
	}
)

func (x TLConstructor) Enum() *TLConstructor {
	p := new(TLConstructor)
	*p = x
	return p
}

func (x TLConstructor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLConstructor) Descriptor() protoreflect.EnumDescriptor {
	return file_msg_tl_proto_enumTypes[0].Descriptor()
}

func (TLConstructor) Type() protoreflect.EnumType {
	return &file_msg_tl_proto_enumTypes[0]
}

func (x TLConstructor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLConstructor.Descriptor instead.
func (TLConstructor) EnumDescriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{0}
}

// ContentMessage <--
//   - TL_contentMessage
type ContentMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName   string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor     TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	Id              int32         `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	DialogMessageId int64         `protobuf:"varint,4,opt,name=dialog_message_id,json=dialogMessageId,proto3" json:"dialog_message_id,omitempty"`
	Mentioned       bool          `protobuf:"varint,5,opt,name=mentioned,proto3" json:"mentioned,omitempty"`
	MediaUnread     bool          `protobuf:"varint,6,opt,name=media_unread,json=mediaUnread,proto3" json:"media_unread,omitempty"`
	Reaction        bool          `protobuf:"varint,7,opt,name=reaction,proto3" json:"reaction,omitempty"`
	SendUserId      int64         `protobuf:"varint,8,opt,name=send_user_id,json=sendUserId,proto3" json:"send_user_id,omitempty"`
}

func (x *ContentMessage) Reset() {
	*x = ContentMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContentMessage) ProtoMessage() {}

func (x *ContentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContentMessage.ProtoReflect.Descriptor instead.
func (*ContentMessage) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{0}
}

func (x *ContentMessage) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *ContentMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *ContentMessage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ContentMessage) GetDialogMessageId() int64 {
	if x != nil {
		return x.DialogMessageId
	}
	return 0
}

func (x *ContentMessage) GetMentioned() bool {
	if x != nil {
		return x.Mentioned
	}
	return false
}

func (x *ContentMessage) GetMediaUnread() bool {
	if x != nil {
		return x.MediaUnread
	}
	return false
}

func (x *ContentMessage) GetReaction() bool {
	if x != nil {
		return x.Reaction
	}
	return false
}

func (x *ContentMessage) GetSendUserId() int64 {
	if x != nil {
		return x.SendUserId
	}
	return 0
}

type TLContentMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *ContentMessage `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLContentMessage) Reset() {
	*x = TLContentMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLContentMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLContentMessage) ProtoMessage() {}

func (x *TLContentMessage) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLContentMessage.ProtoReflect.Descriptor instead.
func (*TLContentMessage) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{1}
}

func (x *TLContentMessage) GetData2() *ContentMessage {
	if x != nil {
		return x.Data2
	}
	return nil
}

// OutboxMessage <--
//   - TL_outboxMessage
type OutboxMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string                 `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor          `protobuf:"varint,2,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	NoWebpage     bool                   `protobuf:"varint,3,opt,name=no_webpage,json=noWebpage,proto3" json:"no_webpage,omitempty"`
	Background    bool                   `protobuf:"varint,4,opt,name=background,proto3" json:"background,omitempty"`
	RandomId      int64                  `protobuf:"varint,5,opt,name=random_id,json=randomId,proto3" json:"random_id,omitempty"`
	Message       *mtproto.Message       `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	ScheduleDate  *wrapperspb.Int32Value `protobuf:"bytes,7,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
}

func (x *OutboxMessage) Reset() {
	*x = OutboxMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutboxMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutboxMessage) ProtoMessage() {}

func (x *OutboxMessage) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutboxMessage.ProtoReflect.Descriptor instead.
func (*OutboxMessage) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{2}
}

func (x *OutboxMessage) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *OutboxMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *OutboxMessage) GetNoWebpage() bool {
	if x != nil {
		return x.NoWebpage
	}
	return false
}

func (x *OutboxMessage) GetBackground() bool {
	if x != nil {
		return x.Background
	}
	return false
}

func (x *OutboxMessage) GetRandomId() int64 {
	if x != nil {
		return x.RandomId
	}
	return 0
}

func (x *OutboxMessage) GetMessage() *mtproto.Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *OutboxMessage) GetScheduleDate() *wrapperspb.Int32Value {
	if x != nil {
		return x.ScheduleDate
	}
	return nil
}

type TLOutboxMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *OutboxMessage `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLOutboxMessage) Reset() {
	*x = TLOutboxMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLOutboxMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLOutboxMessage) ProtoMessage() {}

func (x *TLOutboxMessage) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLOutboxMessage.ProtoReflect.Descriptor instead.
func (*TLOutboxMessage) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{3}
}

func (x *TLOutboxMessage) GetData2() *OutboxMessage {
	if x != nil {
		return x.Data2
	}
	return nil
}

// Sender <--
//   - TL_sender
type Sender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PredicateName string        `protobuf:"bytes,1,opt,name=predicate_name,json=predicateName,proto3" json:"predicate_name,omitempty"`
	Constructor   TLConstructor `protobuf:"varint,2,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	UserId        int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Type          int32         `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	AuthKeyId     int64         `protobuf:"varint,5,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
}

func (x *Sender) Reset() {
	*x = Sender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sender) ProtoMessage() {}

func (x *Sender) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sender.ProtoReflect.Descriptor instead.
func (*Sender) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{4}
}

func (x *Sender) GetPredicateName() string {
	if x != nil {
		return x.PredicateName
	}
	return ""
}

func (x *Sender) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *Sender) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Sender) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Sender) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

type TLSender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data2 *Sender `protobuf:"bytes,1,opt,name=data2,proto3" json:"data2,omitempty"`
}

func (x *TLSender) Reset() {
	*x = TLSender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSender) ProtoMessage() {}

func (x *TLSender) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSender.ProtoReflect.Descriptor instead.
func (*TLSender) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{5}
}

func (x *TLSender) GetData2() *Sender {
	if x != nil {
		return x.Data2
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMsgPushUserMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor  `protobuf:"varint,1,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	UserId      int64          `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64          `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	PeerType    int32          `protobuf:"varint,5,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64          `protobuf:"varint,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	PushType    int32          `protobuf:"varint,7,opt,name=push_type,json=pushType,proto3" json:"push_type,omitempty"`
	Message     *OutboxMessage `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TLMsgPushUserMessage) Reset() {
	*x = TLMsgPushUserMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMsgPushUserMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMsgPushUserMessage) ProtoMessage() {}

func (x *TLMsgPushUserMessage) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMsgPushUserMessage.ProtoReflect.Descriptor instead.
func (*TLMsgPushUserMessage) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{6}
}

func (x *TLMsgPushUserMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMsgPushUserMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMsgPushUserMessage) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLMsgPushUserMessage) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMsgPushUserMessage) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMsgPushUserMessage) GetPushType() int32 {
	if x != nil {
		return x.PushType
	}
	return 0
}

func (x *TLMsgPushUserMessage) GetMessage() *OutboxMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMsgReadMessageContents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor     `protobuf:"varint,1,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	UserId      int64             `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64             `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	PeerType    int32             `protobuf:"varint,5,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64             `protobuf:"varint,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Id          []*ContentMessage `protobuf:"bytes,7,rep,name=id,proto3" json:"id,omitempty"`
}

func (x *TLMsgReadMessageContents) Reset() {
	*x = TLMsgReadMessageContents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMsgReadMessageContents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMsgReadMessageContents) ProtoMessage() {}

func (x *TLMsgReadMessageContents) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMsgReadMessageContents.ProtoReflect.Descriptor instead.
func (*TLMsgReadMessageContents) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{7}
}

func (x *TLMsgReadMessageContents) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMsgReadMessageContents) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMsgReadMessageContents) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLMsgReadMessageContents) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMsgReadMessageContents) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMsgReadMessageContents) GetId() []*ContentMessage {
	if x != nil {
		return x.Id
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMsgSendMessageV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor    `protobuf:"varint,1,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	UserId      int64            `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64            `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	PeerType    int32            `protobuf:"varint,5,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64            `protobuf:"varint,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Message     []*OutboxMessage `protobuf:"bytes,7,rep,name=message,proto3" json:"message,omitempty"`
}

func (x *TLMsgSendMessageV2) Reset() {
	*x = TLMsgSendMessageV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMsgSendMessageV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMsgSendMessageV2) ProtoMessage() {}

func (x *TLMsgSendMessageV2) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMsgSendMessageV2.ProtoReflect.Descriptor instead.
func (*TLMsgSendMessageV2) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{8}
}

func (x *TLMsgSendMessageV2) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMsgSendMessageV2) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMsgSendMessageV2) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLMsgSendMessageV2) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMsgSendMessageV2) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMsgSendMessageV2) GetMessage() []*OutboxMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMsgEditMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor  `protobuf:"varint,1,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	UserId      int64          `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64          `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	PeerType    int32          `protobuf:"varint,5,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64          `protobuf:"varint,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	EditType    int32          `protobuf:"varint,7,opt,name=edit_type,json=editType,proto3" json:"edit_type,omitempty"`
	Message     *OutboxMessage `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TLMsgEditMessage) Reset() {
	*x = TLMsgEditMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMsgEditMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMsgEditMessage) ProtoMessage() {}

func (x *TLMsgEditMessage) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMsgEditMessage.ProtoReflect.Descriptor instead.
func (*TLMsgEditMessage) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{9}
}

func (x *TLMsgEditMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMsgEditMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMsgEditMessage) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLMsgEditMessage) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMsgEditMessage) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMsgEditMessage) GetEditType() int32 {
	if x != nil {
		return x.EditType
	}
	return 0
}

func (x *TLMsgEditMessage) GetMessage() *OutboxMessage {
	if x != nil {
		return x.Message
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMsgEditMessageV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor       `protobuf:"varint,1,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	UserId      int64               `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64               `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	PeerType    int32               `protobuf:"varint,5,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64               `protobuf:"varint,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	EditType    int32               `protobuf:"varint,7,opt,name=edit_type,json=editType,proto3" json:"edit_type,omitempty"`
	NewMessage  *OutboxMessage      `protobuf:"bytes,8,opt,name=new_message,json=newMessage,proto3" json:"new_message,omitempty"`
	DstMessage  *mtproto.MessageBox `protobuf:"bytes,9,opt,name=dst_message,json=dstMessage,proto3" json:"dst_message,omitempty"`
}

func (x *TLMsgEditMessageV2) Reset() {
	*x = TLMsgEditMessageV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMsgEditMessageV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMsgEditMessageV2) ProtoMessage() {}

func (x *TLMsgEditMessageV2) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMsgEditMessageV2.ProtoReflect.Descriptor instead.
func (*TLMsgEditMessageV2) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{10}
}

func (x *TLMsgEditMessageV2) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMsgEditMessageV2) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMsgEditMessageV2) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLMsgEditMessageV2) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMsgEditMessageV2) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMsgEditMessageV2) GetEditType() int32 {
	if x != nil {
		return x.EditType
	}
	return 0
}

func (x *TLMsgEditMessageV2) GetNewMessage() *OutboxMessage {
	if x != nil {
		return x.NewMessage
	}
	return nil
}

func (x *TLMsgEditMessageV2) GetDstMessage() *mtproto.MessageBox {
	if x != nil {
		return x.DstMessage
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMsgDeleteMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	PeerType    int32         `protobuf:"varint,5,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Revoke      bool          `protobuf:"varint,7,opt,name=revoke,proto3" json:"revoke,omitempty"`
	Id          []int32       `protobuf:"varint,8,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *TLMsgDeleteMessages) Reset() {
	*x = TLMsgDeleteMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMsgDeleteMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMsgDeleteMessages) ProtoMessage() {}

func (x *TLMsgDeleteMessages) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMsgDeleteMessages.ProtoReflect.Descriptor instead.
func (*TLMsgDeleteMessages) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{11}
}

func (x *TLMsgDeleteMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMsgDeleteMessages) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMsgDeleteMessages) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLMsgDeleteMessages) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMsgDeleteMessages) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMsgDeleteMessages) GetRevoke() bool {
	if x != nil {
		return x.Revoke
	}
	return false
}

func (x *TLMsgDeleteMessages) GetId() []int32 {
	if x != nil {
		return x.Id
	}
	return nil
}

// --------------------------------------------------------------------------------------------
type TLMsgDeleteHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	PeerType    int32         `protobuf:"varint,5,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	JustClear   bool          `protobuf:"varint,7,opt,name=just_clear,json=justClear,proto3" json:"just_clear,omitempty"`
	Revoke      bool          `protobuf:"varint,8,opt,name=revoke,proto3" json:"revoke,omitempty"`
	MaxId       int32         `protobuf:"varint,9,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
}

func (x *TLMsgDeleteHistory) Reset() {
	*x = TLMsgDeleteHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMsgDeleteHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMsgDeleteHistory) ProtoMessage() {}

func (x *TLMsgDeleteHistory) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMsgDeleteHistory.ProtoReflect.Descriptor instead.
func (*TLMsgDeleteHistory) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{12}
}

func (x *TLMsgDeleteHistory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMsgDeleteHistory) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMsgDeleteHistory) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLMsgDeleteHistory) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMsgDeleteHistory) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMsgDeleteHistory) GetJustClear() bool {
	if x != nil {
		return x.JustClear
	}
	return false
}

func (x *TLMsgDeleteHistory) GetRevoke() bool {
	if x != nil {
		return x.Revoke
	}
	return false
}

func (x *TLMsgDeleteHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMsgDeletePhoneCallHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	Revoke      bool          `protobuf:"varint,5,opt,name=revoke,proto3" json:"revoke,omitempty"`
}

func (x *TLMsgDeletePhoneCallHistory) Reset() {
	*x = TLMsgDeletePhoneCallHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMsgDeletePhoneCallHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMsgDeletePhoneCallHistory) ProtoMessage() {}

func (x *TLMsgDeletePhoneCallHistory) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMsgDeletePhoneCallHistory.ProtoReflect.Descriptor instead.
func (*TLMsgDeletePhoneCallHistory) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{13}
}

func (x *TLMsgDeletePhoneCallHistory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMsgDeletePhoneCallHistory) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMsgDeletePhoneCallHistory) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLMsgDeletePhoneCallHistory) GetRevoke() bool {
	if x != nil {
		return x.Revoke
	}
	return false
}

// --------------------------------------------------------------------------------------------
type TLMsgDeleteChatHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor  TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	ChatId       int64         `protobuf:"varint,3,opt,name=chat_id,json=chatId,proto3" json:"chat_id,omitempty"`
	DeleteUserId int64         `protobuf:"varint,4,opt,name=delete_user_id,json=deleteUserId,proto3" json:"delete_user_id,omitempty"`
}

func (x *TLMsgDeleteChatHistory) Reset() {
	*x = TLMsgDeleteChatHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMsgDeleteChatHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMsgDeleteChatHistory) ProtoMessage() {}

func (x *TLMsgDeleteChatHistory) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMsgDeleteChatHistory.ProtoReflect.Descriptor instead.
func (*TLMsgDeleteChatHistory) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{14}
}

func (x *TLMsgDeleteChatHistory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMsgDeleteChatHistory) GetChatId() int64 {
	if x != nil {
		return x.ChatId
	}
	return 0
}

func (x *TLMsgDeleteChatHistory) GetDeleteUserId() int64 {
	if x != nil {
		return x.DeleteUserId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMsgReadHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	PeerType    int32         `protobuf:"varint,5,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	MaxId       int32         `protobuf:"varint,7,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
}

func (x *TLMsgReadHistory) Reset() {
	*x = TLMsgReadHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMsgReadHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMsgReadHistory) ProtoMessage() {}

func (x *TLMsgReadHistory) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMsgReadHistory.ProtoReflect.Descriptor instead.
func (*TLMsgReadHistory) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{15}
}

func (x *TLMsgReadHistory) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMsgReadHistory) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMsgReadHistory) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLMsgReadHistory) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMsgReadHistory) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMsgReadHistory) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMsgReadHistoryV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	PeerType    int32         `protobuf:"varint,5,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	MaxId       int32         `protobuf:"varint,7,opt,name=max_id,json=maxId,proto3" json:"max_id,omitempty"`
}

func (x *TLMsgReadHistoryV2) Reset() {
	*x = TLMsgReadHistoryV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMsgReadHistoryV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMsgReadHistoryV2) ProtoMessage() {}

func (x *TLMsgReadHistoryV2) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMsgReadHistoryV2.ProtoReflect.Descriptor instead.
func (*TLMsgReadHistoryV2) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{16}
}

func (x *TLMsgReadHistoryV2) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMsgReadHistoryV2) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMsgReadHistoryV2) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLMsgReadHistoryV2) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMsgReadHistoryV2) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMsgReadHistoryV2) GetMaxId() int32 {
	if x != nil {
		return x.MaxId
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMsgUpdatePinnedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	Silent      bool          `protobuf:"varint,5,opt,name=silent,proto3" json:"silent,omitempty"`
	Unpin       bool          `protobuf:"varint,6,opt,name=unpin,proto3" json:"unpin,omitempty"`
	PmOneside   bool          `protobuf:"varint,7,opt,name=pm_oneside,json=pmOneside,proto3" json:"pm_oneside,omitempty"`
	PeerType    int32         `protobuf:"varint,8,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,9,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
	Id          int32         `protobuf:"varint,10,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TLMsgUpdatePinnedMessage) Reset() {
	*x = TLMsgUpdatePinnedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMsgUpdatePinnedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMsgUpdatePinnedMessage) ProtoMessage() {}

func (x *TLMsgUpdatePinnedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMsgUpdatePinnedMessage.ProtoReflect.Descriptor instead.
func (*TLMsgUpdatePinnedMessage) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{17}
}

func (x *TLMsgUpdatePinnedMessage) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMsgUpdatePinnedMessage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMsgUpdatePinnedMessage) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLMsgUpdatePinnedMessage) GetSilent() bool {
	if x != nil {
		return x.Silent
	}
	return false
}

func (x *TLMsgUpdatePinnedMessage) GetUnpin() bool {
	if x != nil {
		return x.Unpin
	}
	return false
}

func (x *TLMsgUpdatePinnedMessage) GetPmOneside() bool {
	if x != nil {
		return x.PmOneside
	}
	return false
}

func (x *TLMsgUpdatePinnedMessage) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMsgUpdatePinnedMessage) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

func (x *TLMsgUpdatePinnedMessage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// --------------------------------------------------------------------------------------------
type TLMsgUnpinAllMessages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Constructor TLConstructor `protobuf:"varint,1,opt,name=constructor,proto3,enum=msg.TLConstructor" json:"constructor,omitempty"`
	UserId      int64         `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuthKeyId   int64         `protobuf:"varint,4,opt,name=auth_key_id,json=authKeyId,proto3" json:"auth_key_id,omitempty"`
	PeerType    int32         `protobuf:"varint,5,opt,name=peer_type,json=peerType,proto3" json:"peer_type,omitempty"`
	PeerId      int64         `protobuf:"varint,6,opt,name=peer_id,json=peerId,proto3" json:"peer_id,omitempty"`
}

func (x *TLMsgUnpinAllMessages) Reset() {
	*x = TLMsgUnpinAllMessages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msg_tl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLMsgUnpinAllMessages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLMsgUnpinAllMessages) ProtoMessage() {}

func (x *TLMsgUnpinAllMessages) ProtoReflect() protoreflect.Message {
	mi := &file_msg_tl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLMsgUnpinAllMessages.ProtoReflect.Descriptor instead.
func (*TLMsgUnpinAllMessages) Descriptor() ([]byte, []int) {
	return file_msg_tl_proto_rawDescGZIP(), []int{18}
}

func (x *TLMsgUnpinAllMessages) GetConstructor() TLConstructor {
	if x != nil {
		return x.Constructor
	}
	return TLConstructor_CRC32_UNKNOWN
}

func (x *TLMsgUnpinAllMessages) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *TLMsgUnpinAllMessages) GetAuthKeyId() int64 {
	if x != nil {
		return x.AuthKeyId
	}
	return 0
}

func (x *TLMsgUnpinAllMessages) GetPeerType() int32 {
	if x != nil {
		return x.PeerType
	}
	return 0
}

func (x *TLMsgUnpinAllMessages) GetPeerId() int64 {
	if x != nil {
		return x.PeerId
	}
	return 0
}

var File_msg_tl_proto protoreflect.FileDescriptor

var file_msg_tl_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x73, 0x67, 0x2e, 0x74, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03,
	0x6d, 0x73, 0x67, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x74, 0x6c, 0x2e, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa8, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x64, 0x69, 0x61,
	0x6c, 0x6f, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x5f, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x73, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3e, 0x0a, 0x11, 0x54,
	0x4c, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x29, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0xb6, 0x02, 0x0a, 0x0d,
	0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x6f,
	0x5f, 0x77, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x6e, 0x6f, 0x57, 0x65, 0x62, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x63,
	0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x72, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x22, 0x3c, 0x0a, 0x10, 0x54, 0x4c, 0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61,
	0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4f, 0x75,
	0x74, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x64, 0x61, 0x74,
	0x61, 0x32, 0x22, 0xb2, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x09, 0x54, 0x4c, 0x5f, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x32, 0x22, 0x88, 0x02, 0x0a, 0x16, 0x54, 0x4c, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x75, 0x73, 0x68, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x75, 0x73, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4f, 0x75, 0x74, 0x62,
	0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0xe6, 0x01, 0x0a, 0x1a, 0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe9, 0x01, 0x0a, 0x14,
	0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x56, 0x32, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67,
	0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x12, 0x54, 0x4c, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xc3,
	0x02, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x32, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x64, 0x69, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x65, 0x64, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x0b, 0x6e, 0x65, 0x77,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x4f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34,
	0x0a, 0x0b, 0x64, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x6f, 0x78, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x15, 0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x89, 0x02, 0x0a, 0x14,
	0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65,
	0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6a, 0x75, 0x73,
	0x74, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6a,
	0x75, 0x73, 0x74, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x22, 0xa6, 0x01, 0x0a, 0x1d, 0x54, 0x4c, 0x5f, 0x6d,
	0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x76, 0x6f, 0x6b, 0x65,
	0x22, 0x8f, 0x01, 0x0a, 0x18, 0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x68, 0x61, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x12, 0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6d, 0x61, 0x78, 0x49, 0x64, 0x22, 0xd2, 0x01, 0x0a, 0x14, 0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x32, 0x12, 0x34,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6d, 0x61, 0x78, 0x49, 0x64, 0x22, 0x9e, 0x02, 0x0a, 0x1a, 0x54,
	0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6d, 0x5f, 0x6f, 0x6e, 0x65,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x6d, 0x4f, 0x6e,
	0x65, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xbe, 0x01, 0x0a, 0x17,
	0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70, 0x65, 0x65, 0x72, 0x49, 0x64, 0x2a, 0xd8, 0x04, 0x0a,
	0x0d, 0x54, 0x4c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x11,
	0x0a, 0x0d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x0c, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x10, 0xba, 0xc9, 0xe1, 0xd1, 0x05, 0x12, 0x1b, 0x0a, 0x13, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0xb1,
	0xc9, 0xd4, 0x9c, 0x05, 0x12, 0x21, 0x0a, 0x14, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0xb3, 0xe2, 0x92,
	0xeb, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x19, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x10, 0x9a, 0xf4, 0xc3, 0xae, 0x03, 0x12, 0x25, 0x0a, 0x1d, 0x43, 0x52,
	0x43, 0x33, 0x32, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x10, 0xd4, 0x89, 0x92, 0xc1,
	0x02, 0x12, 0x24, 0x0a, 0x17, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73,
	0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x32, 0x10, 0xc4, 0xf9, 0xa9,
	0xa6, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x22, 0x0a, 0x15, 0x43, 0x52, 0x43, 0x33, 0x32,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x10, 0xd1, 0xf1, 0xbb, 0x88, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x1f, 0x0a, 0x17, 0x43,
	0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x56, 0x32, 0x10, 0xe1, 0xbf, 0xf9, 0xcf, 0x06, 0x12, 0x20, 0x0a, 0x18,
	0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x10, 0x9d, 0x94, 0xa0, 0x8f, 0x02, 0x12, 0x1f,
	0x0a, 0x17, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0xca, 0xd1, 0x83, 0xae, 0x07, 0x12,
	0x28, 0x0a, 0x20, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x10, 0xbe, 0xc2, 0xde, 0xb5, 0x02, 0x12, 0x28, 0x0a, 0x1b, 0x43, 0x52, 0x43,
	0x33, 0x32, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0xdb, 0xc5, 0xfd, 0xf8, 0xfe, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x12, 0x1d, 0x0a, 0x15, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x73, 0x67,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x92, 0xdc, 0xbd,
	0xd0, 0x05, 0x12, 0x1e, 0x0a, 0x17, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x32, 0x10, 0x86, 0xe4,
	0xe6, 0x7d, 0x12, 0x2a, 0x0a, 0x1d, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x10, 0xa9, 0xa3, 0xb9, 0xad, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x01, 0x12, 0x27,
	0x0a, 0x1a, 0x43, 0x52, 0x43, 0x33, 0x32, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x6e, 0x70, 0x69,
	0x6e, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x10, 0xa5, 0xbe, 0x99,
	0xc4, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x01, 0x32, 0xad, 0x08, 0x0a, 0x06, 0x52, 0x50, 0x43, 0x4d,
	0x73, 0x67, 0x12, 0x43, 0x0a, 0x13, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x2e, 0x6d, 0x73, 0x67, 0x2e,
	0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x17, 0x6d, 0x73, 0x67, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x11, 0x6d, 0x73, 0x67,
	0x5f, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x32, 0x12, 0x19,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x32, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a,
	0x0f, 0x6d, 0x73, 0x67, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x17, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a,
	0x11, 0x6d, 0x73, 0x67, 0x5f, 0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x56, 0x32, 0x12, 0x19, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f,
	0x65, 0x64, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x32, 0x1a, 0x10, 0x2e,
	0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x56, 0x0a, 0x12, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x6d, 0x73, 0x67,
	0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x19,
	0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x6b,
	0x0a, 0x1a, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x68, 0x6f, 0x6e,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x22, 0x2e, 0x6d,
	0x73, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x68, 0x6f, 0x6e, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x1a, 0x27, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x6f, 0x75, 0x6e,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x15, 0x6d,
	0x73, 0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x1a, 0x0d, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0f, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x64,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x17, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65,
	0x61, 0x64, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x56, 0x32, 0x12, 0x19, 0x2e, 0x6d, 0x73,
	0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x56, 0x32, 0x1a, 0x22, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x17,
	0x6d, 0x73, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c,
	0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x14,
	0x6d, 0x73, 0x67, 0x5f, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x4c, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x41, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x1a, 0x21, 0x2e, 0x6d, 0x74, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x42, 0x3f, 0x5a, 0x3d, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2f, 0x74,
	0x65, 0x61, 0x6d, 0x67, 0x72, 0x61, 0x6d, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61,
	0x70, 0x70, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x2f, 0x6d, 0x73, 0x67,
	0x2f, 0x6d, 0x73, 0x67, 0x2f, 0x6d, 0x73, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msg_tl_proto_rawDescOnce sync.Once
	file_msg_tl_proto_rawDescData = file_msg_tl_proto_rawDesc
)

func file_msg_tl_proto_rawDescGZIP() []byte {
	file_msg_tl_proto_rawDescOnce.Do(func() {
		file_msg_tl_proto_rawDescData = protoimpl.X.CompressGZIP(file_msg_tl_proto_rawDescData)
	})
	return file_msg_tl_proto_rawDescData
}

var file_msg_tl_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_msg_tl_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_msg_tl_proto_goTypes = []interface{}{
	(TLConstructor)(0),                             // 0: msg.TLConstructor
	(*ContentMessage)(nil),                         // 1: msg.ContentMessage
	(*TLContentMessage)(nil),                       // 2: msg.TL_contentMessage
	(*OutboxMessage)(nil),                          // 3: msg.OutboxMessage
	(*TLOutboxMessage)(nil),                        // 4: msg.TL_outboxMessage
	(*Sender)(nil),                                 // 5: msg.Sender
	(*TLSender)(nil),                               // 6: msg.TL_sender
	(*TLMsgPushUserMessage)(nil),                   // 7: msg.TL_msg_pushUserMessage
	(*TLMsgReadMessageContents)(nil),               // 8: msg.TL_msg_readMessageContents
	(*TLMsgSendMessageV2)(nil),                     // 9: msg.TL_msg_sendMessageV2
	(*TLMsgEditMessage)(nil),                       // 10: msg.TL_msg_editMessage
	(*TLMsgEditMessageV2)(nil),                     // 11: msg.TL_msg_editMessageV2
	(*TLMsgDeleteMessages)(nil),                    // 12: msg.TL_msg_deleteMessages
	(*TLMsgDeleteHistory)(nil),                     // 13: msg.TL_msg_deleteHistory
	(*TLMsgDeletePhoneCallHistory)(nil),            // 14: msg.TL_msg_deletePhoneCallHistory
	(*TLMsgDeleteChatHistory)(nil),                 // 15: msg.TL_msg_deleteChatHistory
	(*TLMsgReadHistory)(nil),                       // 16: msg.TL_msg_readHistory
	(*TLMsgReadHistoryV2)(nil),                     // 17: msg.TL_msg_readHistoryV2
	(*TLMsgUpdatePinnedMessage)(nil),               // 18: msg.TL_msg_updatePinnedMessage
	(*TLMsgUnpinAllMessages)(nil),                  // 19: msg.TL_msg_unpinAllMessages
	(*mtproto.Message)(nil),                        // 20: mtproto.Message
	(*wrapperspb.Int32Value)(nil),                  // 21: google.protobuf.Int32Value
	(*mtproto.MessageBox)(nil),                     // 22: mtproto.MessageBox
	(*mtproto.Bool)(nil),                           // 23: mtproto.Bool
	(*mtproto.Messages_AffectedMessages)(nil),      // 24: mtproto.messages_AffectedMessages
	(*mtproto.Updates)(nil),                        // 25: mtproto.Updates
	(*mtproto.Messages_AffectedHistory)(nil),       // 26: mtproto.messages_AffectedHistory
	(*mtproto.Messages_AffectedFoundMessages)(nil), // 27: mtproto.messages_AffectedFoundMessages
}
var file_msg_tl_proto_depIdxs = []int32{
	0,  // 0: msg.ContentMessage.constructor:type_name -> msg.TLConstructor
	1,  // 1: msg.TL_contentMessage.data2:type_name -> msg.ContentMessage
	0,  // 2: msg.OutboxMessage.constructor:type_name -> msg.TLConstructor
	20, // 3: msg.OutboxMessage.message:type_name -> mtproto.Message
	21, // 4: msg.OutboxMessage.schedule_date:type_name -> google.protobuf.Int32Value
	3,  // 5: msg.TL_outboxMessage.data2:type_name -> msg.OutboxMessage
	0,  // 6: msg.Sender.constructor:type_name -> msg.TLConstructor
	5,  // 7: msg.TL_sender.data2:type_name -> msg.Sender
	0,  // 8: msg.TL_msg_pushUserMessage.constructor:type_name -> msg.TLConstructor
	3,  // 9: msg.TL_msg_pushUserMessage.message:type_name -> msg.OutboxMessage
	0,  // 10: msg.TL_msg_readMessageContents.constructor:type_name -> msg.TLConstructor
	1,  // 11: msg.TL_msg_readMessageContents.id:type_name -> msg.ContentMessage
	0,  // 12: msg.TL_msg_sendMessageV2.constructor:type_name -> msg.TLConstructor
	3,  // 13: msg.TL_msg_sendMessageV2.message:type_name -> msg.OutboxMessage
	0,  // 14: msg.TL_msg_editMessage.constructor:type_name -> msg.TLConstructor
	3,  // 15: msg.TL_msg_editMessage.message:type_name -> msg.OutboxMessage
	0,  // 16: msg.TL_msg_editMessageV2.constructor:type_name -> msg.TLConstructor
	3,  // 17: msg.TL_msg_editMessageV2.new_message:type_name -> msg.OutboxMessage
	22, // 18: msg.TL_msg_editMessageV2.dst_message:type_name -> mtproto.MessageBox
	0,  // 19: msg.TL_msg_deleteMessages.constructor:type_name -> msg.TLConstructor
	0,  // 20: msg.TL_msg_deleteHistory.constructor:type_name -> msg.TLConstructor
	0,  // 21: msg.TL_msg_deletePhoneCallHistory.constructor:type_name -> msg.TLConstructor
	0,  // 22: msg.TL_msg_deleteChatHistory.constructor:type_name -> msg.TLConstructor
	0,  // 23: msg.TL_msg_readHistory.constructor:type_name -> msg.TLConstructor
	0,  // 24: msg.TL_msg_readHistoryV2.constructor:type_name -> msg.TLConstructor
	0,  // 25: msg.TL_msg_updatePinnedMessage.constructor:type_name -> msg.TLConstructor
	0,  // 26: msg.TL_msg_unpinAllMessages.constructor:type_name -> msg.TLConstructor
	7,  // 27: msg.RPCMsg.msg_pushUserMessage:input_type -> msg.TL_msg_pushUserMessage
	8,  // 28: msg.RPCMsg.msg_readMessageContents:input_type -> msg.TL_msg_readMessageContents
	9,  // 29: msg.RPCMsg.msg_sendMessageV2:input_type -> msg.TL_msg_sendMessageV2
	10, // 30: msg.RPCMsg.msg_editMessage:input_type -> msg.TL_msg_editMessage
	11, // 31: msg.RPCMsg.msg_editMessageV2:input_type -> msg.TL_msg_editMessageV2
	12, // 32: msg.RPCMsg.msg_deleteMessages:input_type -> msg.TL_msg_deleteMessages
	13, // 33: msg.RPCMsg.msg_deleteHistory:input_type -> msg.TL_msg_deleteHistory
	14, // 34: msg.RPCMsg.msg_deletePhoneCallHistory:input_type -> msg.TL_msg_deletePhoneCallHistory
	15, // 35: msg.RPCMsg.msg_deleteChatHistory:input_type -> msg.TL_msg_deleteChatHistory
	16, // 36: msg.RPCMsg.msg_readHistory:input_type -> msg.TL_msg_readHistory
	17, // 37: msg.RPCMsg.msg_readHistoryV2:input_type -> msg.TL_msg_readHistoryV2
	18, // 38: msg.RPCMsg.msg_updatePinnedMessage:input_type -> msg.TL_msg_updatePinnedMessage
	19, // 39: msg.RPCMsg.msg_unpinAllMessages:input_type -> msg.TL_msg_unpinAllMessages
	23, // 40: msg.RPCMsg.msg_pushUserMessage:output_type -> mtproto.Bool
	24, // 41: msg.RPCMsg.msg_readMessageContents:output_type -> mtproto.messages_AffectedMessages
	25, // 42: msg.RPCMsg.msg_sendMessageV2:output_type -> mtproto.Updates
	25, // 43: msg.RPCMsg.msg_editMessage:output_type -> mtproto.Updates
	25, // 44: msg.RPCMsg.msg_editMessageV2:output_type -> mtproto.Updates
	24, // 45: msg.RPCMsg.msg_deleteMessages:output_type -> mtproto.messages_AffectedMessages
	26, // 46: msg.RPCMsg.msg_deleteHistory:output_type -> mtproto.messages_AffectedHistory
	27, // 47: msg.RPCMsg.msg_deletePhoneCallHistory:output_type -> mtproto.messages_AffectedFoundMessages
	23, // 48: msg.RPCMsg.msg_deleteChatHistory:output_type -> mtproto.Bool
	24, // 49: msg.RPCMsg.msg_readHistory:output_type -> mtproto.messages_AffectedMessages
	24, // 50: msg.RPCMsg.msg_readHistoryV2:output_type -> mtproto.messages_AffectedMessages
	25, // 51: msg.RPCMsg.msg_updatePinnedMessage:output_type -> mtproto.Updates
	26, // 52: msg.RPCMsg.msg_unpinAllMessages:output_type -> mtproto.messages_AffectedHistory
	40, // [40:53] is the sub-list for method output_type
	27, // [27:40] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_msg_tl_proto_init() }
func file_msg_tl_proto_init() {
	if File_msg_tl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msg_tl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContentMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLContentMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutboxMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLOutboxMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMsgPushUserMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMsgReadMessageContents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMsgSendMessageV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMsgEditMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMsgEditMessageV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMsgDeleteMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMsgDeleteHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMsgDeletePhoneCallHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMsgDeleteChatHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMsgReadHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMsgReadHistoryV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMsgUpdatePinnedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msg_tl_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLMsgUnpinAllMessages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msg_tl_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_msg_tl_proto_goTypes,
		DependencyIndexes: file_msg_tl_proto_depIdxs,
		EnumInfos:         file_msg_tl_proto_enumTypes,
		MessageInfos:      file_msg_tl_proto_msgTypes,
	}.Build()
	File_msg_tl_proto = out.File
	file_msg_tl_proto_rawDesc = nil
	file_msg_tl_proto_goTypes = nil
	file_msg_tl_proto_depIdxs = nil
}
